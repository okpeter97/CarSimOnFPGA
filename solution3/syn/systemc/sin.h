// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sin_HH_
#define _sin_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sin_or_cos_double_s.h"

namespace ap_rtl {

struct sin : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > x;
    sc_out< sc_lv<64> > ap_return;


    // Module declarations
    sin(sc_module_name name);
    SC_HAS_PROCESS(sin);

    ~sin();

    sc_trace_file* mVcdFile;

    sin_or_cos_double_s* grp_sin_or_cos_double_s_fu_26;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > x_read_reg_46;
    sc_signal< sc_logic > grp_sin_or_cos_double_s_fu_26_ap_start;
    sc_signal< sc_logic > grp_sin_or_cos_double_s_fu_26_ap_done;
    sc_signal< sc_logic > grp_sin_or_cos_double_s_fu_26_ap_idle;
    sc_signal< sc_logic > grp_sin_or_cos_double_s_fu_26_ap_ready;
    sc_signal< sc_logic > grp_sin_or_cos_double_s_fu_26_do_cos;
    sc_signal< sc_lv<64> > grp_sin_or_cos_double_s_fu_26_ap_return;
    sc_signal< sc_logic > grp_sin_or_cos_double_s_fu_26_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > ap_return_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_sin_or_cos_double_s_fu_26_ap_start();
    void thread_grp_sin_or_cos_double_s_fu_26_do_cos();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
