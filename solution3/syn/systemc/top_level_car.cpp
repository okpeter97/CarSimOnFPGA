// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top_level_car.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top_level_car::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic top_level_car::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> top_level_car::ap_ST_fsm_state1 = "1";
const sc_lv<3> top_level_car::ap_ST_fsm_state2 = "10";
const sc_lv<3> top_level_car::ap_ST_fsm_state3 = "100";
const sc_lv<32> top_level_car::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> top_level_car::ap_const_lv32_1 = "1";
const sc_lv<32> top_level_car::ap_const_lv32_2 = "10";
const bool top_level_car::ap_const_boolean_1 = true;

top_level_car::top_level_car(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_update_1_fu_127 = new update_1("grp_update_1_fu_127");
    grp_update_1_fu_127->ap_clk(ap_clk);
    grp_update_1_fu_127->ap_rst(ap_rst);
    grp_update_1_fu_127->ap_start(grp_update_1_fu_127_ap_start);
    grp_update_1_fu_127->ap_done(grp_update_1_fu_127_ap_done);
    grp_update_1_fu_127->ap_idle(grp_update_1_fu_127_ap_idle);
    grp_update_1_fu_127->ap_ready(grp_update_1_fu_127_ap_ready);
    grp_update_1_fu_127->deltaTime(deltaTime);
    grp_update_1_fu_127->engine_torque(torque);
    grp_update_1_fu_127->steeringAngle(steeringAngle);
    grp_update_1_fu_127->car_chassis_vel_z_i(car_chassis_vel_z);
    grp_update_1_fu_127->car_chassis_vel_z_o(grp_update_1_fu_127_car_chassis_vel_z_o);
    grp_update_1_fu_127->car_chassis_vel_z_o_ap_vld(grp_update_1_fu_127_car_chassis_vel_z_o_ap_vld);
    grp_update_1_fu_127->car_chassis_vel_x_i(car_chassis_vel_x);
    grp_update_1_fu_127->car_chassis_vel_x_o(grp_update_1_fu_127_car_chassis_vel_x_o);
    grp_update_1_fu_127->car_chassis_vel_x_o_ap_vld(grp_update_1_fu_127_car_chassis_vel_x_o_ap_vld);
    grp_update_1_fu_127->car_chassis_orientat_i(car_chassis_orientat);
    grp_update_1_fu_127->car_chassis_orientat_o(grp_update_1_fu_127_car_chassis_orientat_o);
    grp_update_1_fu_127->car_chassis_orientat_o_ap_vld(grp_update_1_fu_127_car_chassis_orientat_o_ap_vld);
    grp_update_1_fu_127->car_chassis_pos_x_i(car_chassis_pos_x);
    grp_update_1_fu_127->car_chassis_pos_x_o(grp_update_1_fu_127_car_chassis_pos_x_o);
    grp_update_1_fu_127->car_chassis_pos_x_o_ap_vld(grp_update_1_fu_127_car_chassis_pos_x_o_ap_vld);
    grp_update_1_fu_127->car_chassis_pos_z_i(car_chassis_pos_z);
    grp_update_1_fu_127->car_chassis_pos_z_o(grp_update_1_fu_127_car_chassis_pos_z_o);
    grp_update_1_fu_127->car_chassis_pos_z_o_ap_vld(grp_update_1_fu_127_car_chassis_pos_z_o_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_update_1_fu_127_ap_start);
    sensitive << ( grp_update_1_fu_127_ap_start_reg );

    SC_METHOD(thread_orientation);
    sensitive << ( car_chassis_orientat );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_orientation_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_pos_x);
    sensitive << ( car_chassis_pos_x );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_pos_x_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_pos_y);
    sensitive << ( car_chassis_pos_z );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_pos_y_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_vel_x);
    sensitive << ( car_chassis_vel_x );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_vel_x_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_vel_y);
    sensitive << ( car_chassis_vel_z );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_vel_y_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_update_1_fu_127_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    car_chassis_vel_z = "00000000000000000000000000000000";
    car_chassis_vel_x = "00000000000000000000000000000000";
    car_chassis_orientat = "00000000000000000000000000000000";
    car_chassis_pos_x = "00000000000000000000000000000000";
    car_chassis_pos_z = "00000000000000000000000000000000";
    grp_update_1_fu_127_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_level_car_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, deltaTime, "(port)deltaTime");
    sc_trace(mVcdFile, torque, "(port)torque");
    sc_trace(mVcdFile, steeringAngle, "(port)steeringAngle");
    sc_trace(mVcdFile, pos_x, "(port)pos_x");
    sc_trace(mVcdFile, pos_x_ap_vld, "(port)pos_x_ap_vld");
    sc_trace(mVcdFile, pos_y, "(port)pos_y");
    sc_trace(mVcdFile, pos_y_ap_vld, "(port)pos_y_ap_vld");
    sc_trace(mVcdFile, vel_x, "(port)vel_x");
    sc_trace(mVcdFile, vel_x_ap_vld, "(port)vel_x_ap_vld");
    sc_trace(mVcdFile, vel_y, "(port)vel_y");
    sc_trace(mVcdFile, vel_y_ap_vld, "(port)vel_y_ap_vld");
    sc_trace(mVcdFile, orientation, "(port)orientation");
    sc_trace(mVcdFile, orientation_ap_vld, "(port)orientation_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, car_chassis_vel_z, "car_chassis_vel_z");
    sc_trace(mVcdFile, car_chassis_vel_x, "car_chassis_vel_x");
    sc_trace(mVcdFile, car_chassis_orientat, "car_chassis_orientat");
    sc_trace(mVcdFile, car_chassis_pos_x, "car_chassis_pos_x");
    sc_trace(mVcdFile, car_chassis_pos_z, "car_chassis_pos_z");
    sc_trace(mVcdFile, grp_update_1_fu_127_ap_start, "grp_update_1_fu_127_ap_start");
    sc_trace(mVcdFile, grp_update_1_fu_127_ap_done, "grp_update_1_fu_127_ap_done");
    sc_trace(mVcdFile, grp_update_1_fu_127_ap_idle, "grp_update_1_fu_127_ap_idle");
    sc_trace(mVcdFile, grp_update_1_fu_127_ap_ready, "grp_update_1_fu_127_ap_ready");
    sc_trace(mVcdFile, grp_update_1_fu_127_car_chassis_vel_z_o, "grp_update_1_fu_127_car_chassis_vel_z_o");
    sc_trace(mVcdFile, grp_update_1_fu_127_car_chassis_vel_z_o_ap_vld, "grp_update_1_fu_127_car_chassis_vel_z_o_ap_vld");
    sc_trace(mVcdFile, grp_update_1_fu_127_car_chassis_vel_x_o, "grp_update_1_fu_127_car_chassis_vel_x_o");
    sc_trace(mVcdFile, grp_update_1_fu_127_car_chassis_vel_x_o_ap_vld, "grp_update_1_fu_127_car_chassis_vel_x_o_ap_vld");
    sc_trace(mVcdFile, grp_update_1_fu_127_car_chassis_orientat_o, "grp_update_1_fu_127_car_chassis_orientat_o");
    sc_trace(mVcdFile, grp_update_1_fu_127_car_chassis_orientat_o_ap_vld, "grp_update_1_fu_127_car_chassis_orientat_o_ap_vld");
    sc_trace(mVcdFile, grp_update_1_fu_127_car_chassis_pos_x_o, "grp_update_1_fu_127_car_chassis_pos_x_o");
    sc_trace(mVcdFile, grp_update_1_fu_127_car_chassis_pos_x_o_ap_vld, "grp_update_1_fu_127_car_chassis_pos_x_o_ap_vld");
    sc_trace(mVcdFile, grp_update_1_fu_127_car_chassis_pos_z_o, "grp_update_1_fu_127_car_chassis_pos_z_o");
    sc_trace(mVcdFile, grp_update_1_fu_127_car_chassis_pos_z_o_ap_vld, "grp_update_1_fu_127_car_chassis_pos_z_o_ap_vld");
    sc_trace(mVcdFile, grp_update_1_fu_127_ap_start_reg, "grp_update_1_fu_127_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("top_level_car.hdltvin.dat");
    mHdltvoutHandle.open("top_level_car.hdltvout.dat");
}

top_level_car::~top_level_car() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_update_1_fu_127;
}

void top_level_car::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_update_1_fu_127_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_update_1_fu_127_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_update_1_fu_127_ap_ready.read())) {
            grp_update_1_fu_127_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_update_1_fu_127_car_chassis_orientat_o_ap_vld.read()))) {
        car_chassis_orientat = grp_update_1_fu_127_car_chassis_orientat_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_update_1_fu_127_car_chassis_pos_x_o_ap_vld.read()))) {
        car_chassis_pos_x = grp_update_1_fu_127_car_chassis_pos_x_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_update_1_fu_127_car_chassis_pos_z_o_ap_vld.read()))) {
        car_chassis_pos_z = grp_update_1_fu_127_car_chassis_pos_z_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_update_1_fu_127_car_chassis_vel_x_o_ap_vld.read()))) {
        car_chassis_vel_x = grp_update_1_fu_127_car_chassis_vel_x_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_update_1_fu_127_car_chassis_vel_z_o_ap_vld.read()))) {
        car_chassis_vel_z = grp_update_1_fu_127_car_chassis_vel_z_o.read();
    }
}

void top_level_car::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void top_level_car::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void top_level_car::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void top_level_car::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void top_level_car::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void top_level_car::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void top_level_car::thread_grp_update_1_fu_127_ap_start() {
    grp_update_1_fu_127_ap_start = grp_update_1_fu_127_ap_start_reg.read();
}

void top_level_car::thread_orientation() {
    orientation = car_chassis_orientat.read();
}

void top_level_car::thread_orientation_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        orientation_ap_vld = ap_const_logic_1;
    } else {
        orientation_ap_vld = ap_const_logic_0;
    }
}

void top_level_car::thread_pos_x() {
    pos_x = car_chassis_pos_x.read();
}

void top_level_car::thread_pos_x_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pos_x_ap_vld = ap_const_logic_1;
    } else {
        pos_x_ap_vld = ap_const_logic_0;
    }
}

void top_level_car::thread_pos_y() {
    pos_y = car_chassis_pos_z.read();
}

void top_level_car::thread_pos_y_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pos_y_ap_vld = ap_const_logic_1;
    } else {
        pos_y_ap_vld = ap_const_logic_0;
    }
}

void top_level_car::thread_vel_x() {
    vel_x = car_chassis_vel_x.read();
}

void top_level_car::thread_vel_x_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        vel_x_ap_vld = ap_const_logic_1;
    } else {
        vel_x_ap_vld = ap_const_logic_0;
    }
}

void top_level_car::thread_vel_y() {
    vel_y = car_chassis_vel_z.read();
}

void top_level_car::thread_vel_y_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        vel_y_ap_vld = ap_const_logic_1;
    } else {
        vel_y_ap_vld = ap_const_logic_0;
    }
}

void top_level_car::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_update_1_fu_127_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void top_level_car::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"deltaTime\" :  \"" << deltaTime.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"torque\" :  \"" << torque.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"steeringAngle\" :  \"" << steeringAngle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pos_x\" :  \"" << pos_x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pos_x_ap_vld\" :  \"" << pos_x_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pos_y\" :  \"" << pos_y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pos_y_ap_vld\" :  \"" << pos_y_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vel_x\" :  \"" << vel_x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vel_x_ap_vld\" :  \"" << vel_x_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vel_y\" :  \"" << vel_y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vel_y_ap_vld\" :  \"" << vel_y_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"orientation\" :  \"" << orientation.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"orientation_ap_vld\" :  \"" << orientation_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

