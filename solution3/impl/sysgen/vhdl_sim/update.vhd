-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Wheel_angularVelocity_read : IN STD_LOGIC_VECTOR (31 downto 0);
    deltaTime : IN STD_LOGIC_VECTOR (31 downto 0);
    torque : IN STD_LOGIC_VECTOR (31 downto 0);
    velocity_x : IN STD_LOGIC_VECTOR (31 downto 0);
    velocity_z : IN STD_LOGIC_VECTOR (31 downto 0);
    load : IN STD_LOGIC_VECTOR (31 downto 0);
    steeringAngle : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of update is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (132 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (132 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (132 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (132 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (132 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (132 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (132 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (132 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (132 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (132 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_3E99999A : STD_LOGIC_VECTOR (31 downto 0) := "00111110100110011001100110011010";
    constant ap_const_lv32_41200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001001000000000000000000000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_40A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000101000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv64_3F1A36E2EB1C432D : STD_LOGIC_VECTOR (63 downto 0) := "0011111100011010001101101110001011101011000111000100001100101101";
    constant ap_const_lv64_404CA5DC1A63CBB0 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001001100101001011101110000011010011000111100101110110000";
    constant ap_const_lv64_3FE6D916872B020C : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100110110110010001011010000111001010110000001000001100";
    constant ap_const_lv64_3FFE666666666666 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111110011001100110011001100110011001100110011001100110";
    constant ap_const_lv64_400599999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000101100110011001100110011001100110011001100110011010";
    constant ap_const_lv64_3FF3333333333333 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110011001100110011001100110011001100110011001100110011";
    constant ap_const_lv64_3FEF0A3D70A3D70A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111101111000010100011110101110000101000111101011100001010";
    constant ap_const_lv64_3FF6666666666666 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110110011001100110011001100110011001100110011001100110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv64_BFC999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "1011111111001001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_C2B40000 : STD_LOGIC_VECTOR (31 downto 0) := "11000010101101000000000000000000";
    constant ap_const_lv32_42B40000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010101101000000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_423 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_sin_fu_208_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_433 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_279_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_279_ap_done : STD_LOGIC;
    signal grp_sin_fu_208_ap_ready : STD_LOGIC;
    signal grp_sin_fu_208_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal grp_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_484 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_atan_fu_250_ap_ready : STD_LOGIC;
    signal grp_atan_fu_250_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal grp_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal grp_atan_fu_250_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_507 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal reg_513 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal reg_519 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal reg_532 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_538 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_279_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal cos_steer_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_steer_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_548_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_942 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_558_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_948 : STD_LOGIC_VECTOR (22 downto 0);
    signal and_ln34_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal abs_fu_756_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_10_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln45_fu_788_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_988 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_reg_993 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_418_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_998 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_reg_1020 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_reg_1025 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal bitcast_ln58_1_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal latForce_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln61_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_reg_1040 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln70_fu_855_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln70_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal bitcast_ln70_1_fu_861_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Wheel_force_z_write_s_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_fu_208_ap_start : STD_LOGIC;
    signal grp_sin_fu_208_ap_idle : STD_LOGIC;
    signal grp_sin_fu_208_x : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_atan_fu_250_ap_start : STD_LOGIC;
    signal grp_atan_fu_250_ap_idle : STD_LOGIC;
    signal grp_atan_fu_250_x : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_279_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_279_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_279_do_cos : STD_LOGIC;
    signal ap_phi_mux_Wheel_slipAngle_writ_phi_fu_167_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal Wheel_slipAngle_writ_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_phi_mux_Wheel_slipRatio_0_phi_fu_177_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal Wheel_slipRatio_0_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal Wheel_fx_write_assig_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal Wheel_fz_write_assig_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_fu_208_ap_start_reg : STD_LOGIC := '0';
    signal grp_atan_fu_250_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_279_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_298_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal grp_fu_302_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_310_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal grp_fu_315_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_353_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_fu_357_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal p_Val2_s_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_1_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln41_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_598_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_fu_608_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln41_1_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mantissa_V_fu_630_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln339_fu_643_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_646_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_660_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_652_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_665_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_669_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_681_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_639_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_685_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_689_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_701_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_695_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_713_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_723_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_737_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln45_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_1_fu_774_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln58_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln58_fu_800_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln61_fu_811_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_814_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_fu_824_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln61_1_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln61_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln70_fu_852_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal grp_fu_298_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_341_ce : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal grp_fu_353_ce : STD_LOGIC;
    signal grp_fu_357_ce : STD_LOGIC;
    signal grp_fu_377_ce : STD_LOGIC;
    signal grp_fu_377_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_392_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_392_ce : STD_LOGIC;
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grp_fu_396_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (132 downto 0);

    component sin IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component atan IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level_car_fadpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_fadqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_fmurcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_fdisc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_sittde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_fptudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_fpevdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level_car_fcmwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component top_level_car_fsqxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_dadyd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level_car_dmuzec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level_car_ddincg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sin_fu_208 : component sin
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_fu_208_ap_start,
        ap_done => grp_sin_fu_208_ap_done,
        ap_idle => grp_sin_fu_208_ap_idle,
        ap_ready => grp_sin_fu_208_ap_ready,
        x => grp_sin_fu_208_x,
        ap_return => grp_sin_fu_208_ap_return);

    grp_atan_fu_250 : component atan
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_atan_fu_250_ap_start,
        ap_done => grp_atan_fu_250_ap_done,
        ap_idle => grp_atan_fu_250_ap_idle,
        ap_ready => grp_atan_fu_250_ap_ready,
        x => grp_atan_fu_250_x,
        ap_return => grp_atan_fu_250_ap_return);

    grp_sin_or_cos_double_s_fu_279 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_279_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_279_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_279_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_279_ap_ready,
        t_in => reg_423,
        do_cos => grp_sin_or_cos_double_s_fu_279_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_279_ap_return);

    top_level_car_fadpcA_U32 : component top_level_car_fadpcA
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_298_p0,
        din1 => grp_fu_298_p1,
        opcode => grp_fu_298_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_298_p2);

    top_level_car_fadqcK_U33 : component top_level_car_fadqcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_302_p0,
        din1 => grp_fu_302_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_302_p2);

    top_level_car_fadqcK_U34 : component top_level_car_fadqcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_462,
        din1 => tmp_63_reg_1059,
        ce => ap_const_logic_1,
        dout => grp_fu_306_p2);

    top_level_car_fmurcU_U35 : component top_level_car_fmurcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_310_p0,
        din1 => grp_fu_310_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_310_p2);

    top_level_car_fmurcU_U36 : component top_level_car_fmurcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_315_p0,
        din1 => grp_fu_315_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);

    top_level_car_fmurcU_U37 : component top_level_car_fmurcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sin_steer_reg_907,
        din1 => grp_fu_320_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_320_p2);

    top_level_car_fmurcU_U38 : component top_level_car_fmurcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_325_p2);

    top_level_car_fmurcU_U39 : component top_level_car_fmurcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cos_steer_reg_899,
        din1 => Wheel_fz_write_assig_reg_196,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    top_level_car_fdisc4_U40 : component top_level_car_fdisc4
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_341_p0,
        din1 => grp_fu_341_p1,
        ce => grp_fu_341_ce,
        dout => grp_fu_341_p2);

    top_level_car_fdisc4_U41 : component top_level_car_fdisc4
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_reg_1003,
        din1 => s_reg_1010,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p2);

    top_level_car_sittde_U42 : component top_level_car_sittde
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => abs_reg_968,
        ce => ap_const_logic_1,
        dout => grp_fu_350_p1);

    top_level_car_fptudo_U43 : component top_level_car_fptudo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_353_p0,
        ce => grp_fu_353_ce,
        dout => grp_fu_353_p1);

    top_level_car_fptudo_U44 : component top_level_car_fptudo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_357_p0,
        ce => grp_fu_357_ce,
        dout => grp_fu_357_p1);

    top_level_car_fpevdy_U45 : component top_level_car_fpevdy
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_363_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_363_p1);

    top_level_car_fpevdy_U46 : component top_level_car_fpevdy
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_Wheel_slipAngle_writ_phi_fu_167_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_372_p1);

    top_level_car_fcmwdI_U47 : component top_level_car_fcmwdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_377_p0,
        din1 => ap_const_lv32_0,
        ce => grp_fu_377_ce,
        opcode => grp_fu_377_opcode,
        dout => grp_fu_377_p2);

    top_level_car_fcmwdI_U48 : component top_level_car_fcmwdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_477,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_382_p2);

    top_level_car_fsqxdS_U49 : component top_level_car_fsqxdS
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => reg_468,
        ce => ap_const_logic_1,
        dout => grp_fu_387_p2);

    top_level_car_dadyd2_U50 : component top_level_car_dadyd2
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_392_p0,
        din1 => grp_fu_392_p1,
        opcode => grp_fu_392_opcode,
        ce => grp_fu_392_ce,
        dout => grp_fu_392_p2);

    top_level_car_dmuzec_U51 : component top_level_car_dmuzec
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_396_p0,
        din1 => grp_fu_396_p1,
        ce => grp_fu_396_ce,
        dout => grp_fu_396_p2);

    top_level_car_dmuzec_U52 : component top_level_car_dmuzec
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_532,
        din1 => ap_const_lv64_BFC999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);

    top_level_car_ddincg_U53 : component top_level_car_ddincg
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_423,
        din1 => ap_const_lv64_3FFE666666666666,
        ce => ap_const_logic_1,
        dout => grp_fu_413_p2);

    top_level_car_ddincg_U54 : component top_level_car_ddincg
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_22_reg_988,
        din1 => ap_const_lv64_400599999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_418_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
                    ap_return_0_preg <= reg_477;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
                    ap_return_1_preg <= Wheel_force_z_write_s_reg_1064;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
                    ap_return_2_preg <= grp_fu_298_p2;
                end if; 
            end if;
        end if;
    end process;


    grp_atan_fu_250_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_atan_fu_250_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92)))) then 
                    grp_atan_fu_250_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_atan_fu_250_ap_ready = ap_const_logic_1)) then 
                    grp_atan_fu_250_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_fu_208_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_fu_208_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((grp_sin_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99)))) then 
                    grp_sin_fu_208_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_fu_208_ap_ready = ap_const_logic_1)) then 
                    grp_sin_fu_208_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_279_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_279_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_sin_or_cos_double_s_fu_279_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_279_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_279_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    Wheel_fx_write_assig_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln61_fu_846_p2) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
                Wheel_fx_write_assig_reg_184 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_0 = and_ln61_reg_1040) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
                Wheel_fx_write_assig_reg_184 <= reg_439;
            end if; 
        end if;
    end process;

    Wheel_fz_write_assig_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln61_fu_846_p2) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
                Wheel_fz_write_assig_reg_196 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_0 = and_ln61_reg_1040) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
                Wheel_fz_write_assig_reg_196 <= reg_448;
            end if; 
        end if;
    end process;

    Wheel_slipAngle_writ_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                Wheel_slipAngle_writ_reg_164 <= select_ln45_fu_788_p3;
            elsif (((ap_const_lv1_0 = and_ln34_reg_953) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                Wheel_slipAngle_writ_reg_164 <= grp_fu_353_p1;
            end if; 
        end if;
    end process;

    Wheel_slipRatio_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                Wheel_slipRatio_0_reg_174 <= reg_492;
            elsif (((ap_const_lv1_0 = and_ln34_reg_953) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                Wheel_slipRatio_0_reg_174 <= reg_500;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state119)) then
                Wheel_force_z_write_s_reg_1064 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                a_reg_1003 <= grp_fu_357_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                abs_reg_968 <= abs_fu_756_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                and_ln34_reg_953 <= and_ln34_fu_580_p2;
                tmp_V_1_reg_948 <= tmp_V_1_fu_558_p1;
                tmp_V_reg_942 <= p_Val2_s_fu_544_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                and_ln61_reg_1040 <= and_ln61_fu_846_p2;
                latForce_reg_1035 <= grp_fu_357_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cos_steer_reg_899 <= grp_fu_353_p1;
                sin_steer_reg_907 <= grp_fu_357_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln34_fu_580_p2) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                or_ln41_reg_962 <= or_ln41_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln34_fu_580_p2) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                p_Result_s_reg_957 <= p_Val2_s_fu_544_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_423 <= grp_fu_363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_sin_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100)) or ((grp_sin_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_433 <= grp_sin_fu_208_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_439 <= grp_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_448 <= grp_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_456 <= grp_fu_320_p2;
                reg_462 <= grp_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_468 <= grp_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_477 <= grp_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then
                reg_484 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_492 <= grp_fu_353_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_500 <= grp_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92)) or ((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then
                reg_507 <= grp_atan_fu_250_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state67))) then
                reg_513 <= grp_fu_363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state72))) then
                reg_519 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state74))) then
                reg_526 <= grp_fu_353_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93)) or ((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80)))) then
                reg_532 <= grp_atan_fu_250_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state81))) then
                reg_538 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                s_reg_1010 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_10_reg_973 <= grp_fu_298_p2;
                tmp_11_reg_978 <= grp_fu_350_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                tmp_21_reg_993 <= grp_fu_413_p2;
                tmp_23_reg_998 <= grp_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_22_reg_988 <= grp_fu_372_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                tmp_37_reg_1025 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                tmp_44_reg_1020 <= grp_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then
                tmp_53_reg_1044 <= grp_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then
                tmp_63_reg_1059 <= grp_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then
                xor_ln70_reg_1049 <= xor_ln70_fu_855_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_sin_fu_208_ap_done, ap_block_state3_on_subcall_done, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state76, grp_atan_fu_250_ap_done, ap_CS_fsm_state12, ap_CS_fsm_state22, ap_CS_fsm_state92, ap_CS_fsm_state101, ap_CS_fsm_state80, ap_CS_fsm_state93, and_ln34_fu_580_p2, and_ln61_fu_846_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_lv1_1 = and_ln34_fu_580_p2) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                if (((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                if (((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                if (((grp_sin_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                if (((grp_sin_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state101 => 
                if (((ap_const_lv1_1 = and_ln61_fu_846_p2) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    abs_fu_756_p3 <= 
        p_Val2_6_fu_737_p3 when (abscond_fu_750_p2(0) = '1') else 
        neg_fu_744_p2;
    abscond_fu_750_p2 <= "1" when (signed(p_Val2_6_fu_737_p3) > signed(ap_const_lv32_0)) else "0";
    add_ln339_fu_646_p2 <= std_logic_vector(unsigned(zext_ln339_fu_643_p1) + unsigned(ap_const_lv9_181));
    and_ln34_fu_580_p2 <= (or_ln34_fu_574_p2 and grp_fu_377_p2);
    and_ln41_fu_764_p2 <= (or_ln41_reg_962 and grp_fu_377_p2);
    and_ln45_fu_769_p2 <= (or_ln41_reg_962 and grp_fu_382_p2);
    and_ln61_fu_846_p2 <= (or_ln61_fu_840_p2 and grp_fu_377_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_block_state3_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_279_ap_done, grp_sin_fu_208_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_sin_fu_208_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_279_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state133)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state133) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_Wheel_slipAngle_writ_phi_fu_167_p4_assign_proc : process(grp_fu_353_p1, and_ln34_reg_953, Wheel_slipAngle_writ_reg_164, ap_CS_fsm_state29)
    begin
        if (((ap_const_lv1_0 = and_ln34_reg_953) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_phi_mux_Wheel_slipAngle_writ_phi_fu_167_p4 <= grp_fu_353_p1;
        else 
            ap_phi_mux_Wheel_slipAngle_writ_phi_fu_167_p4 <= Wheel_slipAngle_writ_reg_164;
        end if; 
    end process;


    ap_phi_mux_Wheel_slipRatio_0_phi_fu_177_p4_assign_proc : process(reg_500, and_ln34_reg_953, ap_CS_fsm_state29, Wheel_slipRatio_0_reg_174)
    begin
        if (((ap_const_lv1_0 = and_ln34_reg_953) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_phi_mux_Wheel_slipRatio_0_phi_fu_177_p4 <= reg_500;
        else 
            ap_phi_mux_Wheel_slipRatio_0_phi_fu_177_p4 <= Wheel_slipRatio_0_reg_174;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state133)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(reg_477, ap_CS_fsm_state133, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
            ap_return_0 <= reg_477;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(Wheel_force_z_write_s_reg_1064, ap_CS_fsm_state133, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
            ap_return_1 <= Wheel_force_z_write_s_reg_1064;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(grp_fu_298_p2, ap_CS_fsm_state133, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
            ap_return_2 <= grp_fu_298_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;

    bitcast_ln41_fu_594_p1 <= reg_477;
    bitcast_ln58_1_fu_806_p1 <= xor_ln58_fu_800_p2;
    bitcast_ln58_fu_796_p1 <= reg_433;
    bitcast_ln61_fu_811_p1 <= s_reg_1010;
    bitcast_ln70_1_fu_861_p1 <= xor_ln70_reg_1049;
    bitcast_ln70_fu_852_p1 <= sin_steer_reg_907;
    grp_atan_fu_250_ap_start <= grp_atan_fu_250_ap_start_reg;

    grp_atan_fu_250_x_assign_proc : process(reg_423, ap_CS_fsm_state76, ap_CS_fsm_state22, ap_CS_fsm_state92, reg_513, ap_CS_fsm_state80, ap_CS_fsm_state93, reg_538, tmp_37_reg_1025)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_atan_fu_250_x <= tmp_37_reg_1025;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_atan_fu_250_x <= reg_538;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_atan_fu_250_x <= reg_513;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            grp_atan_fu_250_x <= reg_423;
        else 
            grp_atan_fu_250_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_298_opcode_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state7, ap_CS_fsm_state53, ap_CS_fsm_state116, ap_CS_fsm_state130)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_298_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_fu_298_opcode <= ap_const_lv2_0;
        else 
            grp_fu_298_opcode <= "XX";
        end if; 
    end process;


    grp_fu_298_p0_assign_proc : process(torque, reg_439, ap_CS_fsm_state14, ap_CS_fsm_state7, ap_CS_fsm_state53, ap_CS_fsm_state116, ap_CS_fsm_state130)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            grp_fu_298_p0 <= torque;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_298_p0 <= reg_439;
        else 
            grp_fu_298_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_298_p1_assign_proc : process(Wheel_angularVelocity_read, reg_439, reg_448, reg_468, ap_CS_fsm_state14, ap_CS_fsm_state7, ap_CS_fsm_state53, ap_CS_fsm_state116, ap_CS_fsm_state130)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            grp_fu_298_p1 <= Wheel_angularVelocity_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            grp_fu_298_p1 <= reg_439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_298_p1 <= reg_468;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_298_p1 <= reg_448;
        else 
            grp_fu_298_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_302_p0_assign_proc : process(reg_448, reg_456, ap_CS_fsm_state7, ap_CS_fsm_state116)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            grp_fu_302_p0 <= reg_448;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_302_p0 <= reg_456;
        else 
            grp_fu_302_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_302_p1_assign_proc : process(reg_456, reg_462, ap_CS_fsm_state7, ap_CS_fsm_state116)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            grp_fu_302_p1 <= reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_302_p1 <= reg_462;
        else 
            grp_fu_302_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_310_p0_assign_proc : process(Wheel_angularVelocity_read, ap_CS_fsm_state5, reg_439, reg_492, ap_CS_fsm_state12, reg_500, cos_steer_reg_899, s_reg_1010, ap_CS_fsm_state114, Wheel_fx_write_assig_reg_184, ap_CS_fsm_state51, ap_CS_fsm_state64, ap_CS_fsm_state109, ap_CS_fsm_state111, ap_CS_fsm_state128)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            grp_fu_310_p0 <= Wheel_fx_write_assig_reg_184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_310_p0 <= reg_439;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            grp_fu_310_p0 <= reg_500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_310_p0 <= s_reg_1010;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_310_p0 <= reg_492;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_310_p0 <= Wheel_angularVelocity_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_310_p0 <= cos_steer_reg_899;
        else 
            grp_fu_310_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_310_p1_assign_proc : process(deltaTime, velocity_x, load, ap_CS_fsm_state5, reg_492, ap_CS_fsm_state12, reg_526, ap_CS_fsm_state114, ap_CS_fsm_state51, ap_CS_fsm_state64, ap_CS_fsm_state109, ap_CS_fsm_state111, ap_CS_fsm_state128)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            grp_fu_310_p1 <= deltaTime;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_310_p1 <= reg_526;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            grp_fu_310_p1 <= load;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_310_p1 <= ap_const_lv32_41200000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_310_p1 <= reg_492;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_310_p1 <= ap_const_lv32_3E99999A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_310_p1 <= velocity_x;
        else 
            grp_fu_310_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_315_p0_assign_proc : process(ap_CS_fsm_state5, reg_448, cos_steer_reg_899, sin_steer_reg_907, a_reg_1003, tmp_53_reg_1044, ap_CS_fsm_state114, ap_CS_fsm_state51, ap_CS_fsm_state109, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            grp_fu_315_p0 <= cos_steer_reg_899;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_315_p0 <= reg_448;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            grp_fu_315_p0 <= tmp_53_reg_1044;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_315_p0 <= a_reg_1003;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_315_p0 <= sin_steer_reg_907;
        else 
            grp_fu_315_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_315_p1_assign_proc : process(velocity_z, load, ap_CS_fsm_state5, a_reg_1003, latForce_reg_1035, ap_CS_fsm_state114, Wheel_fx_write_assig_reg_184, ap_CS_fsm_state51, ap_CS_fsm_state109, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            grp_fu_315_p1 <= Wheel_fx_write_assig_reg_184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_315_p1 <= latForce_reg_1035;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            grp_fu_315_p1 <= load;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_315_p1 <= a_reg_1003;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_315_p1 <= velocity_z;
        else 
            grp_fu_315_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_320_p1_assign_proc : process(velocity_x, ap_CS_fsm_state5, ap_CS_fsm_state114, Wheel_fz_write_assig_reg_196)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            grp_fu_320_p1 <= Wheel_fz_write_assig_reg_196;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_320_p1 <= velocity_x;
        else 
            grp_fu_320_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_325_p0_assign_proc : process(ap_CS_fsm_state5, cos_steer_reg_899, ap_CS_fsm_state114, Wheel_fx_write_assig_reg_184)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            grp_fu_325_p0 <= Wheel_fx_write_assig_reg_184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_325_p0 <= cos_steer_reg_899;
        else 
            grp_fu_325_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_325_p1_assign_proc : process(velocity_z, ap_CS_fsm_state5, bitcast_ln70_1_fu_861_p1, ap_CS_fsm_state114)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            grp_fu_325_p1 <= bitcast_ln70_1_fu_861_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_325_p1 <= velocity_z;
        else 
            grp_fu_325_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_341_ce_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state13, grp_atan_fu_250_ap_done, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state108, ap_CS_fsm_state127, ap_CS_fsm_state22, ap_CS_fsm_state101, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state120, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state16, ap_CS_fsm_state24, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            grp_fu_341_ce <= ap_const_logic_1;
        else 
            grp_fu_341_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_341_p0_assign_proc : process(reg_468, reg_477, reg_492, ap_CS_fsm_state12, ap_CS_fsm_state101, tmp_10_reg_973, ap_CS_fsm_state18, ap_CS_fsm_state120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            grp_fu_341_p0 <= reg_468;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_fu_341_p0 <= reg_492;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_341_p0 <= tmp_10_reg_973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_341_p0 <= reg_477;
        else 
            grp_fu_341_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_341_p1_assign_proc : process(reg_468, ap_CS_fsm_state12, ap_CS_fsm_state101, tmp_11_reg_978, s_reg_1010, ap_CS_fsm_state18, ap_CS_fsm_state120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            grp_fu_341_p1 <= ap_const_lv32_40A00000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_fu_341_p1 <= s_reg_1010;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_341_p1 <= tmp_11_reg_978;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_341_p1 <= reg_468;
        else 
            grp_fu_341_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_353_ce_assign_proc : process(ap_CS_fsm_state3, grp_sin_fu_208_ap_done, ap_block_state3_on_subcall_done, ap_CS_fsm_state100, ap_CS_fsm_state12, ap_CS_fsm_state50, ap_CS_fsm_state74, ap_CS_fsm_state78, ap_CS_fsm_state101, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state11, ap_CS_fsm_state28, ap_CS_fsm_state49, ap_CS_fsm_state73, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((grp_sin_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100)) or ((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_fu_353_ce <= ap_const_logic_1;
        else 
            grp_fu_353_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_353_p0_assign_proc : process(grp_sin_fu_208_ap_return, ap_CS_fsm_state3, ap_CS_fsm_state100, reg_484, reg_519, grp_sin_or_cos_double_s_fu_279_ap_return, tmp_21_reg_993, ap_CS_fsm_state11, ap_CS_fsm_state28, ap_CS_fsm_state49, ap_CS_fsm_state73, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_fu_353_p0 <= grp_sin_fu_208_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_353_p0 <= reg_519;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_353_p0 <= tmp_21_reg_993;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_353_p0 <= reg_484;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_353_p0 <= grp_sin_or_cos_double_s_fu_279_ap_return;
        else 
            grp_fu_353_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_357_ce_assign_proc : process(ap_CS_fsm_state3, grp_sin_fu_208_ap_done, ap_block_state3_on_subcall_done, ap_CS_fsm_state100, ap_CS_fsm_state50, ap_CS_fsm_state101, ap_CS_fsm_state4, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state50) or ((grp_sin_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100)) or ((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_fu_357_ce <= ap_const_logic_1;
        else 
            grp_fu_357_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_357_p0_assign_proc : process(grp_sin_fu_208_ap_return, ap_CS_fsm_state3, ap_CS_fsm_state100, tmp_23_reg_998, bitcast_ln58_1_fu_806_p1, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_fu_357_p0 <= bitcast_ln58_1_fu_806_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_357_p0 <= tmp_23_reg_998;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_357_p0 <= grp_sin_fu_208_ap_return;
        else 
            grp_fu_357_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_363_p0_assign_proc : process(ap_CS_fsm_state1, Wheel_angularVelocity_read, steeringAngle, ap_CS_fsm_state66, reg_439, ap_CS_fsm_state65, grp_fu_353_p1, reg_500, ap_CS_fsm_state74, ap_CS_fsm_state78, ap_CS_fsm_state4, s_reg_1010, ap_CS_fsm_state29, ap_phi_mux_Wheel_slipRatio_0_phi_fu_177_p4, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            grp_fu_363_p0 <= grp_fu_353_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_363_p0 <= reg_439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_363_p0 <= s_reg_1010;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_363_p0 <= ap_phi_mux_Wheel_slipRatio_0_phi_fu_177_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_363_p0 <= reg_500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_363_p0 <= Wheel_angularVelocity_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_363_p0 <= steeringAngle;
        else 
            grp_fu_363_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_ce_assign_proc : process(grp_sin_fu_208_ap_done, ap_CS_fsm_state100, ap_CS_fsm_state12, ap_CS_fsm_state101, ap_CS_fsm_state30, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((grp_sin_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100)))) then 
            grp_fu_377_ce <= ap_const_logic_1;
        else 
            grp_fu_377_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_377_opcode_assign_proc : process(ap_CS_fsm_state100, ap_CS_fsm_state12, and_ln34_fu_580_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = and_ln34_fu_580_p2) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_377_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100))) then 
            grp_fu_377_opcode <= ap_const_lv5_1;
        else 
            grp_fu_377_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_377_p0_assign_proc : process(ap_CS_fsm_state100, reg_468, reg_477, ap_CS_fsm_state12, s_reg_1010, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_fu_377_p0 <= s_reg_1010;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_377_p0 <= reg_477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_377_p0 <= reg_468;
        else 
            grp_fu_377_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_ce_assign_proc : process(grp_atan_fu_250_ap_done, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state77, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80)))) then 
            grp_fu_392_ce <= ap_const_logic_1;
        else 
            grp_fu_392_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_392_opcode_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state77, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            grp_fu_392_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_fu_392_opcode <= ap_const_lv2_0;
        else 
            grp_fu_392_opcode <= "XX";
        end if; 
    end process;


    grp_fu_392_p0_assign_proc : process(reg_423, reg_484, ap_CS_fsm_state86, ap_CS_fsm_state77, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_fu_392_p0 <= reg_484;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            grp_fu_392_p0 <= reg_423;
        else 
            grp_fu_392_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p1_assign_proc : process(reg_507, reg_519, ap_CS_fsm_state86, tmp_44_reg_1020, ap_CS_fsm_state77, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_392_p1 <= reg_519;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_fu_392_p1 <= tmp_44_reg_1020;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_392_p1 <= reg_507;
        else 
            grp_fu_392_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_ce_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state71, ap_CS_fsm_state76, grp_atan_fu_250_ap_done, ap_CS_fsm_state85, ap_CS_fsm_state97, ap_CS_fsm_state25, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state86, ap_CS_fsm_state98, ap_CS_fsm_state74, ap_CS_fsm_state93, ap_CS_fsm_state81, ap_CS_fsm_state7, ap_CS_fsm_state73, ap_CS_fsm_state23, ap_CS_fsm_state68, ap_CS_fsm_state82, ap_CS_fsm_state94, ap_CS_fsm_state24, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state95, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93)) or ((grp_atan_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            grp_fu_396_ce <= ap_const_logic_1;
        else 
            grp_fu_396_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_396_p0_assign_proc : process(reg_423, ap_CS_fsm_state6, reg_484, reg_507, reg_513, ap_CS_fsm_state67, ap_CS_fsm_state72, reg_532, ap_CS_fsm_state93, reg_538, ap_CS_fsm_state81, ap_CS_fsm_state23, ap_CS_fsm_state68, ap_CS_fsm_state82, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_396_p0 <= reg_532;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_396_p0 <= reg_538;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_396_p0 <= reg_484;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            grp_fu_396_p0 <= reg_513;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            grp_fu_396_p0 <= reg_507;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_396_p0 <= reg_423;
        else 
            grp_fu_396_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state93, ap_CS_fsm_state81, ap_CS_fsm_state23, ap_CS_fsm_state68, ap_CS_fsm_state82, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_fu_396_p1 <= ap_const_lv64_3FF6666666666666;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_396_p1 <= ap_const_lv64_3FEF0A3D70A3D70A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_fu_396_p1 <= ap_const_lv64_3FF3333333333333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_396_p1 <= ap_const_lv64_400599999999999A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            grp_fu_396_p1 <= ap_const_lv64_3FFE666666666666;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_396_p1 <= ap_const_lv64_3FE6D916872B020C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_396_p1 <= ap_const_lv64_404CA5DC1A63CBB0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_396_p1 <= ap_const_lv64_3F1A36E2EB1C432D;
        else 
            grp_fu_396_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sin_fu_208_ap_start <= grp_sin_fu_208_ap_start_reg;

    grp_sin_fu_208_x_assign_proc : process(reg_423, ap_CS_fsm_state3, ap_CS_fsm_state99, ap_CS_fsm_state100, reg_484, reg_519)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_sin_fu_208_x <= reg_519;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_sin_fu_208_x <= reg_484;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sin_fu_208_x <= reg_423;
        else 
            grp_sin_fu_208_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sin_or_cos_double_s_fu_279_ap_start <= grp_sin_or_cos_double_s_fu_279_ap_start_reg;
    grp_sin_or_cos_double_s_fu_279_do_cos <= ap_const_logic_1;
    icmp_ln34_1_fu_568_p2 <= "1" when (tmp_V_1_fu_558_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_562_p2 <= "0" when (tmp_V_fu_548_p4 = ap_const_lv8_FF) else "1";
    icmp_ln41_1_fu_618_p2 <= "1" when (trunc_ln41_fu_608_p1 = ap_const_lv23_0) else "0";
    icmp_ln41_fu_612_p2 <= "0" when (tmp_18_fu_598_p4 = ap_const_lv8_FF) else "1";
    icmp_ln61_1_fu_834_p2 <= "1" when (trunc_ln61_fu_824_p1 = ap_const_lv23_0) else "0";
    icmp_ln61_fu_828_p2 <= "0" when (tmp_65_fu_814_p4 = ap_const_lv8_FF) else "1";
    isNeg_fu_652_p3 <= add_ln339_fu_646_p2(8 downto 8);
    mantissa_V_fu_630_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_948) & ap_const_lv1_0);
    neg_fu_744_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_6_fu_737_p3));
    or_ln34_fu_574_p2 <= (icmp_ln34_fu_562_p2 or icmp_ln34_1_fu_568_p2);
    or_ln41_fu_624_p2 <= (icmp_ln41_fu_612_p2 or icmp_ln41_1_fu_618_p2);
    or_ln45_fu_782_p2 <= (and_ln45_fu_769_p2 or and_ln41_fu_764_p2);
    or_ln61_fu_840_p2 <= (icmp_ln61_fu_828_p2 or icmp_ln61_1_fu_834_p2);
    p_Val2_5_fu_723_p3 <= 
        zext_ln662_fu_709_p1 when (isNeg_fu_652_p3(0) = '1') else 
        tmp_64_fu_713_p4;
    p_Val2_6_fu_737_p3 <= 
        result_V_1_fu_731_p2 when (p_Result_s_reg_957(0) = '1') else 
        p_Val2_5_fu_723_p3;
    p_Val2_s_fu_544_p1 <= reg_468;
    r_V_1_fu_695_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_639_p1),to_integer(unsigned('0' & zext_ln1287_fu_685_p1(31-1 downto 0)))));
    r_V_fu_689_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_630_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_681_p1(25-1 downto 0)))));
    result_V_1_fu_731_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_fu_723_p3));
    select_ln45_1_fu_774_p3 <= 
        ap_const_lv32_C2B40000 when (and_ln45_fu_769_p2(0) = '1') else 
        ap_const_lv32_42B40000;
    select_ln45_fu_788_p3 <= 
        select_ln45_1_fu_774_p3 when (or_ln45_fu_782_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln1311_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_669_p3),32));

        sext_ln1311_2_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_669_p3),25));

        sext_ln1311_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_660_p2),9));

    sub_ln1311_fu_660_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_reg_942));
    tmp_18_fu_598_p4 <= bitcast_ln41_fu_594_p1(30 downto 23);
    tmp_64_fu_713_p4 <= r_V_1_fu_695_p2(55 downto 24);
    tmp_65_fu_814_p4 <= bitcast_ln61_fu_811_p1(30 downto 23);
    tmp_V_1_fu_558_p1 <= p_Val2_s_fu_544_p1(23 - 1 downto 0);
    tmp_V_fu_548_p4 <= p_Val2_s_fu_544_p1(30 downto 23);
    tmp_fu_701_p3 <= r_V_fu_689_p2(24 downto 24);
    trunc_ln41_fu_608_p1 <= bitcast_ln41_fu_594_p1(23 - 1 downto 0);
    trunc_ln61_fu_824_p1 <= bitcast_ln61_fu_811_p1(23 - 1 downto 0);
    ush_fu_669_p3 <= 
        sext_ln1311_fu_665_p1 when (isNeg_fu_652_p3(0) = '1') else 
        add_ln339_fu_646_p2;
    xor_ln58_fu_800_p2 <= (bitcast_ln58_fu_796_p1 xor ap_const_lv64_8000000000000000);
    xor_ln70_fu_855_p2 <= (bitcast_ln70_fu_852_p1 xor ap_const_lv32_80000000);
    zext_ln1287_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_677_p1),79));
    zext_ln339_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_942),9));
    zext_ln662_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_701_p3),32));
    zext_ln682_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_630_p4),79));
end behav;
