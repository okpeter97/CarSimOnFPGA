-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    deltaTime : IN STD_LOGIC_VECTOR (31 downto 0);
    engine_torque : IN STD_LOGIC_VECTOR (31 downto 0);
    steeringAngle : IN STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_vel_z_i : IN STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_vel_z_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_vel_z_o_ap_vld : OUT STD_LOGIC;
    car_chassis_vel_x_i : IN STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_vel_x_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_vel_x_o_ap_vld : OUT STD_LOGIC;
    car_chassis_orientat_i : IN STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_orientat_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_orientat_o_ap_vld : OUT STD_LOGIC;
    car_chassis_pos_x_i : IN STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_pos_x_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_pos_x_o_ap_vld : OUT STD_LOGIC;
    car_chassis_pos_z_i : IN STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_pos_z_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    car_chassis_pos_z_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of update_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (53 downto 0) := "000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (53 downto 0) := "000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (53 downto 0) := "000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (53 downto 0) := "000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (53 downto 0) := "000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (53 downto 0) := "000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (53 downto 0) := "000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (53 downto 0) := "000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (53 downto 0) := "000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (53 downto 0) := "001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (53 downto 0) := "010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (53 downto 0) := "100000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_460144F8 : STD_LOGIC_VECTOR (31 downto 0) := "01000110000000010100010011111000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_45BFD60F : STD_LOGIC_VECTOR (31 downto 0) := "01000101101111111101011000001111";
    constant ap_const_lv32_3FBBC6A8 : STD_LOGIC_VECTOR (31 downto 0) := "00111111101110111100011010101000";
    constant ap_const_lv32_3F8B851F : STD_LOGIC_VECTOR (31 downto 0) := "00111111100010111000010100011111";
    constant ap_const_lv32_3FBB020C : STD_LOGIC_VECTOR (31 downto 0) := "00111111101110110000001000001100";
    constant ap_const_lv32_3FBC0831 : STD_LOGIC_VECTOR (31 downto 0) := "00111111101111000000100000110001";
    constant ap_const_lv32_BFBBC6A8 : STD_LOGIC_VECTOR (31 downto 0) := "10111111101110111100011010101000";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_BFBC0831 : STD_LOGIC_VECTOR (31 downto 0) := "10111111101111000000100000110001";
    constant ap_const_lv32_4395CEE7 : STD_LOGIC_VECTOR (31 downto 0) := "01000011100101011100111011100111";
    constant ap_const_lv32_BFBB020C : STD_LOGIC_VECTOR (31 downto 0) := "10111111101110110000001000001100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_44B42666 : STD_LOGIC_VECTOR (31 downto 0) := "01000100101101000010011001100110";
    constant ap_const_lv32_3F083127 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000010000011000100100111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal car_chassis_angularV : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal car_chassis_wFL : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal car_frontLeft_angula : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal car_chassis_wFR : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal car_frontRight_angul : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal car_chassis_wRL : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal car_rearLeft_angular : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal car_chassis_wRR : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal car_rearRight_angula : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal car_chassis_accel_x : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal car_chassis_accel_z : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_update_fu_108_ap_ready : STD_LOGIC;
    signal grp_update_fu_108_ap_done : STD_LOGIC;
    signal grp_update_fu_136_ap_ready : STD_LOGIC;
    signal grp_update_fu_136_ap_done : STD_LOGIC;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_166_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_166_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_185_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_185_ap_done : STD_LOGIC;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal newret3_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal newret4_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_166_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_i_reg_667 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_185_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i1_i_reg_673 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal newret9_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal newret10_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_i_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_i_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_i_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_i_reg_743 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_i_reg_749 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_i_reg_754 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_i_reg_759 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_i_reg_764 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vel_x_temp_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vel_z_temp_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_update_fu_108_ap_start : STD_LOGIC;
    signal grp_update_fu_108_ap_idle : STD_LOGIC;
    signal grp_update_fu_108_Wheel_angularVelocity_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_108_load : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_108_steeringAngle : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_108_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_108_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_108_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_136_ap_start : STD_LOGIC;
    signal grp_update_fu_136_ap_idle : STD_LOGIC;
    signal grp_update_fu_136_Wheel_angularVelocity_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_136_load : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_136_steeringAngle : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_136_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_136_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_136_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_166_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_166_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_166_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_185_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_185_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_185_do_cos : STD_LOGIC;
    signal grp_update_fu_108_ap_start_reg : STD_LOGIC := '0';
    signal grp_update_fu_136_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_166_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_185_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_212_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_228_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_204_ce : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_208_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_208_ce : STD_LOGIC;
    signal grp_fu_212_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_212_ce : STD_LOGIC;
    signal grp_fu_218_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_222_ce : STD_LOGIC;
    signal grp_fu_228_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (53 downto 0);

    component update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Wheel_angularVelocity_read : IN STD_LOGIC_VECTOR (31 downto 0);
        deltaTime : IN STD_LOGIC_VECTOR (31 downto 0);
        torque : IN STD_LOGIC_VECTOR (31 downto 0);
        velocity_x : IN STD_LOGIC_VECTOR (31 downto 0);
        velocity_z : IN STD_LOGIC_VECTOR (31 downto 0);
        load : IN STD_LOGIC_VECTOR (31 downto 0);
        steeringAngle : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level_car_fadpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_fmurcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_fdisc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_fptudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level_car_fpevdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level_car_dsumb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level_car_dadAem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level_car_dmuzec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_update_fu_108 : component update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_fu_108_ap_start,
        ap_done => grp_update_fu_108_ap_done,
        ap_idle => grp_update_fu_108_ap_idle,
        ap_ready => grp_update_fu_108_ap_ready,
        Wheel_angularVelocity_read => grp_update_fu_108_Wheel_angularVelocity_read,
        deltaTime => deltaTime,
        torque => engine_torque,
        velocity_x => reg_362,
        velocity_z => reg_352,
        load => grp_update_fu_108_load,
        steeringAngle => grp_update_fu_108_steeringAngle,
        ap_return_0 => grp_update_fu_108_ap_return_0,
        ap_return_1 => grp_update_fu_108_ap_return_1,
        ap_return_2 => grp_update_fu_108_ap_return_2);

    grp_update_fu_136 : component update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_fu_136_ap_start,
        ap_done => grp_update_fu_136_ap_done,
        ap_idle => grp_update_fu_136_ap_idle,
        ap_ready => grp_update_fu_136_ap_ready,
        Wheel_angularVelocity_read => grp_update_fu_136_Wheel_angularVelocity_read,
        deltaTime => deltaTime,
        torque => engine_torque,
        velocity_x => reg_371,
        velocity_z => reg_352,
        load => grp_update_fu_136_load,
        steeringAngle => grp_update_fu_136_steeringAngle,
        ap_return_0 => grp_update_fu_136_ap_return_0,
        ap_return_1 => grp_update_fu_136_ap_return_1,
        ap_return_2 => grp_update_fu_136_ap_return_2);

    grp_sin_or_cos_double_s_fu_166 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_166_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_166_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_166_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_166_ap_ready,
        t_in => reg_379,
        do_cos => grp_sin_or_cos_double_s_fu_166_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_166_ap_return);

    grp_sin_or_cos_double_s_fu_185 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_185_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_185_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_185_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_185_ap_ready,
        t_in => reg_379,
        do_cos => grp_sin_or_cos_double_s_fu_185_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_185_ap_return);

    top_level_car_fadpcA_U73 : component top_level_car_fadpcA
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_204_p0,
        din1 => grp_fu_204_p1,
        opcode => grp_fu_204_opcode,
        ce => grp_fu_204_ce,
        dout => grp_fu_204_p2);

    top_level_car_fadpcA_U74 : component top_level_car_fadpcA
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_208_p0,
        din1 => grp_fu_208_p1,
        opcode => grp_fu_208_opcode,
        ce => grp_fu_208_ce,
        dout => grp_fu_208_p2);

    top_level_car_fadpcA_U75 : component top_level_car_fadpcA
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_212_p0,
        din1 => grp_fu_212_p1,
        opcode => grp_fu_212_opcode,
        ce => grp_fu_212_ce,
        dout => grp_fu_212_p2);

    top_level_car_fadpcA_U76 : component top_level_car_fadpcA
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_218_p0,
        din1 => grp_fu_218_p1,
        opcode => grp_fu_218_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_218_p2);

    top_level_car_fmurcU_U77 : component top_level_car_fmurcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_222_p0,
        din1 => grp_fu_222_p1,
        ce => grp_fu_222_ce,
        dout => grp_fu_222_p2);

    top_level_car_fmurcU_U78 : component top_level_car_fmurcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_228_p0,
        din1 => grp_fu_228_p1,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);

    top_level_car_fmurcU_U79 : component top_level_car_fmurcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_240_p0,
        din1 => deltaTime,
        ce => ap_const_logic_1,
        dout => grp_fu_240_p2);

    top_level_car_fmurcU_U80 : component top_level_car_fmurcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_70_i_reg_717,
        din1 => deltaTime,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);

    top_level_car_fdisc4_U81 : component top_level_car_fdisc4
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_352,
        din1 => ap_const_lv32_44B42666,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p2);

    top_level_car_fdisc4_U82 : component top_level_car_fdisc4
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_362,
        din1 => ap_const_lv32_44B42666,
        ce => ap_const_logic_1,
        dout => grp_fu_255_p2);

    top_level_car_fptudo_U83 : component top_level_car_fptudo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_276_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_260_p1);

    top_level_car_fptudo_U84 : component top_level_car_fptudo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_281_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_263_p1);

    top_level_car_fpevdy_U85 : component top_level_car_fpevdy
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_266_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p1);

    top_level_car_fpevdy_U86 : component top_level_car_fpevdy
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_218_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_272_p1);

    top_level_car_dsumb6_U87 : component top_level_car_dsumb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_76_i_reg_749,
        din1 => tmp_79_i_reg_754,
        ce => ap_const_logic_1,
        dout => grp_fu_276_p2);

    top_level_car_dadAem_U88 : component top_level_car_dadAem
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_81_i_reg_759,
        din1 => tmp_82_i_reg_764,
        ce => ap_const_logic_1,
        dout => grp_fu_281_p2);

    top_level_car_dmuzec_U89 : component top_level_car_dmuzec
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_i_reg_667,
        din1 => reg_379,
        ce => ap_const_logic_1,
        dout => grp_fu_286_p2);

    top_level_car_dmuzec_U90 : component top_level_car_dmuzec
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i1_i_reg_673,
        din1 => tmp_78_i_reg_743,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    top_level_car_dmuzec_U91 : component top_level_car_dmuzec
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i1_i_reg_673,
        din1 => reg_379,
        ce => ap_const_logic_1,
        dout => grp_fu_294_p2);

    top_level_car_dmuzec_U92 : component top_level_car_dmuzec
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_i_reg_667,
        din1 => tmp_78_i_reg_743,
        ce => ap_const_logic_1,
        dout => grp_fu_298_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_166_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_166_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_sin_or_cos_double_s_fu_166_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_166_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_166_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_185_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_185_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_sin_or_cos_double_s_fu_185_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_185_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_185_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_fu_108_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_fu_108_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_update_fu_108_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_fu_108_ap_ready = ap_const_logic_1)) then 
                    grp_update_fu_108_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_fu_136_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_fu_136_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_update_fu_136_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_fu_136_ap_ready = ap_const_logic_1)) then 
                    grp_update_fu_136_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                car_chassis_accel_x <= tmp_69_i_reg_711;
                car_chassis_accel_z <= tmp_70_i_reg_717;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                car_chassis_angularV <= grp_fu_204_p2;
                vel_x_temp_reg_779 <= grp_fu_260_p1;
                vel_z_temp_reg_784 <= grp_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                car_chassis_wFL <= grp_fu_204_p2;
                car_chassis_wFR <= grp_fu_208_p2;
                car_chassis_wRL <= grp_fu_212_p2;
                car_chassis_wRR <= grp_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                car_frontLeft_angula <= grp_update_fu_108_ap_return_2;
                car_frontRight_angul <= grp_update_fu_136_ap_return_2;
                newret3_reg_655 <= grp_update_fu_136_ap_return_0;
                newret4_reg_661 <= grp_update_fu_136_ap_return_1;
                tmp_i_i1_i_reg_673 <= grp_sin_or_cos_double_s_fu_185_ap_return;
                tmp_i_i_i_reg_667 <= grp_sin_or_cos_double_s_fu_166_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then
                car_rearLeft_angular <= grp_update_fu_108_ap_return_2;
                car_rearRight_angula <= grp_update_fu_136_ap_return_2;
                newret10_reg_705 <= grp_update_fu_136_ap_return_1;
                newret9_reg_699 <= grp_update_fu_136_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done)))) then
                reg_326 <= grp_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done)))) then
                reg_335 <= grp_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_344 <= grp_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done)))) then
                reg_352 <= grp_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done)))) then
                reg_362 <= grp_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_371 <= grp_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_379 <= grp_fu_266_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done)))) then
                reg_387 <= grp_update_fu_108_ap_return_0;
                reg_394 <= grp_update_fu_108_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_401 <= grp_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state50))) then
                reg_407 <= grp_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_69_i_reg_711 <= grp_fu_250_p2;
                tmp_70_i_reg_717 <= grp_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_72_i_reg_733 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                tmp_76_i_reg_749 <= grp_fu_286_p2;
                tmp_79_i_reg_754 <= grp_fu_290_p2;
                tmp_81_i_reg_759 <= grp_fu_294_p2;
                tmp_82_i_reg_764 <= grp_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                tmp_78_i_reg_743 <= grp_fu_272_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state14, ap_block_state14_on_subcall_done, ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_on_subcall_done_assign_proc : process(grp_update_fu_108_ap_done, grp_update_fu_136_ap_done, grp_sin_or_cos_double_s_fu_166_ap_done, grp_sin_or_cos_double_s_fu_185_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_185_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_166_ap_done = ap_const_logic_0) or (grp_update_fu_136_ap_done = ap_const_logic_0) or (grp_update_fu_108_ap_done = ap_const_logic_0));
    end process;


    ap_block_state14_on_subcall_done_assign_proc : process(grp_update_fu_108_ap_done, grp_update_fu_136_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((grp_update_fu_136_ap_done = ap_const_logic_0) or (grp_update_fu_108_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    car_chassis_orientat_o_assign_proc : process(car_chassis_orientat_i, grp_fu_212_p2, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            car_chassis_orientat_o <= grp_fu_212_p2;
        else 
            car_chassis_orientat_o <= car_chassis_orientat_i;
        end if; 
    end process;


    car_chassis_orientat_o_ap_vld_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            car_chassis_orientat_o_ap_vld <= ap_const_logic_1;
        else 
            car_chassis_orientat_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    car_chassis_pos_x_o_assign_proc : process(car_chassis_pos_x_i, grp_fu_204_p2, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            car_chassis_pos_x_o <= grp_fu_204_p2;
        else 
            car_chassis_pos_x_o <= car_chassis_pos_x_i;
        end if; 
    end process;


    car_chassis_pos_x_o_ap_vld_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            car_chassis_pos_x_o_ap_vld <= ap_const_logic_1;
        else 
            car_chassis_pos_x_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    car_chassis_pos_z_o_assign_proc : process(car_chassis_pos_z_i, grp_fu_208_p2, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            car_chassis_pos_z_o <= grp_fu_208_p2;
        else 
            car_chassis_pos_z_o <= car_chassis_pos_z_i;
        end if; 
    end process;


    car_chassis_pos_z_o_ap_vld_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            car_chassis_pos_z_o_ap_vld <= ap_const_logic_1;
        else 
            car_chassis_pos_z_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    car_chassis_vel_x_o_assign_proc : process(car_chassis_vel_x_i, ap_CS_fsm_state36, grp_fu_212_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            car_chassis_vel_x_o <= grp_fu_212_p2;
        else 
            car_chassis_vel_x_o <= car_chassis_vel_x_i;
        end if; 
    end process;


    car_chassis_vel_x_o_ap_vld_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            car_chassis_vel_x_o_ap_vld <= ap_const_logic_1;
        else 
            car_chassis_vel_x_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    car_chassis_vel_z_o_assign_proc : process(car_chassis_vel_z_i, ap_CS_fsm_state36, grp_fu_218_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            car_chassis_vel_z_o <= grp_fu_218_p2;
        else 
            car_chassis_vel_z_o <= car_chassis_vel_z_i;
        end if; 
    end process;


    car_chassis_vel_z_o_ap_vld_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            car_chassis_vel_z_o_ap_vld <= ap_const_logic_1;
        else 
            car_chassis_vel_z_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_204_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_block_state14_on_subcall_done, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state3, ap_CS_fsm_state43, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_1 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_boolean_1 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            grp_fu_204_ce <= ap_const_logic_0;
        else 
            grp_fu_204_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_204_opcode_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state37, ap_CS_fsm_state5, ap_CS_fsm_state31, ap_CS_fsm_state51, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state39, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_204_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_204_opcode <= ap_const_lv2_0;
        else 
            grp_fu_204_opcode <= "XX";
        end if; 
    end process;


    grp_fu_204_p0_assign_proc : process(car_chassis_vel_z_i, car_chassis_pos_x_i, reg_326, reg_352, reg_371, ap_CS_fsm_state9, ap_CS_fsm_state37, reg_387, reg_401, ap_CS_fsm_state5, ap_CS_fsm_state31, ap_CS_fsm_state51, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state39, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_204_p0 <= car_chassis_pos_x_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_204_p0 <= reg_326;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_204_p0 <= ap_const_lv32_460144F8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_204_p0 <= reg_401;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_204_p0 <= reg_371;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_204_p0 <= reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_204_p0 <= reg_387;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_204_p0 <= car_chassis_vel_z_i;
        else 
            grp_fu_204_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_204_p1_assign_proc : process(car_chassis_angularV, reg_326, reg_335, reg_344, ap_CS_fsm_state9, ap_CS_fsm_state37, reg_387, ap_CS_fsm_state5, newret3_reg_655, newret9_reg_699, ap_CS_fsm_state31, ap_CS_fsm_state51, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state39, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_204_p1 <= car_chassis_angularV;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_204_p1 <= reg_335;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_204_p1 <= reg_344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_204_p1 <= newret9_reg_699;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_204_p1 <= reg_387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_204_p1 <= newret3_reg_655;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_204_p1 <= reg_326;
        else 
            grp_fu_204_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_block_state14_on_subcall_done, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state42, ap_CS_fsm_state48, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state31, ap_CS_fsm_state47, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state45, ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state49, ap_CS_fsm_state24, ap_CS_fsm_state41, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_1 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_boolean_1 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            grp_fu_208_ce <= ap_const_logic_0;
        else 
            grp_fu_208_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_208_opcode_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state37, ap_CS_fsm_state5, ap_CS_fsm_state51, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_208_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_208_opcode <= ap_const_lv2_0;
        else 
            grp_fu_208_opcode <= "XX";
        end if; 
    end process;


    grp_fu_208_p0_assign_proc : process(car_chassis_vel_x_i, car_chassis_pos_z_i, reg_344, reg_362, ap_CS_fsm_state9, ap_CS_fsm_state37, reg_394, reg_401, ap_CS_fsm_state5, ap_CS_fsm_state51, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_208_p0 <= car_chassis_pos_z_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_208_p0 <= reg_401;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_208_p0 <= reg_344;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_208_p0 <= reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_208_p0 <= reg_394;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_208_p0 <= car_chassis_vel_x_i;
        else 
            grp_fu_208_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_p1_assign_proc : process(reg_335, ap_CS_fsm_state9, ap_CS_fsm_state37, reg_394, ap_CS_fsm_state5, newret4_reg_661, newret10_reg_705, ap_CS_fsm_state51, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_208_p1 <= ap_const_lv32_45BFD60F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_208_p1 <= newret10_reg_705;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_208_p1 <= reg_394;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_208_p1 <= newret4_reg_661;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_208_p1 <= reg_335;
        else 
            grp_fu_208_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_212_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state42, ap_CS_fsm_state48, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state47, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state45, ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state49, ap_CS_fsm_state24, ap_CS_fsm_state41, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_1 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            grp_fu_212_ce <= ap_const_logic_0;
        else 
            grp_fu_212_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_212_opcode_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state37, ap_CS_fsm_state5, ap_CS_fsm_state51, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_212_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_212_opcode <= ap_const_lv2_0;
        else 
            grp_fu_212_opcode <= "XX";
        end if; 
    end process;


    grp_fu_212_p0_assign_proc : process(car_chassis_vel_x_i, car_chassis_orientat_i, reg_326, reg_362, reg_371, ap_CS_fsm_state9, ap_CS_fsm_state37, reg_407, ap_CS_fsm_state5, ap_CS_fsm_state51, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_212_p0 <= car_chassis_orientat_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_212_p0 <= reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_212_p0 <= reg_407;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_212_p0 <= reg_371;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_212_p0 <= reg_326;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_212_p0 <= car_chassis_vel_x_i;
        else 
            grp_fu_212_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_212_p1_assign_proc : process(car_chassis_vel_x_i, reg_326, reg_335, ap_CS_fsm_state9, ap_CS_fsm_state37, reg_407, ap_CS_fsm_state5, ap_CS_fsm_state51, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_212_p1 <= reg_407;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_212_p1 <= car_chassis_vel_x_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_212_p1 <= reg_326;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_212_p1 <= reg_335;
        else 
            grp_fu_212_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_218_opcode_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_218_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_218_opcode <= ap_const_lv2_0;
        else 
            grp_fu_218_opcode <= "XX";
        end if; 
    end process;


    grp_fu_218_p0_assign_proc : process(reg_362, ap_CS_fsm_state37, tmp_72_i_reg_733, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_218_p0 <= reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_218_p0 <= tmp_72_i_reg_733;
        else 
            grp_fu_218_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_218_p1_assign_proc : process(car_chassis_vel_z_i, reg_335, ap_CS_fsm_state37, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_218_p1 <= reg_335;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_218_p1 <= car_chassis_vel_z_i;
        else 
            grp_fu_218_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14, ap_block_state14_on_subcall_done, ap_CS_fsm_state42, ap_CS_fsm_state48, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state47, ap_CS_fsm_state51, ap_CS_fsm_state40, ap_CS_fsm_state54, ap_CS_fsm_state15, ap_CS_fsm_state23, ap_CS_fsm_state39, ap_CS_fsm_state45, ap_CS_fsm_state16, ap_CS_fsm_state24, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_1 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            grp_fu_222_ce <= ap_const_logic_0;
        else 
            grp_fu_222_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_222_p0_assign_proc : process(ap_CS_fsm_state1, car_chassis_angularV, car_chassis_accel_x, reg_344, reg_352, ap_CS_fsm_state37, reg_387, reg_394, ap_CS_fsm_state5, newret3_reg_655, newret4_reg_661, ap_CS_fsm_state13, newret9_reg_699, newret10_reg_705, ap_CS_fsm_state31, vel_x_temp_reg_779, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_222_p0 <= vel_x_temp_reg_779;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_222_p0 <= reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_222_p0 <= newret9_reg_699;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_222_p0 <= newret10_reg_705;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_222_p0 <= car_chassis_accel_x;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_222_p0 <= reg_344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_222_p0 <= newret3_reg_655;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_222_p0 <= newret4_reg_661;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_222_p0 <= reg_394;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_222_p0 <= reg_387;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_222_p0 <= car_chassis_angularV;
        else 
            grp_fu_222_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_p1_assign_proc : process(ap_CS_fsm_state1, deltaTime, ap_CS_fsm_state37, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_fu_222_p1 <= deltaTime;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_222_p1 <= ap_const_lv32_BFBB020C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_222_p1 <= ap_const_lv32_4395CEE7;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_222_p1 <= ap_const_lv32_BFBC0831;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_222_p1 <= ap_const_lv32_3F000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_222_p1 <= ap_const_lv32_BFBBC6A8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_222_p1 <= ap_const_lv32_3FBC0831;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_222_p1 <= ap_const_lv32_3FBB020C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_222_p1 <= ap_const_lv32_3F8B851F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_222_p1 <= ap_const_lv32_3FBBC6A8;
        else 
            grp_fu_222_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_228_ce_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_block_state14_on_subcall_done, ap_CS_fsm_state34, ap_CS_fsm_state50, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done)))) then 
            grp_fu_228_ce <= ap_const_logic_1;
        else 
            grp_fu_228_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_228_p0_assign_proc : process(car_chassis_accel_z, reg_326, reg_335, reg_344, ap_CS_fsm_state13, ap_CS_fsm_state31, vel_z_temp_reg_784, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_228_p0 <= vel_z_temp_reg_784;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_228_p0 <= reg_335;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_228_p0 <= car_chassis_accel_z;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_228_p0 <= reg_344;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_228_p0 <= reg_326;
        else 
            grp_fu_228_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_228_p1_assign_proc : process(deltaTime, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_228_p1 <= deltaTime;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_228_p1 <= ap_const_lv32_3F083127;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_228_p1 <= ap_const_lv32_44B42666;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_228_p1 <= ap_const_lv32_3F000000;
        else 
            grp_fu_228_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_240_p0_assign_proc : process(reg_352, tmp_69_i_reg_711, ap_CS_fsm_state31, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_240_p0 <= reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_240_p0 <= tmp_69_i_reg_711;
        else 
            grp_fu_240_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_266_p0_assign_proc : process(car_chassis_orientat_i, ap_CS_fsm_state8, ap_CS_fsm_state36, grp_fu_212_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_266_p0 <= grp_fu_212_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_266_p0 <= car_chassis_orientat_i;
        else 
            grp_fu_266_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sin_or_cos_double_s_fu_166_ap_start <= grp_sin_or_cos_double_s_fu_166_ap_start_reg;
    grp_sin_or_cos_double_s_fu_166_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_185_ap_start <= grp_sin_or_cos_double_s_fu_185_ap_start_reg;
    grp_sin_or_cos_double_s_fu_185_do_cos <= ap_const_logic_0;

    grp_update_fu_108_Wheel_angularVelocity_read_assign_proc : process(car_frontLeft_angula, car_rearLeft_angular, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_update_fu_108_Wheel_angularVelocity_read <= car_rearLeft_angular;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_update_fu_108_Wheel_angularVelocity_read <= car_frontLeft_angula;
        else 
            grp_update_fu_108_Wheel_angularVelocity_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_update_fu_108_ap_start <= grp_update_fu_108_ap_start_reg;

    grp_update_fu_108_load_assign_proc : process(car_chassis_wFL, car_chassis_wRL, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_update_fu_108_load <= car_chassis_wRL;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_update_fu_108_load <= car_chassis_wFL;
        else 
            grp_update_fu_108_load <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_update_fu_108_steeringAngle_assign_proc : process(steeringAngle, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_update_fu_108_steeringAngle <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_update_fu_108_steeringAngle <= steeringAngle;
        else 
            grp_update_fu_108_steeringAngle <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_update_fu_136_Wheel_angularVelocity_read_assign_proc : process(car_frontRight_angul, car_rearRight_angula, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_update_fu_136_Wheel_angularVelocity_read <= car_rearRight_angula;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_update_fu_136_Wheel_angularVelocity_read <= car_frontRight_angul;
        else 
            grp_update_fu_136_Wheel_angularVelocity_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_update_fu_136_ap_start <= grp_update_fu_136_ap_start_reg;

    grp_update_fu_136_load_assign_proc : process(car_chassis_wFR, car_chassis_wRR, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_update_fu_136_load <= car_chassis_wRR;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_update_fu_136_load <= car_chassis_wFR;
        else 
            grp_update_fu_136_load <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_update_fu_136_steeringAngle_assign_proc : process(steeringAngle, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_update_fu_136_steeringAngle <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_update_fu_136_steeringAngle <= steeringAngle;
        else 
            grp_update_fu_136_steeringAngle <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

end behav;
