// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module atan (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] x;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] p_Result_s_reg_174;
wire   [10:0] tmp_V_fu_93_p4;
reg   [10:0] tmp_V_reg_179;
wire   [63:0] absx_fu_119_p1;
reg   [63:0] absx_reg_184;
wire   [0:0] icmp_ln833_fu_124_p2;
reg   [0:0] icmp_ln833_reg_191;
wire   [63:0] select_ln639_fu_136_p3;
wire   [0:0] grp_fu_76_p2;
reg   [0:0] tmp_4_reg_200;
wire    ap_CS_fsm_state2;
wire   [0:0] octant1_fu_144_p2;
reg   [0:0] octant1_reg_204;
wire   [63:0] din_fu_149_p3;
reg   [63:0] din_reg_209;
wire    ap_CS_fsm_state19;
wire   [63:0] grp_atan_generic_double_s_fu_57_ap_return;
wire    ap_CS_fsm_state21;
wire    grp_atan_generic_double_s_fu_57_ap_ready;
wire    grp_atan_generic_double_s_fu_57_ap_done;
wire    grp_atan_generic_double_s_fu_57_ap_start;
wire    grp_atan_generic_double_s_fu_57_ap_idle;
wire   [63:0] grp_fu_64_p2;
reg   [63:0] ap_phi_mux_f_assign_phi_fu_46_p8;
reg   [63:0] f_assign_reg_42;
wire    ap_CS_fsm_state25;
reg    grp_atan_generic_double_s_fu_57_ap_start_reg;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state3;
wire   [63:0] grp_fu_76_p0;
wire   [63:0] p_Val2_s_fu_81_p1;
wire   [62:0] trunc_ln368_fu_107_p1;
wire   [63:0] p_Result_44_fu_111_p3;
wire   [51:0] tmp_V_14_fu_103_p1;
wire   [0:0] icmp_ln833_3_fu_130_p2;
wire   [63:0] grp_fu_71_p2;
wire   [63:0] p_Val2_56_fu_155_p1;
wire   [62:0] trunc_ln368_1_fu_159_p1;
wire   [63:0] p_Result_45_fu_163_p3;
reg    grp_fu_64_ce;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire   [63:0] bitcast_ln512_fu_170_p1;
reg   [63:0] ap_return_preg;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 grp_atan_generic_double_s_fu_57_ap_start_reg = 1'b0;
#0 ap_return_preg = 64'd0;
end

atan_generic_double_s grp_atan_generic_double_s_fu_57(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_atan_generic_double_s_fu_57_ap_start),
    .ap_done(grp_atan_generic_double_s_fu_57_ap_done),
    .ap_idle(grp_atan_generic_double_s_fu_57_ap_idle),
    .ap_ready(grp_atan_generic_double_s_fu_57_ap_ready),
    .t_in(din_reg_209),
    .ap_return(grp_atan_generic_double_s_fu_57_ap_return)
);

top_level_dsub_64mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_dsub_64mb6_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4609753056924675352),
    .din1(grp_atan_generic_double_s_fu_57_ap_return),
    .ce(grp_fu_64_ce),
    .dout(grp_fu_64_p2)
);

top_level_ddiv_64ncg #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_ddiv_64ncg_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(absx_reg_184),
    .ce(1'b1),
    .dout(grp_fu_71_p2)
);

top_level_dcmp_64ocq #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
top_level_dcmp_64ocq_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_76_p0),
    .din1(64'd4607182418800017408),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_76_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_return_preg <= bitcast_ln512_fu_170_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_atan_generic_double_s_fu_57_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            grp_atan_generic_double_s_fu_57_ap_start_reg <= 1'b1;
        end else if ((grp_atan_generic_double_s_fu_57_ap_ready == 1'b1)) begin
            grp_atan_generic_double_s_fu_57_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln833_fu_124_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_assign_reg_42 <= select_ln639_fu_136_p3;
    end else if (((grp_atan_generic_double_s_fu_57_ap_done == 1'b1) & (octant1_reg_204 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        f_assign_reg_42 <= grp_atan_generic_double_s_fu_57_ap_return;
    end else if (((grp_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        f_assign_reg_42 <= 64'd4605249457297304856;
    end else if (((tmp_4_reg_200 == 1'd0) & (octant1_reg_204 == 1'd1) & (icmp_ln833_reg_191 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        f_assign_reg_42 <= grp_fu_64_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        absx_reg_184[62 : 0] <= absx_fu_119_p1[62 : 0];
        icmp_ln833_reg_191 <= icmp_ln833_fu_124_p2;
        p_Result_s_reg_174 <= p_Val2_s_fu_81_p1[32'd63];
        tmp_V_reg_179 <= {{p_Val2_s_fu_81_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_return <= bitcast_ln512_fu_170_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        din_reg_209 <= din_fu_149_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        octant1_reg_204 <= octant1_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_4_reg_200 <= grp_fu_76_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_reg_200 == 1'd0) & (octant1_reg_204 == 1'd1) & (icmp_ln833_reg_191 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_phi_mux_f_assign_phi_fu_46_p8 = grp_fu_64_p2;
    end else begin
        ap_phi_mux_f_assign_phi_fu_46_p8 = f_assign_reg_42;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25) | ((grp_atan_generic_double_s_fu_57_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        grp_fu_64_ce = 1'b1;
    end else begin
        grp_fu_64_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln833_fu_124_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((icmp_ln833_fu_124_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_atan_generic_double_s_fu_57_ap_done == 1'b1) & (octant1_reg_204 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((grp_atan_generic_double_s_fu_57_ap_done == 1'b1) & (octant1_reg_204 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign absx_fu_119_p1 = p_Result_44_fu_111_p3;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign bitcast_ln512_fu_170_p1 = p_Result_45_fu_163_p3;

assign din_fu_149_p3 = ((octant1_reg_204[0:0] === 1'b1) ? grp_fu_71_p2 : absx_reg_184);

assign grp_atan_generic_double_s_fu_57_ap_start = grp_atan_generic_double_s_fu_57_ap_start_reg;

assign grp_fu_76_p0 = p_Result_44_fu_111_p3;

assign icmp_ln833_3_fu_130_p2 = ((tmp_V_14_fu_103_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln833_fu_124_p2 = ((tmp_V_fu_93_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign octant1_fu_144_p2 = ((tmp_V_reg_179 > 11'd1022) ? 1'b1 : 1'b0);

assign p_Result_44_fu_111_p3 = {{1'd0}, {trunc_ln368_fu_107_p1}};

assign p_Result_45_fu_163_p3 = {{p_Result_s_reg_174}, {trunc_ln368_1_fu_159_p1}};

assign p_Val2_56_fu_155_p1 = ap_phi_mux_f_assign_phi_fu_46_p8;

assign p_Val2_s_fu_81_p1 = x;

assign select_ln639_fu_136_p3 = ((icmp_ln833_3_fu_130_p2[0:0] === 1'b1) ? 64'd4609753056924675352 : 64'd9223372036854775807);

assign tmp_V_14_fu_103_p1 = p_Val2_s_fu_81_p1[51:0];

assign tmp_V_fu_93_p4 = {{p_Val2_s_fu_81_p1[62:52]}};

assign trunc_ln368_1_fu_159_p1 = p_Val2_56_fu_155_p1[62:0];

assign trunc_ln368_fu_107_p1 = p_Val2_s_fu_81_p1[62:0];

always @ (posedge ap_clk) begin
    absx_reg_184[63] <= 1'b0;
end

endmodule //atan
