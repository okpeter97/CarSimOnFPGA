// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Wheel_angularVelocity_read,
        deltaTime,
        torque,
        velocity_x,
        velocity_z,
        load,
        steeringAngle,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 130'd1;
parameter    ap_ST_fsm_state2 = 130'd2;
parameter    ap_ST_fsm_state3 = 130'd4;
parameter    ap_ST_fsm_state4 = 130'd8;
parameter    ap_ST_fsm_state5 = 130'd16;
parameter    ap_ST_fsm_state6 = 130'd32;
parameter    ap_ST_fsm_state7 = 130'd64;
parameter    ap_ST_fsm_state8 = 130'd128;
parameter    ap_ST_fsm_state9 = 130'd256;
parameter    ap_ST_fsm_state10 = 130'd512;
parameter    ap_ST_fsm_state11 = 130'd1024;
parameter    ap_ST_fsm_state12 = 130'd2048;
parameter    ap_ST_fsm_state13 = 130'd4096;
parameter    ap_ST_fsm_state14 = 130'd8192;
parameter    ap_ST_fsm_state15 = 130'd16384;
parameter    ap_ST_fsm_state16 = 130'd32768;
parameter    ap_ST_fsm_state17 = 130'd65536;
parameter    ap_ST_fsm_state18 = 130'd131072;
parameter    ap_ST_fsm_state19 = 130'd262144;
parameter    ap_ST_fsm_state20 = 130'd524288;
parameter    ap_ST_fsm_state21 = 130'd1048576;
parameter    ap_ST_fsm_state22 = 130'd2097152;
parameter    ap_ST_fsm_state23 = 130'd4194304;
parameter    ap_ST_fsm_state24 = 130'd8388608;
parameter    ap_ST_fsm_state25 = 130'd16777216;
parameter    ap_ST_fsm_state26 = 130'd33554432;
parameter    ap_ST_fsm_state27 = 130'd67108864;
parameter    ap_ST_fsm_state28 = 130'd134217728;
parameter    ap_ST_fsm_state29 = 130'd268435456;
parameter    ap_ST_fsm_state30 = 130'd536870912;
parameter    ap_ST_fsm_state31 = 130'd1073741824;
parameter    ap_ST_fsm_state32 = 130'd2147483648;
parameter    ap_ST_fsm_state33 = 130'd4294967296;
parameter    ap_ST_fsm_state34 = 130'd8589934592;
parameter    ap_ST_fsm_state35 = 130'd17179869184;
parameter    ap_ST_fsm_state36 = 130'd34359738368;
parameter    ap_ST_fsm_state37 = 130'd68719476736;
parameter    ap_ST_fsm_state38 = 130'd137438953472;
parameter    ap_ST_fsm_state39 = 130'd274877906944;
parameter    ap_ST_fsm_state40 = 130'd549755813888;
parameter    ap_ST_fsm_state41 = 130'd1099511627776;
parameter    ap_ST_fsm_state42 = 130'd2199023255552;
parameter    ap_ST_fsm_state43 = 130'd4398046511104;
parameter    ap_ST_fsm_state44 = 130'd8796093022208;
parameter    ap_ST_fsm_state45 = 130'd17592186044416;
parameter    ap_ST_fsm_state46 = 130'd35184372088832;
parameter    ap_ST_fsm_state47 = 130'd70368744177664;
parameter    ap_ST_fsm_state48 = 130'd140737488355328;
parameter    ap_ST_fsm_state49 = 130'd281474976710656;
parameter    ap_ST_fsm_state50 = 130'd562949953421312;
parameter    ap_ST_fsm_state51 = 130'd1125899906842624;
parameter    ap_ST_fsm_state52 = 130'd2251799813685248;
parameter    ap_ST_fsm_state53 = 130'd4503599627370496;
parameter    ap_ST_fsm_state54 = 130'd9007199254740992;
parameter    ap_ST_fsm_state55 = 130'd18014398509481984;
parameter    ap_ST_fsm_state56 = 130'd36028797018963968;
parameter    ap_ST_fsm_state57 = 130'd72057594037927936;
parameter    ap_ST_fsm_state58 = 130'd144115188075855872;
parameter    ap_ST_fsm_state59 = 130'd288230376151711744;
parameter    ap_ST_fsm_state60 = 130'd576460752303423488;
parameter    ap_ST_fsm_state61 = 130'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 130'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 130'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 130'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 130'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 130'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 130'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 130'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 130'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 130'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 130'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 130'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 130'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 130'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 130'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 130'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 130'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 130'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 130'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 130'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 130'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 130'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 130'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 130'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 130'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 130'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 130'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 130'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 130'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 130'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 130'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 130'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 130'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 130'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 130'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 130'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 130'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 130'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 130'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 130'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 130'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 130'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 130'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 130'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 130'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 130'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 130'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 130'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 130'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 130'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 130'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 130'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 130'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 130'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 130'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 130'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 130'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 130'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 130'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 130'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 130'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 130'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 130'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 130'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 130'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 130'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 130'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 130'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 130'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 130'd680564733841876926926749214863536422912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Wheel_angularVelocity_read;
input  [31:0] deltaTime;
input  [31:0] torque;
input  [31:0] velocity_x;
input  [31:0] velocity_z;
input  [31:0] load;
input  [31:0] steeringAngle;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [129:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_361_p1;
reg   [63:0] reg_425;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state72;
wire   [63:0] grp_sin_fu_206_ap_return;
reg   [63:0] reg_435;
wire    ap_CS_fsm_state3;
wire    grp_sin_or_cos_double_s_fu_277_ap_ready;
wire    grp_sin_or_cos_double_s_fu_277_ap_done;
wire    grp_sin_fu_206_ap_ready;
wire    grp_sin_fu_206_ap_done;
reg    ap_block_state3_on_subcall_done;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
wire   [31:0] grp_fu_308_p2;
reg   [31:0] reg_441;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state126;
wire   [31:0] grp_fu_313_p2;
reg   [31:0] reg_450;
wire   [31:0] grp_fu_318_p2;
reg   [31:0] reg_458;
wire   [31:0] grp_fu_323_p2;
reg   [31:0] reg_464;
wire   [31:0] grp_fu_296_p2;
reg   [31:0] reg_470;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state116;
wire   [31:0] grp_fu_300_p2;
reg   [31:0] reg_479;
wire   [63:0] grp_fu_399_p2;
reg   [63:0] reg_487;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state73;
wire    grp_atan_fu_248_ap_ready;
wire    grp_atan_fu_248_ap_done;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state94;
wire   [31:0] grp_fu_351_p1;
reg   [31:0] reg_495;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state47;
wire   [31:0] grp_fu_339_p2;
reg   [31:0] reg_503;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state124;
wire   [63:0] grp_atan_fu_248_ap_return;
reg   [63:0] reg_510;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state89;
reg   [63:0] reg_517;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state76;
reg   [63:0] reg_523;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state95;
reg   [31:0] reg_530;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state98;
reg   [63:0] reg_536;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state90;
wire   [63:0] grp_fu_395_p2;
reg   [63:0] reg_542;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state87;
wire   [63:0] grp_sin_or_cos_double_s_fu_277_ap_return;
wire    ap_CS_fsm_state4;
reg   [31:0] cos_steer_reg_917;
wire   [31:0] grp_fu_355_p1;
reg   [31:0] sin_steer_reg_925;
wire   [7:0] tmp_V_fu_552_p4;
reg   [7:0] tmp_V_reg_960;
wire   [22:0] tmp_V_1_fu_562_p1;
reg   [22:0] tmp_V_1_reg_966;
wire   [0:0] and_ln30_fu_584_p2;
reg   [0:0] and_ln30_reg_971;
reg   [0:0] p_Result_s_reg_975;
wire   [31:0] abs_fu_724_p3;
reg   [31:0] abs_reg_980;
wire    ap_CS_fsm_state14;
reg   [31:0] tmp_9_reg_985;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_348_p1;
reg   [31:0] tmp_10_reg_990;
wire   [31:0] select_ln41_fu_806_p3;
wire    ap_CS_fsm_state27;
wire   [63:0] grp_fu_370_p1;
reg   [63:0] tmp_18_reg_1000;
wire   [63:0] grp_fu_415_p2;
reg   [63:0] tmp_17_reg_1005;
wire    ap_CS_fsm_state45;
wire   [63:0] grp_fu_420_p2;
reg   [63:0] tmp_19_reg_1010;
reg   [31:0] a_reg_1015;
wire   [31:0] grp_fu_390_p2;
reg   [31:0] s_reg_1022;
wire    ap_CS_fsm_state60;
wire   [63:0] grp_fu_408_p2;
reg   [63:0] tmp_40_reg_1032;
reg   [63:0] tmp_33_reg_1037;
wire    ap_CS_fsm_state88;
wire   [63:0] bitcast_ln54_1_fu_824_p1;
reg   [31:0] latForce_reg_1047;
wire   [0:0] and_ln57_fu_864_p2;
reg   [0:0] and_ln57_reg_1052;
wire   [31:0] grp_fu_343_p2;
reg   [31:0] tmp_48_reg_1056;
wire   [31:0] xor_ln66_fu_873_p2;
reg   [31:0] xor_ln66_reg_1061;
wire    ap_CS_fsm_state110;
wire   [31:0] bitcast_ln66_1_fu_879_p1;
wire    ap_CS_fsm_state111;
wire   [31:0] grp_fu_334_p2;
reg   [31:0] tmp_57_reg_1071;
wire   [31:0] grp_fu_304_p2;
reg   [31:0] Wheel_force_z_write_s_reg_1076;
wire    grp_sin_fu_206_ap_start;
wire    grp_sin_fu_206_ap_idle;
reg   [63:0] grp_sin_fu_206_x;
wire    grp_atan_fu_248_ap_start;
wire    grp_atan_fu_248_ap_idle;
reg   [63:0] grp_atan_fu_248_x;
wire    grp_sin_or_cos_double_s_fu_277_ap_start;
wire    grp_sin_or_cos_double_s_fu_277_ap_idle;
wire    grp_sin_or_cos_double_s_fu_277_do_cos;
reg   [31:0] ap_phi_mux_slipRatio_0_phi_fu_165_p4;
reg   [31:0] slipRatio_0_reg_162;
wire    ap_CS_fsm_state26;
reg   [31:0] ap_phi_mux_slipAngle_2_phi_fu_175_p4;
reg   [31:0] slipAngle_2_reg_172;
reg   [31:0] x_0_reg_182;
reg   [31:0] z_0_reg_194;
reg    grp_sin_fu_206_ap_start_reg;
reg    grp_atan_fu_248_ap_start_reg;
reg    grp_sin_or_cos_double_s_fu_277_ap_start_reg;
reg   [31:0] grp_fu_296_p0;
reg   [31:0] grp_fu_296_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state127;
reg   [31:0] grp_fu_300_p0;
reg   [31:0] grp_fu_300_p1;
reg   [31:0] grp_fu_308_p0;
reg   [31:0] grp_fu_308_p1;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state125;
reg   [31:0] grp_fu_313_p0;
reg   [31:0] grp_fu_313_p1;
reg   [31:0] grp_fu_318_p1;
reg   [31:0] grp_fu_323_p0;
reg   [31:0] grp_fu_323_p1;
reg   [31:0] grp_fu_339_p0;
reg   [31:0] grp_fu_339_p1;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state15;
reg   [63:0] grp_fu_351_p0;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state74;
reg   [63:0] grp_fu_355_p0;
reg   [31:0] grp_fu_361_p0;
wire    ap_CS_fsm_state22;
reg   [31:0] grp_fu_375_p0;
wire    ap_CS_fsm_state54;
reg   [63:0] grp_fu_395_p0;
reg   [63:0] grp_fu_395_p1;
wire    ap_CS_fsm_state84;
reg   [63:0] grp_fu_399_p0;
reg   [63:0] grp_fu_399_p1;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state29;
wire   [31:0] p_Val2_s_fu_548_p1;
wire   [0:0] icmp_ln30_1_fu_572_p2;
wire   [0:0] icmp_ln30_fu_566_p2;
wire   [0:0] or_ln30_fu_578_p2;
wire   [0:0] grp_fu_375_p2;
wire   [24:0] mantissa_V_fu_598_p4;
wire   [8:0] zext_ln339_fu_611_p1;
wire   [8:0] add_ln339_fu_614_p2;
wire   [7:0] sub_ln1311_fu_628_p2;
wire   [0:0] isNeg_fu_620_p3;
wire  signed [8:0] sext_ln1311_fu_633_p1;
wire  signed [8:0] ush_fu_637_p3;
wire  signed [31:0] sext_ln1311_1_fu_645_p1;
wire  signed [24:0] sext_ln1311_2_fu_649_p1;
wire   [78:0] zext_ln682_fu_607_p1;
wire   [78:0] zext_ln1287_fu_653_p1;
wire   [24:0] r_V_fu_657_p2;
wire   [0:0] tmp_fu_669_p3;
wire   [78:0] r_V_1_fu_663_p2;
wire   [31:0] zext_ln662_fu_677_p1;
wire   [31:0] tmp_58_fu_681_p4;
wire   [31:0] p_Val2_5_fu_691_p3;
wire   [31:0] result_V_1_fu_699_p2;
wire   [31:0] p_Val2_6_fu_705_p3;
wire   [0:0] abscond_fu_718_p2;
wire   [31:0] neg_fu_712_p2;
wire   [31:0] bitcast_ln41_fu_732_p1;
wire   [7:0] tmp_14_fu_736_p4;
wire   [22:0] trunc_ln41_fu_746_p1;
wire   [0:0] icmp_ln41_1_fu_756_p2;
wire   [0:0] icmp_ln41_fu_750_p2;
wire   [0:0] or_ln41_fu_762_p2;
wire   [0:0] and_ln41_fu_768_p2;
wire   [0:0] grp_fu_380_p2;
wire   [0:0] grp_fu_385_p2;
wire   [0:0] xor_ln41_fu_782_p2;
wire   [0:0] xor_ln41_fu_788_p2;
wire   [0:0] and_ln41_fu_794_p2;
wire   [0:0] and_ln41_1_fu_800_p2;
wire   [31:0] select_ln41_1_fu_774_p3;
wire   [63:0] bitcast_ln54_fu_814_p1;
wire   [63:0] xor_ln54_fu_818_p2;
wire   [31:0] bitcast_ln57_fu_829_p1;
wire   [7:0] tmp_59_fu_832_p4;
wire   [22:0] trunc_ln57_fu_842_p1;
wire   [0:0] icmp_ln57_1_fu_852_p2;
wire   [0:0] icmp_ln57_fu_846_p2;
wire   [0:0] or_ln57_fu_858_p2;
wire   [31:0] bitcast_ln66_fu_870_p1;
wire    ap_CS_fsm_state130;
reg   [1:0] grp_fu_296_opcode;
reg    grp_fu_339_ce;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state123;
reg    grp_fu_351_ce;
reg    grp_fu_355_ce;
reg    grp_fu_375_ce;
reg   [4:0] grp_fu_375_opcode;
reg   [1:0] grp_fu_395_opcode;
reg    grp_fu_395_ce;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
reg    grp_fu_399_ce;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [129:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 130'd1;
#0 grp_sin_fu_206_ap_start_reg = 1'b0;
#0 grp_atan_fu_248_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_double_s_fu_277_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
end

sin grp_sin_fu_206(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_fu_206_ap_start),
    .ap_done(grp_sin_fu_206_ap_done),
    .ap_idle(grp_sin_fu_206_ap_idle),
    .ap_ready(grp_sin_fu_206_ap_ready),
    .x(grp_sin_fu_206_x),
    .ap_return(grp_sin_fu_206_ap_return)
);

atan grp_atan_fu_248(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_atan_fu_248_ap_start),
    .ap_done(grp_atan_fu_248_ap_done),
    .ap_idle(grp_atan_fu_248_ap_idle),
    .ap_ready(grp_atan_fu_248_ap_ready),
    .x(grp_atan_fu_248_x),
    .ap_return(grp_atan_fu_248_ap_return)
);

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_277(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_277_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_277_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_277_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_277_ap_ready),
    .t_in(reg_425),
    .do_cos(grp_sin_or_cos_double_s_fu_277_do_cos),
    .ap_return(grp_sin_or_cos_double_s_fu_277_ap_return)
);

top_level_faddfsupcA #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_faddfsupcA_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_296_p0),
    .din1(grp_fu_296_p1),
    .opcode(grp_fu_296_opcode),
    .ce(1'b1),
    .dout(grp_fu_296_p2)
);

top_level_fadd_32qcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fadd_32qcK_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_300_p0),
    .din1(grp_fu_300_p1),
    .ce(1'b1),
    .dout(grp_fu_300_p2)
);

top_level_fadd_32qcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fadd_32qcK_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_464),
    .din1(tmp_57_reg_1071),
    .ce(1'b1),
    .dout(grp_fu_304_p2)
);

top_level_fmul_32rcU #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32rcU_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_308_p0),
    .din1(grp_fu_308_p1),
    .ce(1'b1),
    .dout(grp_fu_308_p2)
);

top_level_fmul_32rcU #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32rcU_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_313_p0),
    .din1(grp_fu_313_p1),
    .ce(1'b1),
    .dout(grp_fu_313_p2)
);

top_level_fmul_32rcU #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32rcU_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sin_steer_reg_925),
    .din1(grp_fu_318_p1),
    .ce(1'b1),
    .dout(grp_fu_318_p2)
);

top_level_fmul_32rcU #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32rcU_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_323_p0),
    .din1(grp_fu_323_p1),
    .ce(1'b1),
    .dout(grp_fu_323_p2)
);

top_level_fmul_32rcU #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32rcU_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cos_steer_reg_917),
    .din1(z_0_reg_194),
    .ce(1'b1),
    .dout(grp_fu_334_p2)
);

top_level_fdiv_32sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fdiv_32sc4_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_339_p0),
    .din1(grp_fu_339_p1),
    .ce(grp_fu_339_ce),
    .dout(grp_fu_339_p2)
);

top_level_fdiv_32sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fdiv_32sc4_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_reg_1015),
    .din1(s_reg_1022),
    .ce(1'b1),
    .dout(grp_fu_343_p2)
);

top_level_sitofp_tde #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_sitofp_tde_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(abs_reg_980),
    .ce(1'b1),
    .dout(grp_fu_348_p1)
);

top_level_fptruncudo #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
top_level_fptruncudo_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_351_p0),
    .ce(grp_fu_351_ce),
    .dout(grp_fu_351_p1)
);

top_level_fptruncudo #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
top_level_fptruncudo_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_355_p0),
    .ce(grp_fu_355_ce),
    .dout(grp_fu_355_p1)
);

top_level_fpext_3vdy #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
top_level_fpext_3vdy_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_361_p0),
    .ce(1'b1),
    .dout(grp_fu_361_p1)
);

top_level_fpext_3vdy #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
top_level_fpext_3vdy_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_slipAngle_2_phi_fu_175_p4),
    .ce(1'b1),
    .dout(grp_fu_370_p1)
);

top_level_fcmp_32wdI #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
top_level_fcmp_32wdI_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_375_p0),
    .din1(32'd0),
    .ce(grp_fu_375_ce),
    .opcode(grp_fu_375_opcode),
    .dout(grp_fu_375_p2)
);

top_level_fcmp_32wdI #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
top_level_fcmp_32wdI_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_479),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd8),
    .dout(grp_fu_380_p2)
);

top_level_fcmp_32wdI #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
top_level_fcmp_32wdI_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_479),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_385_p2)
);

top_level_fsqrt_3xdS #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fsqrt_3xdS_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_470),
    .ce(1'b1),
    .dout(grp_fu_390_p2)
);

top_level_dadddsuyd2 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_dadddsuyd2_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_395_p0),
    .din1(grp_fu_395_p1),
    .opcode(grp_fu_395_opcode),
    .ce(grp_fu_395_ce),
    .dout(grp_fu_395_p2)
);

top_level_dmul_64zec #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_dmul_64zec_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_399_p0),
    .din1(grp_fu_399_p1),
    .ce(grp_fu_399_ce),
    .dout(grp_fu_399_p2)
);

top_level_dmul_64zec #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_dmul_64zec_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_536),
    .din1(64'd13819745816549104026),
    .ce(1'b1),
    .dout(grp_fu_408_p2)
);

top_level_ddiv_64ncg #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_ddiv_64ncg_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_425),
    .din1(64'd4611235658464650854),
    .ce(1'b1),
    .dout(grp_fu_415_p2)
);

top_level_ddiv_64ncg #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_ddiv_64ncg_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_reg_1000),
    .din1(64'd4613262278296967578),
    .ce(1'b1),
    .dout(grp_fu_420_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state130)) begin
            ap_return_0_preg <= reg_479;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state130)) begin
            ap_return_1_preg <= Wheel_force_z_write_s_reg_1076;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state130)) begin
            ap_return_2_preg <= grp_fu_296_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_atan_fu_248_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state23) | ((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state89)))) begin
            grp_atan_fu_248_ap_start_reg <= 1'b1;
        end else if ((grp_atan_fu_248_ap_ready == 1'b1)) begin
            grp_atan_fu_248_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_fu_206_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state2) | ((grp_sin_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state96)))) begin
            grp_sin_fu_206_ap_start_reg <= 1'b1;
        end else if ((grp_sin_fu_206_ap_ready == 1'b1)) begin
            grp_sin_fu_206_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_277_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_sin_or_cos_double_s_fu_277_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_277_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_277_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        slipAngle_2_reg_172 <= select_ln41_fu_806_p3;
    end else if (((1'd0 == and_ln30_reg_971) & (1'b1 == ap_CS_fsm_state26))) begin
        slipAngle_2_reg_172 <= grp_fu_351_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        slipRatio_0_reg_162 <= reg_495;
    end else if (((1'd0 == and_ln30_reg_971) & (1'b1 == ap_CS_fsm_state26))) begin
        slipRatio_0_reg_162 <= reg_503;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln57_fu_864_p2) & (1'b1 == ap_CS_fsm_state98))) begin
        x_0_reg_182 <= 32'd0;
    end else if (((1'd0 == and_ln57_reg_1052) & (1'b1 == ap_CS_fsm_state110))) begin
        x_0_reg_182 <= reg_441;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln57_fu_864_p2) & (1'b1 == ap_CS_fsm_state98))) begin
        z_0_reg_194 <= 32'd0;
    end else if (((1'd0 == and_ln57_reg_1052) & (1'b1 == ap_CS_fsm_state110))) begin
        z_0_reg_194 <= reg_450;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        Wheel_force_z_write_s_reg_1076 <= grp_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        a_reg_1015 <= grp_fu_355_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        abs_reg_980 <= abs_fu_724_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        and_ln30_reg_971 <= and_ln30_fu_584_p2;
        tmp_V_1_reg_966 <= tmp_V_1_fu_562_p1;
        tmp_V_reg_960 <= {{p_Val2_s_fu_548_p1[30:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        and_ln57_reg_1052 <= and_ln57_fu_864_p2;
        latForce_reg_1047 <= grp_fu_355_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cos_steer_reg_917 <= grp_fu_351_p1;
        sin_steer_reg_925 <= grp_fu_355_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln30_fu_584_p2) & (1'b1 == ap_CS_fsm_state12))) begin
        p_Result_s_reg_975 <= p_Val2_s_fu_548_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_425 <= grp_fu_361_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_sin_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state97)) | ((grp_sin_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state96)) | ((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3)))) begin
        reg_435 <= grp_sin_fu_206_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_441 <= grp_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_450 <= grp_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_458 <= grp_fu_318_p2;
        reg_464 <= grp_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_470 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_479 <= grp_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state10) | ((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state73)))) begin
        reg_487 <= grp_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_495 <= grp_fu_351_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_503 <= grp_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state89)) | ((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state73)))) begin
        reg_510 <= grp_atan_fu_248_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state64))) begin
        reg_517 <= grp_fu_361_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state69))) begin
        reg_523 <= grp_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state71))) begin
        reg_530 <= grp_fu_351_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state90)) | ((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state77)))) begin
        reg_536 <= grp_atan_fu_248_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state78))) begin
        reg_542 <= grp_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        s_reg_1022 <= grp_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_10_reg_990 <= grp_fu_348_p1;
        tmp_9_reg_985 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        tmp_17_reg_1005 <= grp_fu_415_p2;
        tmp_19_reg_1010 <= grp_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_18_reg_1000 <= grp_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        tmp_33_reg_1037 <= grp_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        tmp_40_reg_1032 <= grp_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        tmp_48_reg_1056 <= grp_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        tmp_57_reg_1071 <= grp_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        xor_ln66_reg_1061 <= xor_ln66_fu_873_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state130) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln30_reg_971) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_phi_mux_slipAngle_2_phi_fu_175_p4 = grp_fu_351_p1;
    end else begin
        ap_phi_mux_slipAngle_2_phi_fu_175_p4 = slipAngle_2_reg_172;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln30_reg_971) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_phi_mux_slipRatio_0_phi_fu_165_p4 = reg_503;
    end else begin
        ap_phi_mux_slipRatio_0_phi_fu_165_p4 = slipRatio_0_reg_162;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        ap_return_0 = reg_479;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        ap_return_1 = Wheel_force_z_write_s_reg_1076;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        ap_return_2 = grp_fu_296_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_atan_fu_248_x = tmp_33_reg_1037;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_atan_fu_248_x = reg_542;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_atan_fu_248_x = reg_517;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state73))) begin
        grp_atan_fu_248_x = reg_425;
    end else begin
        grp_atan_fu_248_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_296_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_296_opcode = 2'd0;
    end else begin
        grp_fu_296_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_296_p0 = torque;
    end else if (((1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_296_p0 = reg_441;
    end else begin
        grp_fu_296_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        grp_fu_296_p1 = Wheel_angularVelocity_read;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_296_p1 = reg_441;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_296_p1 = reg_470;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_296_p1 = reg_450;
    end else begin
        grp_fu_296_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_300_p0 = reg_450;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_300_p0 = reg_458;
    end else begin
        grp_fu_300_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_300_p1 = reg_458;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_300_p1 = reg_464;
    end else begin
        grp_fu_300_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_fu_308_p0 = x_0_reg_182;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        grp_fu_308_p0 = reg_441;
    end else if (((1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state106))) begin
        grp_fu_308_p0 = reg_503;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_308_p0 = s_reg_1022;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_308_p0 = reg_495;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_308_p0 = Wheel_angularVelocity_read;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_308_p0 = cos_steer_reg_917;
    end else begin
        grp_fu_308_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        grp_fu_308_p1 = deltaTime;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        grp_fu_308_p1 = reg_530;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_308_p1 = load;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_308_p1 = 32'd1092616192;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_308_p1 = reg_495;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_308_p1 = 32'd1050253722;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_308_p1 = velocity_x;
    end else begin
        grp_fu_308_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_fu_313_p0 = cos_steer_reg_917;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        grp_fu_313_p0 = reg_450;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_313_p0 = tmp_48_reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_313_p0 = a_reg_1015;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_313_p0 = sin_steer_reg_925;
    end else begin
        grp_fu_313_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_fu_313_p1 = x_0_reg_182;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        grp_fu_313_p1 = latForce_reg_1047;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_313_p1 = load;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_313_p1 = a_reg_1015;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_313_p1 = velocity_z;
    end else begin
        grp_fu_313_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_fu_318_p1 = z_0_reg_194;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_318_p1 = velocity_x;
    end else begin
        grp_fu_318_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_fu_323_p0 = x_0_reg_182;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_323_p0 = cos_steer_reg_917;
    end else begin
        grp_fu_323_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_fu_323_p1 = bitcast_ln66_1_fu_879_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_323_p1 = velocity_z;
    end else begin
        grp_fu_323_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state16) | ((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24)))) begin
        grp_fu_339_ce = 1'b1;
    end else begin
        grp_fu_339_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        grp_fu_339_p0 = reg_470;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_339_p0 = reg_495;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_339_p0 = tmp_9_reg_985;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_339_p0 = reg_479;
    end else begin
        grp_fu_339_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        grp_fu_339_p1 = 32'd1084227584;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_339_p1 = s_reg_1022;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_339_p1 = tmp_10_reg_990;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_339_p1 = reg_470;
    end else begin
        grp_fu_339_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state12) | ((grp_sin_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state97)) | ((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_351_ce = 1'b1;
    end else begin
        grp_fu_351_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_351_p0 = grp_sin_fu_206_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_351_p0 = reg_523;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_351_p0 = tmp_17_reg_1005;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_351_p0 = reg_510;
    end else if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_351_p0 = reg_487;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_351_p0 = grp_sin_or_cos_double_s_fu_277_ap_return;
    end else begin
        grp_fu_351_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state47) | ((grp_sin_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state97)) | ((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_355_ce = 1'b1;
    end else begin
        grp_fu_355_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_355_p0 = bitcast_ln54_1_fu_824_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_355_p0 = tmp_19_reg_1010;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_355_p0 = grp_sin_fu_206_ap_return;
    end else begin
        grp_fu_355_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state71))) begin
        grp_fu_361_p0 = grp_fu_351_p1;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_361_p0 = reg_441;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_361_p0 = s_reg_1022;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_361_p0 = ap_phi_mux_slipRatio_0_phi_fu_165_p4;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_361_p0 = reg_503;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_361_p0 = Wheel_angularVelocity_read;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_361_p0 = steeringAngle;
    end else begin
        grp_fu_361_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state12) | ((grp_sin_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state97)))) begin
        grp_fu_375_ce = 1'b1;
    end else begin
        grp_fu_375_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln30_fu_584_p2) & (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_375_opcode = 5'd4;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state97))) begin
        grp_fu_375_opcode = 5'd1;
    end else begin
        grp_fu_375_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_375_p0 = s_reg_1022;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_375_p0 = reg_479;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_375_p0 = reg_470;
    end else begin
        grp_fu_375_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | ((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state77)))) begin
        grp_fu_395_ce = 1'b1;
    end else begin
        grp_fu_395_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state74))) begin
        grp_fu_395_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_395_opcode = 2'd0;
    end else begin
        grp_fu_395_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_395_p0 = reg_487;
    end else if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state74))) begin
        grp_fu_395_p0 = reg_425;
    end else begin
        grp_fu_395_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_395_p1 = reg_523;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_395_p1 = tmp_40_reg_1032;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_395_p1 = reg_510;
    end else begin
        grp_fu_395_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state90)) | ((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state73)))) begin
        grp_fu_399_ce = 1'b1;
    end else begin
        grp_fu_399_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_fu_399_p0 = reg_536;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_399_p0 = reg_510;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_399_p0 = reg_542;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_399_p0 = reg_487;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state78))) begin
        grp_fu_399_p0 = reg_517;
    end else if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_399_p0 = reg_425;
    end else begin
        grp_fu_399_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_399_p1 = 64'd4608983858650965606;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_399_p1 = 64'd4606912202822375178;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_399_p1 = 64'd4608083138725491507;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_399_p1 = 64'd4613262278296967578;
    end else if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state65))) begin
        grp_fu_399_p1 = 64'd4611235658464650854;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_399_p1 = 64'd4604606359813161484;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_399_p1 = 64'd4547007122018943789;
    end else begin
        grp_fu_399_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_sin_fu_206_x = reg_523;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_sin_fu_206_x = reg_487;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_sin_fu_206_x = reg_425;
    end else begin
        grp_sin_fu_206_x = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'd1 == and_ln30_fu_584_p2) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            if (((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state90 : begin
            if (((grp_atan_fu_248_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            if (((grp_sin_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state97 : begin
            if (((grp_sin_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            if (((1'd1 == and_ln57_fu_864_p2) & (1'b1 == ap_CS_fsm_state98))) begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_fu_724_p3 = ((abscond_fu_718_p2[0:0] === 1'b1) ? p_Val2_6_fu_705_p3 : neg_fu_712_p2);

assign abscond_fu_718_p2 = (($signed(p_Val2_6_fu_705_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign add_ln339_fu_614_p2 = ($signed(zext_ln339_fu_611_p1) + $signed(9'd385));

assign and_ln30_fu_584_p2 = (or_ln30_fu_578_p2 & grp_fu_375_p2);

assign and_ln41_1_fu_800_p2 = (or_ln41_fu_762_p2 & and_ln41_fu_794_p2);

assign and_ln41_fu_768_p2 = (or_ln41_fu_762_p2 & grp_fu_375_p2);

assign and_ln41_fu_794_p2 = (xor_ln41_fu_788_p2 & xor_ln41_fu_782_p2);

assign and_ln57_fu_864_p2 = (or_ln57_fu_858_p2 & grp_fu_375_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_sin_fu_206_ap_done == 1'b0) | (grp_sin_or_cos_double_s_fu_277_ap_done == 1'b0));
end

assign bitcast_ln41_fu_732_p1 = reg_479;

assign bitcast_ln54_1_fu_824_p1 = xor_ln54_fu_818_p2;

assign bitcast_ln54_fu_814_p1 = reg_435;

assign bitcast_ln57_fu_829_p1 = s_reg_1022;

assign bitcast_ln66_1_fu_879_p1 = xor_ln66_reg_1061;

assign bitcast_ln66_fu_870_p1 = sin_steer_reg_925;

assign grp_atan_fu_248_ap_start = grp_atan_fu_248_ap_start_reg;

assign grp_sin_fu_206_ap_start = grp_sin_fu_206_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_277_ap_start = grp_sin_or_cos_double_s_fu_277_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_277_do_cos = 1'd1;

assign icmp_ln30_1_fu_572_p2 = ((tmp_V_1_fu_562_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_566_p2 = ((tmp_V_fu_552_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_756_p2 = ((trunc_ln41_fu_746_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_750_p2 = ((tmp_14_fu_736_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_852_p2 = ((trunc_ln57_fu_842_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_846_p2 = ((tmp_59_fu_832_p4 != 8'd255) ? 1'b1 : 1'b0);

assign isNeg_fu_620_p3 = add_ln339_fu_614_p2[32'd8];

assign mantissa_V_fu_598_p4 = {{{{1'd1}, {tmp_V_1_reg_966}}}, {1'd0}};

assign neg_fu_712_p2 = (32'd0 - p_Val2_6_fu_705_p3);

assign or_ln30_fu_578_p2 = (icmp_ln30_fu_566_p2 | icmp_ln30_1_fu_572_p2);

assign or_ln41_fu_762_p2 = (icmp_ln41_fu_750_p2 | icmp_ln41_1_fu_756_p2);

assign or_ln57_fu_858_p2 = (icmp_ln57_fu_846_p2 | icmp_ln57_1_fu_852_p2);

assign p_Val2_5_fu_691_p3 = ((isNeg_fu_620_p3[0:0] === 1'b1) ? zext_ln662_fu_677_p1 : tmp_58_fu_681_p4);

assign p_Val2_6_fu_705_p3 = ((p_Result_s_reg_975[0:0] === 1'b1) ? result_V_1_fu_699_p2 : p_Val2_5_fu_691_p3);

assign p_Val2_s_fu_548_p1 = reg_470;

assign r_V_1_fu_663_p2 = zext_ln682_fu_607_p1 << zext_ln1287_fu_653_p1;

assign r_V_fu_657_p2 = mantissa_V_fu_598_p4 >> sext_ln1311_2_fu_649_p1;

assign result_V_1_fu_699_p2 = (32'd0 - p_Val2_5_fu_691_p3);

assign select_ln41_1_fu_774_p3 = ((and_ln41_fu_768_p2[0:0] === 1'b1) ? 32'd3266576384 : 32'd1119092736);

assign select_ln41_fu_806_p3 = ((and_ln41_1_fu_800_p2[0:0] === 1'b1) ? select_ln41_1_fu_774_p3 : 32'd0);

assign sext_ln1311_1_fu_645_p1 = ush_fu_637_p3;

assign sext_ln1311_2_fu_649_p1 = ush_fu_637_p3;

assign sext_ln1311_fu_633_p1 = $signed(sub_ln1311_fu_628_p2);

assign sub_ln1311_fu_628_p2 = (8'd127 - tmp_V_reg_960);

assign tmp_14_fu_736_p4 = {{bitcast_ln41_fu_732_p1[30:23]}};

assign tmp_58_fu_681_p4 = {{r_V_1_fu_663_p2[55:24]}};

assign tmp_59_fu_832_p4 = {{bitcast_ln57_fu_829_p1[30:23]}};

assign tmp_V_1_fu_562_p1 = p_Val2_s_fu_548_p1[22:0];

assign tmp_V_fu_552_p4 = {{p_Val2_s_fu_548_p1[30:23]}};

assign tmp_fu_669_p3 = r_V_fu_657_p2[32'd24];

assign trunc_ln41_fu_746_p1 = bitcast_ln41_fu_732_p1[22:0];

assign trunc_ln57_fu_842_p1 = bitcast_ln57_fu_829_p1[22:0];

assign ush_fu_637_p3 = ((isNeg_fu_620_p3[0:0] === 1'b1) ? sext_ln1311_fu_633_p1 : add_ln339_fu_614_p2);

assign xor_ln41_fu_782_p2 = (grp_fu_380_p2 ^ 1'd1);

assign xor_ln41_fu_788_p2 = (grp_fu_385_p2 ^ 1'd1);

assign xor_ln54_fu_818_p2 = (bitcast_ln54_fu_814_p1 ^ 64'd9223372036854775808);

assign xor_ln66_fu_873_p2 = (bitcast_ln66_fu_870_p1 ^ 32'd2147483648);

assign zext_ln1287_fu_653_p1 = $unsigned(sext_ln1311_1_fu_645_p1);

assign zext_ln339_fu_611_p1 = tmp_V_reg_960;

assign zext_ln662_fu_677_p1 = tmp_fu_669_p3;

assign zext_ln682_fu_607_p1 = mantissa_V_fu_598_p4;

endmodule //update
