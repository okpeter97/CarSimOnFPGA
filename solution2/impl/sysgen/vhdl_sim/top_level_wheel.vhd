-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_level_wheel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    deltaTime : IN STD_LOGIC_VECTOR (31 downto 0);
    torque : IN STD_LOGIC_VECTOR (31 downto 0);
    velocity_x : IN STD_LOGIC_VECTOR (31 downto 0);
    velocity_y : IN STD_LOGIC_VECTOR (31 downto 0);
    load : IN STD_LOGIC_VECTOR (31 downto 0);
    steeringAngle : IN STD_LOGIC_VECTOR (31 downto 0);
    slipRatio : OUT STD_LOGIC_VECTOR (31 downto 0);
    slipRatio_ap_vld : OUT STD_LOGIC;
    slipAngle : OUT STD_LOGIC_VECTOR (31 downto 0);
    slipAngle_ap_vld : OUT STD_LOGIC;
    force_x : OUT STD_LOGIC_VECTOR (31 downto 0);
    force_x_ap_vld : OUT STD_LOGIC;
    force_y : OUT STD_LOGIC_VECTOR (31 downto 0);
    force_y_ap_vld : OUT STD_LOGIC;
    angularVel : OUT STD_LOGIC_VECTOR (31 downto 0);
    angularVel_ap_vld : OUT STD_LOGIC );
end;


architecture behav of top_level_wheel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_level_wheel,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325t-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.610000,HLS_SYN_LAT=534,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=238,HLS_SYN_FF=18356,HLS_SYN_LUT=33602,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal wheel_angularVelocit : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_slipAngle : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_slipRatio : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_fz : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_fx : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_update_fu_129_ap_start : STD_LOGIC;
    signal grp_update_fu_129_ap_done : STD_LOGIC;
    signal grp_update_fu_129_ap_idle : STD_LOGIC;
    signal grp_update_fu_129_ap_ready : STD_LOGIC;
    signal grp_update_fu_129_wheel_angularVelocit_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_129_wheel_angularVelocit_o_ap_vld : STD_LOGIC;
    signal grp_update_fu_129_wheel_slipAngle : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_129_wheel_slipAngle_ap_vld : STD_LOGIC;
    signal grp_update_fu_129_wheel_slipRatio : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_129_wheel_slipRatio_ap_vld : STD_LOGIC;
    signal grp_update_fu_129_wheel_fz : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_129_wheel_fz_ap_vld : STD_LOGIC;
    signal grp_update_fu_129_wheel_fx : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_129_wheel_fx_ap_vld : STD_LOGIC;
    signal grp_update_fu_129_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        deltaTime : IN STD_LOGIC_VECTOR (31 downto 0);
        torque : IN STD_LOGIC_VECTOR (31 downto 0);
        velocity_x : IN STD_LOGIC_VECTOR (31 downto 0);
        velocity_z : IN STD_LOGIC_VECTOR (31 downto 0);
        load : IN STD_LOGIC_VECTOR (31 downto 0);
        steeringAngle : IN STD_LOGIC_VECTOR (31 downto 0);
        wheel_angularVelocit_i : IN STD_LOGIC_VECTOR (31 downto 0);
        wheel_angularVelocit_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_angularVelocit_o_ap_vld : OUT STD_LOGIC;
        wheel_slipAngle : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_slipAngle_ap_vld : OUT STD_LOGIC;
        wheel_slipRatio : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_slipRatio_ap_vld : OUT STD_LOGIC;
        wheel_fz : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_fz_ap_vld : OUT STD_LOGIC;
        wheel_fx : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_fx_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_update_fu_129 : component update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_fu_129_ap_start,
        ap_done => grp_update_fu_129_ap_done,
        ap_idle => grp_update_fu_129_ap_idle,
        ap_ready => grp_update_fu_129_ap_ready,
        deltaTime => deltaTime,
        torque => torque,
        velocity_x => velocity_x,
        velocity_z => velocity_y,
        load => load,
        steeringAngle => steeringAngle,
        wheel_angularVelocit_i => wheel_angularVelocit,
        wheel_angularVelocit_o => grp_update_fu_129_wheel_angularVelocit_o,
        wheel_angularVelocit_o_ap_vld => grp_update_fu_129_wheel_angularVelocit_o_ap_vld,
        wheel_slipAngle => grp_update_fu_129_wheel_slipAngle,
        wheel_slipAngle_ap_vld => grp_update_fu_129_wheel_slipAngle_ap_vld,
        wheel_slipRatio => grp_update_fu_129_wheel_slipRatio,
        wheel_slipRatio_ap_vld => grp_update_fu_129_wheel_slipRatio_ap_vld,
        wheel_fz => grp_update_fu_129_wheel_fz,
        wheel_fz_ap_vld => grp_update_fu_129_wheel_fz_ap_vld,
        wheel_fx => grp_update_fu_129_wheel_fx,
        wheel_fx_ap_vld => grp_update_fu_129_wheel_fx_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_update_fu_129_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_fu_129_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_update_fu_129_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_fu_129_ap_ready = ap_const_logic_1)) then 
                    grp_update_fu_129_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_update_fu_129_wheel_angularVelocit_o_ap_vld = ap_const_logic_1))) then
                wheel_angularVelocit <= grp_update_fu_129_wheel_angularVelocit_o;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_update_fu_129_wheel_fx_ap_vld = ap_const_logic_1))) then
                wheel_fx <= grp_update_fu_129_wheel_fx;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_update_fu_129_wheel_fz_ap_vld = ap_const_logic_1))) then
                wheel_fz <= grp_update_fu_129_wheel_fz;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_update_fu_129_wheel_slipAngle_ap_vld = ap_const_logic_1))) then
                wheel_slipAngle <= grp_update_fu_129_wheel_slipAngle;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_update_fu_129_wheel_slipRatio_ap_vld = ap_const_logic_1))) then
                wheel_slipRatio <= grp_update_fu_129_wheel_slipRatio;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_update_fu_129_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_update_fu_129_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    angularVel <= wheel_angularVelocit;

    angularVel_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            angularVel_ap_vld <= ap_const_logic_1;
        else 
            angularVel_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    force_x <= wheel_fx;

    force_x_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            force_x_ap_vld <= ap_const_logic_1;
        else 
            force_x_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    force_y <= wheel_fz;

    force_y_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            force_y_ap_vld <= ap_const_logic_1;
        else 
            force_y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_update_fu_129_ap_start <= grp_update_fu_129_ap_start_reg;
    slipAngle <= wheel_slipAngle;

    slipAngle_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            slipAngle_ap_vld <= ap_const_logic_1;
        else 
            slipAngle_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    slipRatio <= wheel_slipRatio;

    slipRatio_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            slipRatio_ap_vld <= ap_const_logic_1;
        else 
            slipRatio_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
