// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _top_level_wheel_HH_
#define _top_level_wheel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "update.h"

namespace ap_rtl {

struct top_level_wheel : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > deltaTime;
    sc_in< sc_lv<32> > torque;
    sc_in< sc_lv<32> > velocity_x;
    sc_in< sc_lv<32> > velocity_y;
    sc_in< sc_lv<32> > load;
    sc_in< sc_lv<32> > steeringAngle;
    sc_out< sc_lv<32> > slipRatio;
    sc_out< sc_logic > slipRatio_ap_vld;
    sc_out< sc_lv<32> > slipAngle;
    sc_out< sc_logic > slipAngle_ap_vld;
    sc_out< sc_lv<32> > force_x;
    sc_out< sc_logic > force_x_ap_vld;
    sc_out< sc_lv<32> > force_y;
    sc_out< sc_logic > force_y_ap_vld;
    sc_out< sc_lv<32> > angularVel;
    sc_out< sc_logic > angularVel_ap_vld;


    // Module declarations
    top_level_wheel(sc_module_name name);
    SC_HAS_PROCESS(top_level_wheel);

    ~top_level_wheel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    update* grp_update_fu_129;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > wheel_angularVelocit;
    sc_signal< sc_lv<32> > wheel_slipAngle;
    sc_signal< sc_lv<32> > wheel_slipRatio;
    sc_signal< sc_lv<32> > wheel_fz;
    sc_signal< sc_lv<32> > wheel_fx;
    sc_signal< sc_logic > grp_update_fu_129_ap_start;
    sc_signal< sc_logic > grp_update_fu_129_ap_done;
    sc_signal< sc_logic > grp_update_fu_129_ap_idle;
    sc_signal< sc_logic > grp_update_fu_129_ap_ready;
    sc_signal< sc_lv<32> > grp_update_fu_129_wheel_angularVelocit_o;
    sc_signal< sc_logic > grp_update_fu_129_wheel_angularVelocit_o_ap_vld;
    sc_signal< sc_lv<32> > grp_update_fu_129_wheel_slipAngle;
    sc_signal< sc_logic > grp_update_fu_129_wheel_slipAngle_ap_vld;
    sc_signal< sc_lv<32> > grp_update_fu_129_wheel_slipRatio;
    sc_signal< sc_logic > grp_update_fu_129_wheel_slipRatio_ap_vld;
    sc_signal< sc_lv<32> > grp_update_fu_129_wheel_fz;
    sc_signal< sc_logic > grp_update_fu_129_wheel_fz_ap_vld;
    sc_signal< sc_lv<32> > grp_update_fu_129_wheel_fx;
    sc_signal< sc_logic > grp_update_fu_129_wheel_fx_ap_vld;
    sc_signal< sc_logic > grp_update_fu_129_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_angularVel();
    void thread_angularVel_ap_vld();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_force_x();
    void thread_force_x_ap_vld();
    void thread_force_y();
    void thread_force_y_ap_vld();
    void thread_grp_update_fu_129_ap_start();
    void thread_slipAngle();
    void thread_slipAngle_ap_vld();
    void thread_slipRatio();
    void thread_slipRatio_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
