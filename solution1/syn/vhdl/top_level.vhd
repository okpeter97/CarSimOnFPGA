-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_level is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    en : IN STD_LOGIC_VECTOR (31 downto 0);
    pos_x : OUT STD_LOGIC_VECTOR (31 downto 0);
    pos_x_ap_vld : OUT STD_LOGIC;
    pos_z : OUT STD_LOGIC_VECTOR (31 downto 0);
    pos_z_ap_vld : OUT STD_LOGIC );
end;


architecture behav of top_level is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_level,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.409200,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=70,HLS_SYN_LUT=287,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln7_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_reg_101 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln7_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln7_fu_56_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_60_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln7_fu_70_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln7_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_50_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component top_level_fcmp_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    top_level_fcmp_32bkb_U1 : component top_level_fcmp_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => en,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_50_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln7_1_reg_106 <= icmp_ln7_1_fu_80_p2;
                icmp_ln7_reg_101 <= icmp_ln7_fu_74_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    and_ln7_fu_90_p2 <= (or_ln7_fu_86_p2 and grp_fu_50_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln7_fu_56_p1 <= en;
    icmp_ln7_1_fu_80_p2 <= "1" when (trunc_ln7_fu_70_p1 = ap_const_lv23_0) else "0";
    icmp_ln7_fu_74_p2 <= "0" when (tmp_fu_60_p4 = ap_const_lv8_FF) else "1";
    or_ln7_fu_86_p2 <= (icmp_ln7_reg_101 or icmp_ln7_1_reg_106);
    pos_x <= ap_const_lv32_0;

    pos_x_ap_vld_assign_proc : process(ap_CS_fsm_state2, and_ln7_fu_90_p2)
    begin
        if (((ap_const_lv1_0 = and_ln7_fu_90_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            pos_x_ap_vld <= ap_const_logic_1;
        else 
            pos_x_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    pos_z <= ap_const_lv32_0;

    pos_z_ap_vld_assign_proc : process(ap_CS_fsm_state2, and_ln7_fu_90_p2)
    begin
        if (((ap_const_lv1_0 = and_ln7_fu_90_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            pos_z_ap_vld <= ap_const_logic_1;
        else 
            pos_z_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_60_p4 <= bitcast_ln7_fu_56_p1(30 downto 23);
    trunc_ln7_fu_70_p1 <= bitcast_ln7_fu_56_p1(23 - 1 downto 0);
end behav;
