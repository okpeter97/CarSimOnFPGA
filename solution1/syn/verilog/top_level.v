// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_level,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.409200,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=70,HLS_SYN_LUT=287,HLS_VERSION=2019_1}" *)

module top_level (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        en,
        pos_x,
        pos_x_ap_vld,
        pos_z,
        pos_z_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] en;
output  [31:0] pos_x;
output   pos_x_ap_vld;
output  [31:0] pos_z;
output   pos_z_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pos_x_ap_vld;
reg pos_z_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln7_fu_74_p2;
reg   [0:0] icmp_ln7_reg_101;
wire   [0:0] icmp_ln7_1_fu_80_p2;
reg   [0:0] icmp_ln7_1_reg_106;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln7_fu_90_p2;
wire   [31:0] bitcast_ln7_fu_56_p1;
wire   [7:0] tmp_fu_60_p4;
wire   [22:0] trunc_ln7_fu_70_p1;
wire   [0:0] or_ln7_fu_86_p2;
wire   [0:0] grp_fu_50_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

top_level_fcmp_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
top_level_fcmp_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(en),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_50_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln7_1_reg_106 <= icmp_ln7_1_fu_80_p2;
        icmp_ln7_reg_101 <= icmp_ln7_fu_74_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln7_fu_90_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        pos_x_ap_vld = 1'b1;
    end else begin
        pos_x_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln7_fu_90_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        pos_z_ap_vld = 1'b1;
    end else begin
        pos_z_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln7_fu_90_p2 = (or_ln7_fu_86_p2 & grp_fu_50_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign bitcast_ln7_fu_56_p1 = en;

assign icmp_ln7_1_fu_80_p2 = ((trunc_ln7_fu_70_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_74_p2 = ((tmp_fu_60_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln7_fu_86_p2 = (icmp_ln7_reg_101 | icmp_ln7_1_reg_106);

assign pos_x = 32'd0;

assign pos_z = 32'd0;

assign tmp_fu_60_p4 = {{bitcast_ln7_fu_56_p1[30:23]}};

assign trunc_ln7_fu_70_p1 = bitcast_ln7_fu_56_p1[22:0];

endmodule //top_level
