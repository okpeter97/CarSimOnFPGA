// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top_level.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top_level::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic top_level::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<25> top_level::ap_ST_fsm_state1 = "1";
const sc_lv<25> top_level::ap_ST_fsm_state2 = "10";
const sc_lv<25> top_level::ap_ST_fsm_state3 = "100";
const sc_lv<25> top_level::ap_ST_fsm_state4 = "1000";
const sc_lv<25> top_level::ap_ST_fsm_state5 = "10000";
const sc_lv<25> top_level::ap_ST_fsm_state6 = "100000";
const sc_lv<25> top_level::ap_ST_fsm_state7 = "1000000";
const sc_lv<25> top_level::ap_ST_fsm_state8 = "10000000";
const sc_lv<25> top_level::ap_ST_fsm_state9 = "100000000";
const sc_lv<25> top_level::ap_ST_fsm_state10 = "1000000000";
const sc_lv<25> top_level::ap_ST_fsm_state11 = "10000000000";
const sc_lv<25> top_level::ap_ST_fsm_state12 = "100000000000";
const sc_lv<25> top_level::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<25> top_level::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<32> top_level::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool top_level::ap_const_boolean_1 = true;
const sc_lv<32> top_level::ap_const_lv32_B = "1011";
const sc_lv<32> top_level::ap_const_lv32_C = "1100";
const sc_lv<32> top_level::ap_const_lv32_E = "1110";
const bool top_level::ap_const_boolean_0 = false;
const sc_lv<32> top_level::ap_const_lv32_F = "1111";
const sc_lv<32> top_level::ap_const_lv32_10 = "10000";
const sc_lv<32> top_level::ap_const_lv32_13 = "10011";
const sc_lv<32> top_level::ap_const_lv32_14 = "10100";
const sc_lv<32> top_level::ap_const_lv32_D = "1101";
const sc_lv<1> top_level::ap_const_lv1_1 = "1";
const sc_lv<1> top_level::ap_const_lv1_0 = "0";
const sc_lv<32> top_level::ap_const_lv32_18 = "11000";
const sc_lv<32> top_level::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const sc_lv<32> top_level::ap_const_lv32_40A00000 = "1000000101000000000000000000000";
const sc_lv<32> top_level::ap_const_lv32_11 = "10001";
const sc_lv<32> top_level::ap_const_lv32_12 = "10010";
const sc_lv<32> top_level::ap_const_lv32_15 = "10101";
const sc_lv<32> top_level::ap_const_lv32_16 = "10110";
const sc_lv<32> top_level::ap_const_lv32_17 = "10111";

top_level::top_level(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_sin_or_cos_double_s_fu_93 = new sin_or_cos_double_s("grp_sin_or_cos_double_s_fu_93");
    grp_sin_or_cos_double_s_fu_93->ap_clk(ap_clk);
    grp_sin_or_cos_double_s_fu_93->ap_rst(ap_rst);
    grp_sin_or_cos_double_s_fu_93->ap_start(grp_sin_or_cos_double_s_fu_93_ap_start);
    grp_sin_or_cos_double_s_fu_93->ap_done(grp_sin_or_cos_double_s_fu_93_ap_done);
    grp_sin_or_cos_double_s_fu_93->ap_idle(grp_sin_or_cos_double_s_fu_93_ap_idle);
    grp_sin_or_cos_double_s_fu_93->ap_ready(grp_sin_or_cos_double_s_fu_93_ap_ready);
    grp_sin_or_cos_double_s_fu_93->t_in(x_assign_reg_205);
    grp_sin_or_cos_double_s_fu_93->do_cos(grp_sin_or_cos_double_s_fu_93_do_cos);
    grp_sin_or_cos_double_s_fu_93->ap_return(grp_sin_or_cos_double_s_fu_93_ap_return);
    grp_sin_or_cos_double_s_fu_112 = new sin_or_cos_double_s("grp_sin_or_cos_double_s_fu_112");
    grp_sin_or_cos_double_s_fu_112->ap_clk(ap_clk);
    grp_sin_or_cos_double_s_fu_112->ap_rst(ap_rst);
    grp_sin_or_cos_double_s_fu_112->ap_start(grp_sin_or_cos_double_s_fu_112_ap_start);
    grp_sin_or_cos_double_s_fu_112->ap_done(grp_sin_or_cos_double_s_fu_112_ap_done);
    grp_sin_or_cos_double_s_fu_112->ap_idle(grp_sin_or_cos_double_s_fu_112_ap_idle);
    grp_sin_or_cos_double_s_fu_112->ap_ready(grp_sin_or_cos_double_s_fu_112_ap_ready);
    grp_sin_or_cos_double_s_fu_112->t_in(x_assign_reg_205);
    grp_sin_or_cos_double_s_fu_112->do_cos(grp_sin_or_cos_double_s_fu_112_do_cos);
    grp_sin_or_cos_double_s_fu_112->ap_return(grp_sin_or_cos_double_s_fu_112_ap_return);
    top_level_fadd_32qcK_U34 = new top_level_fadd_32qcK<1,5,32,32,32>("top_level_fadd_32qcK_U34");
    top_level_fadd_32qcK_U34->clk(ap_clk);
    top_level_fadd_32qcK_U34->reset(ap_rst);
    top_level_fadd_32qcK_U34->din0(wheel_angularVelocit);
    top_level_fadd_32qcK_U34->din1(tmp_2_i_reg_242);
    top_level_fadd_32qcK_U34->ce(ap_var_for_const0);
    top_level_fadd_32qcK_U34->dout(grp_fu_131_p2);
    top_level_fadd_32qcK_U35 = new top_level_fadd_32qcK<1,5,32,32,32>("top_level_fadd_32qcK_U35");
    top_level_fadd_32qcK_U35->clk(ap_clk);
    top_level_fadd_32qcK_U35->reset(ap_rst);
    top_level_fadd_32qcK_U35->din0(tmp_4_i_reg_247);
    top_level_fadd_32qcK_U35->din1(tmp_6_i_reg_253);
    top_level_fadd_32qcK_U35->ce(ap_var_for_const0);
    top_level_fadd_32qcK_U35->dout(grp_fu_136_p2);
    top_level_fadd_32qcK_U36 = new top_level_fadd_32qcK<1,5,32,32,32>("top_level_fadd_32qcK_U36");
    top_level_fadd_32qcK_U36->clk(ap_clk);
    top_level_fadd_32qcK_U36->reset(ap_rst);
    top_level_fadd_32qcK_U36->din0(tmp_7_i_reg_258);
    top_level_fadd_32qcK_U36->din1(tmp_4_i_reg_247);
    top_level_fadd_32qcK_U36->ce(ap_var_for_const0);
    top_level_fadd_32qcK_U36->dout(grp_fu_141_p2);
    top_level_fmul_32rcU_U37 = new top_level_fmul_32rcU<1,4,32,32,32>("top_level_fmul_32rcU_U37");
    top_level_fmul_32rcU_U37->clk(ap_clk);
    top_level_fmul_32rcU_U37->reset(ap_rst);
    top_level_fmul_32rcU_U37->din0(tmp_1_i_reg_232);
    top_level_fmul_32rcU_U37->din1(deltaTime);
    top_level_fmul_32rcU_U37->ce(ap_var_for_const0);
    top_level_fmul_32rcU_U37->dout(grp_fu_146_p2);
    top_level_fmul_32rcU_U38 = new top_level_fmul_32rcU<1,4,32,32,32>("top_level_fmul_32rcU_U38");
    top_level_fmul_32rcU_U38->clk(ap_clk);
    top_level_fmul_32rcU_U38->reset(ap_rst);
    top_level_fmul_32rcU_U38->din0(cos_steer_reg_221);
    top_level_fmul_32rcU_U38->din1(ap_var_for_const1);
    top_level_fmul_32rcU_U38->ce(ap_var_for_const0);
    top_level_fmul_32rcU_U38->dout(grp_fu_151_p2);
    top_level_fmul_32rcU_U39 = new top_level_fmul_32rcU<1,4,32,32,32>("top_level_fmul_32rcU_U39");
    top_level_fmul_32rcU_U39->clk(ap_clk);
    top_level_fmul_32rcU_U39->reset(ap_rst);
    top_level_fmul_32rcU_U39->din0(sin_steer_reg_226);
    top_level_fmul_32rcU_U39->din1(ap_var_for_const1);
    top_level_fmul_32rcU_U39->ce(ap_var_for_const0);
    top_level_fmul_32rcU_U39->dout(grp_fu_156_p2);
    top_level_fmul_32rcU_U40 = new top_level_fmul_32rcU<1,4,32,32,32>("top_level_fmul_32rcU_U40");
    top_level_fmul_32rcU_U40->clk(ap_clk);
    top_level_fmul_32rcU_U40->reset(ap_rst);
    top_level_fmul_32rcU_U40->din0(sin_steer_reg_226);
    top_level_fmul_32rcU_U40->din1(ap_var_for_const2);
    top_level_fmul_32rcU_U40->ce(ap_var_for_const0);
    top_level_fmul_32rcU_U40->dout(grp_fu_161_p2);
    top_level_fdiv_32sc4_U41 = new top_level_fdiv_32sc4<1,16,32,32,32>("top_level_fdiv_32sc4_U41");
    top_level_fdiv_32sc4_U41->clk(ap_clk);
    top_level_fdiv_32sc4_U41->reset(ap_rst);
    top_level_fdiv_32sc4_U41->din0(torque);
    top_level_fdiv_32sc4_U41->din1(ap_var_for_const3);
    top_level_fdiv_32sc4_U41->ce(grp_fu_166_ce);
    top_level_fdiv_32sc4_U41->dout(grp_fu_166_p2);
    top_level_fptrunctde_U42 = new top_level_fptrunctde<1,2,64,32>("top_level_fptrunctde_U42");
    top_level_fptrunctde_U42->clk(ap_clk);
    top_level_fptrunctde_U42->reset(ap_rst);
    top_level_fptrunctde_U42->din0(grp_sin_or_cos_double_s_fu_93_ap_return);
    top_level_fptrunctde_U42->ce(grp_fu_172_ce);
    top_level_fptrunctde_U42->dout(grp_fu_172_p1);
    top_level_fptrunctde_U43 = new top_level_fptrunctde<1,2,64,32>("top_level_fptrunctde_U43");
    top_level_fptrunctde_U43->clk(ap_clk);
    top_level_fptrunctde_U43->reset(ap_rst);
    top_level_fptrunctde_U43->din0(grp_sin_or_cos_double_s_fu_112_ap_return);
    top_level_fptrunctde_U43->ce(grp_fu_176_ce);
    top_level_fptrunctde_U43->dout(grp_fu_176_p1);
    top_level_fpext_3udo_U44 = new top_level_fpext_3udo<1,2,32,64>("top_level_fpext_3udo_U44");
    top_level_fpext_3udo_U44->clk(ap_clk);
    top_level_fpext_3udo_U44->reset(ap_rst);
    top_level_fpext_3udo_U44->din0(steeringAngle);
    top_level_fpext_3udo_U44->ce(ap_var_for_const0);
    top_level_fpext_3udo_U44->dout(grp_fu_180_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_angularVel);
    sensitive << ( grp_fu_131_p2 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_angularVel_ap_vld);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state15_on_subcall_done);
    sensitive << ( grp_sin_or_cos_double_s_fu_93_ap_done );
    sensitive << ( grp_sin_or_cos_double_s_fu_112_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_force_x);
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( grp_fu_136_p2 );

    SC_METHOD(thread_force_x_ap_vld);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_force_z);
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( grp_fu_141_p2 );

    SC_METHOD(thread_force_z_ap_vld);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_grp_fu_166_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_block_state15_on_subcall_done );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_grp_fu_172_ce);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_block_state15_on_subcall_done );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_grp_fu_176_ce);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_block_state15_on_subcall_done );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_grp_sin_or_cos_double_s_fu_112_ap_start);
    sensitive << ( grp_sin_or_cos_double_s_fu_112_ap_start_reg );

    SC_METHOD(thread_grp_sin_or_cos_double_s_fu_112_do_cos);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_grp_sin_or_cos_double_s_fu_93_ap_start);
    sensitive << ( grp_sin_or_cos_double_s_fu_93_ap_start_reg );

    SC_METHOD(thread_grp_sin_or_cos_double_s_fu_93_do_cos);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_block_state15_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    ap_CS_fsm = "0000000000000000000000001";
    wheel_angularVelocit = "00000000000000000000000000000000";
    grp_sin_or_cos_double_s_fu_93_ap_start_reg = SC_LOGIC_0;
    grp_sin_or_cos_double_s_fu_112_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_level_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, deltaTime, "(port)deltaTime");
    sc_trace(mVcdFile, torque, "(port)torque");
    sc_trace(mVcdFile, velocity_x, "(port)velocity_x");
    sc_trace(mVcdFile, velocity_z, "(port)velocity_z");
    sc_trace(mVcdFile, load, "(port)load");
    sc_trace(mVcdFile, steeringAngle, "(port)steeringAngle");
    sc_trace(mVcdFile, force_x, "(port)force_x");
    sc_trace(mVcdFile, force_x_ap_vld, "(port)force_x_ap_vld");
    sc_trace(mVcdFile, force_z, "(port)force_z");
    sc_trace(mVcdFile, force_z_ap_vld, "(port)force_z_ap_vld");
    sc_trace(mVcdFile, angularVel, "(port)angularVel");
    sc_trace(mVcdFile, angularVel_ap_vld, "(port)angularVel_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, wheel_angularVelocit, "wheel_angularVelocit");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_180_p1, "grp_fu_180_p1");
    sc_trace(mVcdFile, x_assign_reg_205, "x_assign_reg_205");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_93_ap_return, "grp_sin_or_cos_double_s_fu_93_ap_return");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_93_ap_ready, "grp_sin_or_cos_double_s_fu_93_ap_ready");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_93_ap_done, "grp_sin_or_cos_double_s_fu_93_ap_done");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_112_ap_ready, "grp_sin_or_cos_double_s_fu_112_ap_ready");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_112_ap_done, "grp_sin_or_cos_double_s_fu_112_ap_done");
    sc_trace(mVcdFile, ap_block_state15_on_subcall_done, "ap_block_state15_on_subcall_done");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_112_ap_return, "grp_sin_or_cos_double_s_fu_112_ap_return");
    sc_trace(mVcdFile, grp_fu_172_p1, "grp_fu_172_p1");
    sc_trace(mVcdFile, cos_steer_reg_221, "cos_steer_reg_221");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_fu_176_p1, "grp_fu_176_p1");
    sc_trace(mVcdFile, sin_steer_reg_226, "sin_steer_reg_226");
    sc_trace(mVcdFile, grp_fu_166_p2, "grp_fu_166_p2");
    sc_trace(mVcdFile, tmp_1_i_reg_232, "tmp_1_i_reg_232");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_fu_146_p2, "grp_fu_146_p2");
    sc_trace(mVcdFile, tmp_2_i_reg_242, "tmp_2_i_reg_242");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_151_p2, "grp_fu_151_p2");
    sc_trace(mVcdFile, tmp_4_i_reg_247, "tmp_4_i_reg_247");
    sc_trace(mVcdFile, grp_fu_156_p2, "grp_fu_156_p2");
    sc_trace(mVcdFile, tmp_6_i_reg_253, "tmp_6_i_reg_253");
    sc_trace(mVcdFile, grp_fu_161_p2, "grp_fu_161_p2");
    sc_trace(mVcdFile, tmp_7_i_reg_258, "tmp_7_i_reg_258");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_93_ap_start, "grp_sin_or_cos_double_s_fu_93_ap_start");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_93_ap_idle, "grp_sin_or_cos_double_s_fu_93_ap_idle");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_93_do_cos, "grp_sin_or_cos_double_s_fu_93_do_cos");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_112_ap_start, "grp_sin_or_cos_double_s_fu_112_ap_start");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_112_ap_idle, "grp_sin_or_cos_double_s_fu_112_ap_idle");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_112_do_cos, "grp_sin_or_cos_double_s_fu_112_do_cos");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_93_ap_start_reg, "grp_sin_or_cos_double_s_fu_93_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_112_ap_start_reg, "grp_sin_or_cos_double_s_fu_112_ap_start_reg");
    sc_trace(mVcdFile, grp_fu_131_p2, "grp_fu_131_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, grp_fu_136_p2, "grp_fu_136_p2");
    sc_trace(mVcdFile, grp_fu_141_p2, "grp_fu_141_p2");
    sc_trace(mVcdFile, grp_fu_166_ce, "grp_fu_166_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, grp_fu_172_ce, "grp_fu_172_ce");
    sc_trace(mVcdFile, grp_fu_176_ce, "grp_fu_176_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("top_level.hdltvin.dat");
    mHdltvoutHandle.open("top_level.hdltvout.dat");
}

top_level::~top_level() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_sin_or_cos_double_s_fu_93;
    delete grp_sin_or_cos_double_s_fu_112;
    delete top_level_fadd_32qcK_U34;
    delete top_level_fadd_32qcK_U35;
    delete top_level_fadd_32qcK_U36;
    delete top_level_fmul_32rcU_U37;
    delete top_level_fmul_32rcU_U38;
    delete top_level_fmul_32rcU_U39;
    delete top_level_fmul_32rcU_U40;
    delete top_level_fdiv_32sc4_U41;
    delete top_level_fptrunctde_U42;
    delete top_level_fptrunctde_U43;
    delete top_level_fpext_3udo_U44;
}

void top_level::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void top_level::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void top_level::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_80000000;
}

void top_level::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv32_40A00000;
}

void top_level::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sin_or_cos_double_s_fu_112_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
            grp_sin_or_cos_double_s_fu_112_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sin_or_cos_double_s_fu_112_ap_ready.read())) {
            grp_sin_or_cos_double_s_fu_112_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sin_or_cos_double_s_fu_93_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
            grp_sin_or_cos_double_s_fu_93_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sin_or_cos_double_s_fu_93_ap_ready.read())) {
            grp_sin_or_cos_double_s_fu_93_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cos_steer_reg_221 = grp_fu_172_p1.read();
        sin_steer_reg_226 = grp_fu_176_p1.read();
        tmp_1_i_reg_232 = grp_fu_166_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        tmp_2_i_reg_242 = grp_fu_146_p2.read();
        tmp_4_i_reg_247 = grp_fu_151_p2.read();
        tmp_6_i_reg_253 = grp_fu_156_p2.read();
        tmp_7_i_reg_258 = grp_fu_161_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        wheel_angularVelocit = grp_fu_131_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        x_assign_reg_205 = grp_fu_180_p1.read();
    }
}

void top_level::thread_angularVel() {
    angularVel = grp_fu_131_p2.read();
}

void top_level::thread_angularVel_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        angularVel_ap_vld = ap_const_logic_1;
    } else {
        angularVel_ap_vld = ap_const_logic_0;
    }
}

void top_level::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void top_level::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void top_level::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void top_level::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void top_level::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void top_level::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void top_level::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void top_level::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void top_level::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void top_level::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void top_level::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void top_level::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void top_level::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void top_level::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void top_level::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void top_level::thread_ap_block_state15_on_subcall_done() {
    ap_block_state15_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_sin_or_cos_double_s_fu_93_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_sin_or_cos_double_s_fu_112_ap_done.read()));
}

void top_level::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void top_level::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void top_level::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void top_level::thread_force_x() {
    force_x = grp_fu_136_p2.read();
}

void top_level::thread_force_x_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        force_x_ap_vld = ap_const_logic_1;
    } else {
        force_x_ap_vld = ap_const_logic_0;
    }
}

void top_level::thread_force_z() {
    force_z = grp_fu_141_p2.read();
}

void top_level::thread_force_z_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        force_z_ap_vld = ap_const_logic_1;
    } else {
        force_z_ap_vld = ap_const_logic_0;
    }
}

void top_level::thread_grp_fu_166_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_on_subcall_done.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        grp_fu_166_ce = ap_const_logic_0;
    } else {
        grp_fu_166_ce = ap_const_logic_1;
    }
}

void top_level::thread_grp_fu_172_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(ap_block_state15_on_subcall_done.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        grp_fu_172_ce = ap_const_logic_1;
    } else {
        grp_fu_172_ce = ap_const_logic_0;
    }
}

void top_level::thread_grp_fu_176_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(ap_block_state15_on_subcall_done.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        grp_fu_176_ce = ap_const_logic_1;
    } else {
        grp_fu_176_ce = ap_const_logic_0;
    }
}

void top_level::thread_grp_sin_or_cos_double_s_fu_112_ap_start() {
    grp_sin_or_cos_double_s_fu_112_ap_start = grp_sin_or_cos_double_s_fu_112_ap_start_reg.read();
}

void top_level::thread_grp_sin_or_cos_double_s_fu_112_do_cos() {
    grp_sin_or_cos_double_s_fu_112_do_cos =  (sc_logic) (ap_const_lv1_0[0]);
}

void top_level::thread_grp_sin_or_cos_double_s_fu_93_ap_start() {
    grp_sin_or_cos_double_s_fu_93_ap_start = grp_sin_or_cos_double_s_fu_93_ap_start_reg.read();
}

void top_level::thread_grp_sin_or_cos_double_s_fu_93_do_cos() {
    grp_sin_or_cos_double_s_fu_93_do_cos =  (sc_logic) (ap_const_lv1_1[0]);
}

void top_level::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_block_state15_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<25>) ("XXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void top_level::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"deltaTime\" :  \"" << deltaTime.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"torque\" :  \"" << torque.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"velocity_x\" :  \"" << velocity_x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"velocity_z\" :  \"" << velocity_z.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"load\" :  \"" << load.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"steeringAngle\" :  \"" << steeringAngle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"force_x\" :  \"" << force_x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"force_x_ap_vld\" :  \"" << force_x_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"force_z\" :  \"" << force_z.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"force_z_ap_vld\" :  \"" << force_z_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"angularVel\" :  \"" << angularVel.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"angularVel_ap_vld\" :  \"" << angularVel_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

