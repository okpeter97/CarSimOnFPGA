// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top_level.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top_level::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic top_level::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> top_level::ap_ST_fsm_state1 = "1";
const sc_lv<2> top_level::ap_ST_fsm_state2 = "10";
const sc_lv<32> top_level::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> top_level::ap_const_lv32_1 = "1";
const sc_lv<1> top_level::ap_const_lv1_0 = "0";
const sc_lv<32> top_level::ap_const_lv32_17 = "10111";
const sc_lv<32> top_level::ap_const_lv32_1E = "11110";
const sc_lv<8> top_level::ap_const_lv8_FF = "11111111";
const sc_lv<23> top_level::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> top_level::ap_const_lv5_1 = "1";
const bool top_level::ap_const_boolean_1 = true;

top_level::top_level(sc_module_name name) : sc_module(name), mVcdFile(0) {
    top_level_fcmp_32bkb_U1 = new top_level_fcmp_32bkb<1,2,32,32,1>("top_level_fcmp_32bkb_U1");
    top_level_fcmp_32bkb_U1->clk(ap_clk);
    top_level_fcmp_32bkb_U1->reset(ap_rst);
    top_level_fcmp_32bkb_U1->din0(en);
    top_level_fcmp_32bkb_U1->din1(ap_var_for_const0);
    top_level_fcmp_32bkb_U1->ce(ap_var_for_const1);
    top_level_fcmp_32bkb_U1->opcode(ap_var_for_const2);
    top_level_fcmp_32bkb_U1->dout(grp_fu_50_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln7_fu_90_p2);
    sensitive << ( or_ln7_fu_86_p2 );
    sensitive << ( grp_fu_50_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_bitcast_ln7_fu_56_p1);
    sensitive << ( en );

    SC_METHOD(thread_icmp_ln7_1_fu_80_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( trunc_ln7_fu_70_p1 );

    SC_METHOD(thread_icmp_ln7_fu_74_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_60_p4 );

    SC_METHOD(thread_or_ln7_fu_86_p2);
    sensitive << ( icmp_ln7_reg_101 );
    sensitive << ( icmp_ln7_1_reg_106 );

    SC_METHOD(thread_pos_x);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( and_ln7_fu_90_p2 );

    SC_METHOD(thread_pos_x_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( and_ln7_fu_90_p2 );

    SC_METHOD(thread_pos_z);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( and_ln7_fu_90_p2 );

    SC_METHOD(thread_pos_z_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( and_ln7_fu_90_p2 );

    SC_METHOD(thread_tmp_fu_60_p4);
    sensitive << ( bitcast_ln7_fu_56_p1 );

    SC_METHOD(thread_trunc_ln7_fu_70_p1);
    sensitive << ( bitcast_ln7_fu_56_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_level_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, en, "(port)en");
    sc_trace(mVcdFile, pos_x, "(port)pos_x");
    sc_trace(mVcdFile, pos_x_ap_vld, "(port)pos_x_ap_vld");
    sc_trace(mVcdFile, pos_z, "(port)pos_z");
    sc_trace(mVcdFile, pos_z_ap_vld, "(port)pos_z_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, icmp_ln7_fu_74_p2, "icmp_ln7_fu_74_p2");
    sc_trace(mVcdFile, icmp_ln7_reg_101, "icmp_ln7_reg_101");
    sc_trace(mVcdFile, icmp_ln7_1_fu_80_p2, "icmp_ln7_1_fu_80_p2");
    sc_trace(mVcdFile, icmp_ln7_1_reg_106, "icmp_ln7_1_reg_106");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, and_ln7_fu_90_p2, "and_ln7_fu_90_p2");
    sc_trace(mVcdFile, bitcast_ln7_fu_56_p1, "bitcast_ln7_fu_56_p1");
    sc_trace(mVcdFile, tmp_fu_60_p4, "tmp_fu_60_p4");
    sc_trace(mVcdFile, trunc_ln7_fu_70_p1, "trunc_ln7_fu_70_p1");
    sc_trace(mVcdFile, or_ln7_fu_86_p2, "or_ln7_fu_86_p2");
    sc_trace(mVcdFile, grp_fu_50_p2, "grp_fu_50_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("top_level.hdltvin.dat");
    mHdltvoutHandle.open("top_level.hdltvout.dat");
}

top_level::~top_level() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete top_level_fcmp_32bkb_U1;
}

void top_level::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void top_level::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void top_level::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_1;
}

void top_level::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp_ln7_1_reg_106 = icmp_ln7_1_fu_80_p2.read();
        icmp_ln7_reg_101 = icmp_ln7_fu_74_p2.read();
    }
}

void top_level::thread_and_ln7_fu_90_p2() {
    and_ln7_fu_90_p2 = (or_ln7_fu_86_p2.read() & grp_fu_50_p2.read());
}

void top_level::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void top_level::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void top_level::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void top_level::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void top_level::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void top_level::thread_bitcast_ln7_fu_56_p1() {
    bitcast_ln7_fu_56_p1 = en.read();
}

void top_level::thread_icmp_ln7_1_fu_80_p2() {
    icmp_ln7_1_fu_80_p2 = (!trunc_ln7_fu_70_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln7_fu_70_p1.read() == ap_const_lv23_0);
}

void top_level::thread_icmp_ln7_fu_74_p2() {
    icmp_ln7_fu_74_p2 = (!tmp_fu_60_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_60_p4.read() != ap_const_lv8_FF);
}

void top_level::thread_or_ln7_fu_86_p2() {
    or_ln7_fu_86_p2 = (icmp_ln7_1_reg_106.read() | icmp_ln7_reg_101.read());
}

void top_level::thread_pos_x() {
    pos_x = ap_const_lv32_0;
}

void top_level::thread_pos_x_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(and_ln7_fu_90_p2.read(), ap_const_lv1_0))) {
        pos_x_ap_vld = ap_const_logic_1;
    } else {
        pos_x_ap_vld = ap_const_logic_0;
    }
}

void top_level::thread_pos_z() {
    pos_z = ap_const_lv32_0;
}

void top_level::thread_pos_z_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(and_ln7_fu_90_p2.read(), ap_const_lv1_0))) {
        pos_z_ap_vld = ap_const_logic_1;
    } else {
        pos_z_ap_vld = ap_const_logic_0;
    }
}

void top_level::thread_tmp_fu_60_p4() {
    tmp_fu_60_p4 = bitcast_ln7_fu_56_p1.read().range(30, 23);
}

void top_level::thread_trunc_ln7_fu_70_p1() {
    trunc_ln7_fu_70_p1 = bitcast_ln7_fu_56_p1.read().range(23-1, 0);
}

void top_level::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void top_level::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"en\" :  \"" << en.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pos_x\" :  \"" << pos_x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pos_x_ap_vld\" :  \"" << pos_x_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pos_z\" :  \"" << pos_z.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pos_z_ap_vld\" :  \"" << pos_z_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

