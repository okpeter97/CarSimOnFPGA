// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top_level_wheelSimWithMass.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top_level_wheelSimWithMass::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic top_level_wheelSimWithMass::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> top_level_wheelSimWithMass::ap_ST_fsm_state1 = "1";
const sc_lv<5> top_level_wheelSimWithMass::ap_ST_fsm_state2 = "10";
const sc_lv<5> top_level_wheelSimWithMass::ap_ST_fsm_state3 = "100";
const sc_lv<5> top_level_wheelSimWithMass::ap_ST_fsm_state4 = "1000";
const sc_lv<5> top_level_wheelSimWithMass::ap_ST_fsm_state5 = "10000";
const sc_lv<32> top_level_wheelSimWithMass::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> top_level_wheelSimWithMass::ap_const_lv1_0 = "0";
const sc_lv<32> top_level_wheelSimWithMass::ap_const_lv32_2 = "10";
const sc_lv<32> top_level_wheelSimWithMass::ap_const_lv32_3 = "11";
const sc_lv<1> top_level_wheelSimWithMass::ap_const_lv1_1 = "1";
const sc_lv<32> top_level_wheelSimWithMass::ap_const_lv32_43FA0000 = "1000011111110100000000000000000";
const sc_lv<32> top_level_wheelSimWithMass::ap_const_lv32_3E99999A = "111110100110011001100110011010";
const sc_lv<32> top_level_wheelSimWithMass::ap_const_lv32_40A00000 = "1000000101000000000000000000000";
const sc_lv<32> top_level_wheelSimWithMass::ap_const_lv32_4 = "100";
const sc_lv<32> top_level_wheelSimWithMass::ap_const_lv32_1 = "1";
const bool top_level_wheelSimWithMass::ap_const_boolean_1 = true;

top_level_wheelSimWithMass::top_level_wheelSimWithMass(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_update_fu_144 = new update("grp_update_fu_144");
    grp_update_fu_144->ap_clk(ap_clk);
    grp_update_fu_144->ap_rst(ap_rst);
    grp_update_fu_144->ap_start(grp_update_fu_144_ap_start);
    grp_update_fu_144->ap_done(grp_update_fu_144_ap_done);
    grp_update_fu_144->ap_idle(grp_update_fu_144_ap_idle);
    grp_update_fu_144->ap_ready(grp_update_fu_144_ap_ready);
    grp_update_fu_144->deltaTime(deltaTime);
    grp_update_fu_144->torque(torque);
    grp_update_fu_144->steeringAngle(steeringAngle);
    grp_update_fu_144->wheel_vel_x_i(wheel_vel_x);
    grp_update_fu_144->wheel_vel_x_o(grp_update_fu_144_wheel_vel_x_o);
    grp_update_fu_144->wheel_vel_x_o_ap_vld(grp_update_fu_144_wheel_vel_x_o_ap_vld);
    grp_update_fu_144->wheel_angularVelocit_i(wheel_angularVelocit);
    grp_update_fu_144->wheel_angularVelocit_o(grp_update_fu_144_wheel_angularVelocit_o);
    grp_update_fu_144->wheel_angularVelocit_o_ap_vld(grp_update_fu_144_wheel_angularVelocit_o_ap_vld);
    grp_update_fu_144->wheel_radius(wheel_radius);
    grp_update_fu_144->wheel_slipAngle(grp_update_fu_144_wheel_slipAngle);
    grp_update_fu_144->wheel_slipAngle_ap_vld(grp_update_fu_144_wheel_slipAngle_ap_vld);
    grp_update_fu_144->wheel_slipRatio(grp_update_fu_144_wheel_slipRatio);
    grp_update_fu_144->wheel_slipRatio_ap_vld(grp_update_fu_144_wheel_slipRatio_ap_vld);
    grp_update_fu_144->wheel_inertia(wheel_inertia);
    grp_update_fu_144->wheel_mass(wheel_mass);
    grp_update_fu_144->wheel_pos_x_i(wheel_pos_x);
    grp_update_fu_144->wheel_pos_x_o(grp_update_fu_144_wheel_pos_x_o);
    grp_update_fu_144->wheel_pos_x_o_ap_vld(grp_update_fu_144_wheel_pos_x_o_ap_vld);
    grp_update_fu_144->wheel_fz(grp_update_fu_144_wheel_fz);
    grp_update_fu_144->wheel_fz_ap_vld(grp_update_fu_144_wheel_fz_ap_vld);
    grp_update_fu_144->wheel_fx(grp_update_fu_144_wheel_fx);
    grp_update_fu_144->wheel_fx_ap_vld(grp_update_fu_144_wheel_fx_ap_vld);
    top_level_wheelSircU_U76 = new top_level_wheelSircU<1,2,32,32,32>("top_level_wheelSircU_U76");
    top_level_wheelSircU_U76->clk(ap_clk);
    top_level_wheelSircU_U76->reset(ap_rst);
    top_level_wheelSircU_U76->din0(initVel);
    top_level_wheelSircU_U76->din1(ap_var_for_const0);
    top_level_wheelSircU_U76->ce(ap_var_for_const1);
    top_level_wheelSircU_U76->dout(grp_fu_185_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_angularVel);
    sensitive << ( wheel_angularVelocit );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_angularVel_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_force_x);
    sensitive << ( wheel_fx );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_force_x_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_force_y);
    sensitive << ( wheel_fz );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_force_y_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_update_fu_144_ap_start);
    sensitive << ( grp_update_fu_144_ap_start_reg );

    SC_METHOD(thread_guard_variable_for_t_1_load_fu_191_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( guard_variable_for_t );

    SC_METHOD(thread_slipAngle);
    sensitive << ( wheel_slipAngle );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_slipAngle_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_slipRatio);
    sensitive << ( wheel_slipRatio );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_slipRatio_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_vel_x);
    sensitive << ( wheel_vel_x );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_vel_x_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_update_fu_144_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( guard_variable_for_t_1_load_fu_191_p1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00001";
    guard_variable_for_t = "0";
    wheel_mass = "00000000000000000000000000000000";
    wheel_radius = "00000000000000000000000000000000";
    wheel_inertia = "00000000000000000000000000000000";
    wheel_slipRatio = "00000000000000000000000000000000";
    wheel_slipAngle = "00000000000000000000000000000000";
    wheel_fx = "00000000000000000000000000000000";
    wheel_fz = "00000000000000000000000000000000";
    wheel_pos_x = "00000000000000000000000000000000";
    wheel_vel_x = "00000000000000000000000000000000";
    wheel_angularVelocit = "00000000000000000000000000000000";
    grp_update_fu_144_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_level_wheelSimWithMass_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, deltaTime, "(port)deltaTime");
    sc_trace(mVcdFile, initVel, "(port)initVel");
    sc_trace(mVcdFile, torque, "(port)torque");
    sc_trace(mVcdFile, steeringAngle, "(port)steeringAngle");
    sc_trace(mVcdFile, slipRatio, "(port)slipRatio");
    sc_trace(mVcdFile, slipRatio_ap_vld, "(port)slipRatio_ap_vld");
    sc_trace(mVcdFile, slipAngle, "(port)slipAngle");
    sc_trace(mVcdFile, slipAngle_ap_vld, "(port)slipAngle_ap_vld");
    sc_trace(mVcdFile, force_x, "(port)force_x");
    sc_trace(mVcdFile, force_x_ap_vld, "(port)force_x_ap_vld");
    sc_trace(mVcdFile, force_y, "(port)force_y");
    sc_trace(mVcdFile, force_y_ap_vld, "(port)force_y_ap_vld");
    sc_trace(mVcdFile, vel_x, "(port)vel_x");
    sc_trace(mVcdFile, vel_x_ap_vld, "(port)vel_x_ap_vld");
    sc_trace(mVcdFile, angularVel, "(port)angularVel");
    sc_trace(mVcdFile, angularVel_ap_vld, "(port)angularVel_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, guard_variable_for_t, "guard_variable_for_t");
    sc_trace(mVcdFile, wheel_mass, "wheel_mass");
    sc_trace(mVcdFile, wheel_radius, "wheel_radius");
    sc_trace(mVcdFile, wheel_inertia, "wheel_inertia");
    sc_trace(mVcdFile, wheel_slipRatio, "wheel_slipRatio");
    sc_trace(mVcdFile, wheel_slipAngle, "wheel_slipAngle");
    sc_trace(mVcdFile, wheel_fx, "wheel_fx");
    sc_trace(mVcdFile, wheel_fz, "wheel_fz");
    sc_trace(mVcdFile, wheel_pos_x, "wheel_pos_x");
    sc_trace(mVcdFile, wheel_vel_x, "wheel_vel_x");
    sc_trace(mVcdFile, wheel_angularVelocit, "wheel_angularVelocit");
    sc_trace(mVcdFile, grp_update_fu_144_ap_start, "grp_update_fu_144_ap_start");
    sc_trace(mVcdFile, grp_update_fu_144_ap_done, "grp_update_fu_144_ap_done");
    sc_trace(mVcdFile, grp_update_fu_144_ap_idle, "grp_update_fu_144_ap_idle");
    sc_trace(mVcdFile, grp_update_fu_144_ap_ready, "grp_update_fu_144_ap_ready");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_vel_x_o, "grp_update_fu_144_wheel_vel_x_o");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_vel_x_o_ap_vld, "grp_update_fu_144_wheel_vel_x_o_ap_vld");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_angularVelocit_o, "grp_update_fu_144_wheel_angularVelocit_o");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_angularVelocit_o_ap_vld, "grp_update_fu_144_wheel_angularVelocit_o_ap_vld");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_slipAngle, "grp_update_fu_144_wheel_slipAngle");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_slipAngle_ap_vld, "grp_update_fu_144_wheel_slipAngle_ap_vld");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_slipRatio, "grp_update_fu_144_wheel_slipRatio");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_slipRatio_ap_vld, "grp_update_fu_144_wheel_slipRatio_ap_vld");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_pos_x_o, "grp_update_fu_144_wheel_pos_x_o");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_pos_x_o_ap_vld, "grp_update_fu_144_wheel_pos_x_o_ap_vld");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_fz, "grp_update_fu_144_wheel_fz");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_fz_ap_vld, "grp_update_fu_144_wheel_fz_ap_vld");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_fx, "grp_update_fu_144_wheel_fx");
    sc_trace(mVcdFile, grp_update_fu_144_wheel_fx_ap_vld, "grp_update_fu_144_wheel_fx_ap_vld");
    sc_trace(mVcdFile, grp_update_fu_144_ap_start_reg, "grp_update_fu_144_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, guard_variable_for_t_1_load_fu_191_p1, "guard_variable_for_t_1_load_fu_191_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_185_p2, "grp_fu_185_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("top_level_wheelSimWithMass.hdltvin.dat");
    mHdltvoutHandle.open("top_level_wheelSimWithMass.hdltvout.dat");
}

top_level_wheelSimWithMass::~top_level_wheelSimWithMass() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_update_fu_144;
    delete top_level_wheelSircU_U76;
}

void top_level_wheelSimWithMass::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void top_level_wheelSimWithMass::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_3E99999A;
}

void top_level_wheelSimWithMass::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_update_fu_144_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_update_fu_144_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_update_fu_144_ap_ready.read())) {
            grp_update_fu_144_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        wheel_angularVelocit = grp_fu_185_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_update_fu_144_wheel_angularVelocit_o_ap_vld.read()))) {
        wheel_angularVelocit = grp_update_fu_144_wheel_angularVelocit_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_t_1_load_fu_191_p1.read()))) {
        wheel_fx = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_update_fu_144_wheel_fx_ap_vld.read()))) {
        wheel_fx = grp_update_fu_144_wheel_fx.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_t_1_load_fu_191_p1.read()))) {
        wheel_fz = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_update_fu_144_wheel_fz_ap_vld.read()))) {
        wheel_fz = grp_update_fu_144_wheel_fz.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_t_1_load_fu_191_p1.read()))) {
        wheel_pos_x = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_update_fu_144_wheel_pos_x_o_ap_vld.read()))) {
        wheel_pos_x = grp_update_fu_144_wheel_pos_x_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_t_1_load_fu_191_p1.read()))) {
        wheel_slipAngle = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_update_fu_144_wheel_slipAngle_ap_vld.read()))) {
        wheel_slipAngle = grp_update_fu_144_wheel_slipAngle.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_t_1_load_fu_191_p1.read()))) {
        wheel_slipRatio = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_update_fu_144_wheel_slipRatio_ap_vld.read()))) {
        wheel_slipRatio = grp_update_fu_144_wheel_slipRatio.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_t_1_load_fu_191_p1.read()))) {
        wheel_vel_x = initVel.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_update_fu_144_wheel_vel_x_o_ap_vld.read()))) {
        wheel_vel_x = grp_update_fu_144_wheel_vel_x_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_t_1_load_fu_191_p1.read()))) {
        guard_variable_for_t = ap_const_lv1_1;
        wheel_inertia = ap_const_lv32_40A00000;
        wheel_mass = ap_const_lv32_43FA0000;
        wheel_radius = ap_const_lv32_3E99999A;
    }
}

void top_level_wheelSimWithMass::thread_angularVel() {
    angularVel = wheel_angularVelocit.read();
}

void top_level_wheelSimWithMass::thread_angularVel_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        angularVel_ap_vld = ap_const_logic_1;
    } else {
        angularVel_ap_vld = ap_const_logic_0;
    }
}

void top_level_wheelSimWithMass::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void top_level_wheelSimWithMass::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void top_level_wheelSimWithMass::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void top_level_wheelSimWithMass::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void top_level_wheelSimWithMass::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void top_level_wheelSimWithMass::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void top_level_wheelSimWithMass::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void top_level_wheelSimWithMass::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void top_level_wheelSimWithMass::thread_force_x() {
    force_x = wheel_fx.read();
}

void top_level_wheelSimWithMass::thread_force_x_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        force_x_ap_vld = ap_const_logic_1;
    } else {
        force_x_ap_vld = ap_const_logic_0;
    }
}

void top_level_wheelSimWithMass::thread_force_y() {
    force_y = wheel_fz.read();
}

void top_level_wheelSimWithMass::thread_force_y_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        force_y_ap_vld = ap_const_logic_1;
    } else {
        force_y_ap_vld = ap_const_logic_0;
    }
}

void top_level_wheelSimWithMass::thread_grp_update_fu_144_ap_start() {
    grp_update_fu_144_ap_start = grp_update_fu_144_ap_start_reg.read();
}

void top_level_wheelSimWithMass::thread_guard_variable_for_t_1_load_fu_191_p1() {
    guard_variable_for_t_1_load_fu_191_p1 = guard_variable_for_t.read();
}

void top_level_wheelSimWithMass::thread_slipAngle() {
    slipAngle = wheel_slipAngle.read();
}

void top_level_wheelSimWithMass::thread_slipAngle_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        slipAngle_ap_vld = ap_const_logic_1;
    } else {
        slipAngle_ap_vld = ap_const_logic_0;
    }
}

void top_level_wheelSimWithMass::thread_slipRatio() {
    slipRatio = wheel_slipRatio.read();
}

void top_level_wheelSimWithMass::thread_slipRatio_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        slipRatio_ap_vld = ap_const_logic_1;
    } else {
        slipRatio_ap_vld = ap_const_logic_0;
    }
}

void top_level_wheelSimWithMass::thread_vel_x() {
    vel_x = wheel_vel_x.read();
}

void top_level_wheelSimWithMass::thread_vel_x_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        vel_x_ap_vld = ap_const_logic_1;
    } else {
        vel_x_ap_vld = ap_const_logic_0;
    }
}

void top_level_wheelSimWithMass::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, guard_variable_for_t_1_load_fu_191_p1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_t_1_load_fu_191_p1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_update_fu_144_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void top_level_wheelSimWithMass::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"deltaTime\" :  \"" << deltaTime.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"initVel\" :  \"" << initVel.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"torque\" :  \"" << torque.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"steeringAngle\" :  \"" << steeringAngle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"slipRatio\" :  \"" << slipRatio.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"slipRatio_ap_vld\" :  \"" << slipRatio_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"slipAngle\" :  \"" << slipAngle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"slipAngle_ap_vld\" :  \"" << slipAngle_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"force_x\" :  \"" << force_x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"force_x_ap_vld\" :  \"" << force_x_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"force_y\" :  \"" << force_y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"force_y_ap_vld\" :  \"" << force_y_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vel_x\" :  \"" << vel_x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vel_x_ap_vld\" :  \"" << vel_x_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"angularVel\" :  \"" << angularVel.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"angularVel_ap_vld\" :  \"" << angularVel_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

