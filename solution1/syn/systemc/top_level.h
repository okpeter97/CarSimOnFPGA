// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _top_level_HH_
#define _top_level_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "top_level_fcmp_32bkb.h"

namespace ap_rtl {

struct top_level : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > en;
    sc_out< sc_lv<32> > pos_x;
    sc_out< sc_logic > pos_x_ap_vld;
    sc_out< sc_lv<32> > pos_z;
    sc_out< sc_logic > pos_z_ap_vld;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const2;


    // Module declarations
    top_level(sc_module_name name);
    SC_HAS_PROCESS(top_level);

    ~top_level();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    top_level_fcmp_32bkb<1,2,32,32,1>* top_level_fcmp_32bkb_U1;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > icmp_ln7_fu_74_p2;
    sc_signal< sc_lv<1> > icmp_ln7_reg_101;
    sc_signal< sc_lv<1> > icmp_ln7_1_fu_80_p2;
    sc_signal< sc_lv<1> > icmp_ln7_1_reg_106;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > and_ln7_fu_90_p2;
    sc_signal< sc_lv<32> > bitcast_ln7_fu_56_p1;
    sc_signal< sc_lv<8> > tmp_fu_60_p4;
    sc_signal< sc_lv<23> > trunc_ln7_fu_70_p1;
    sc_signal< sc_lv<1> > or_ln7_fu_86_p2;
    sc_signal< sc_lv<1> > grp_fu_50_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_and_ln7_fu_90_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bitcast_ln7_fu_56_p1();
    void thread_icmp_ln7_1_fu_80_p2();
    void thread_icmp_ln7_fu_74_p2();
    void thread_or_ln7_fu_86_p2();
    void thread_pos_x();
    void thread_pos_x_ap_vld();
    void thread_pos_z();
    void thread_pos_z_ap_vld();
    void thread_tmp_fu_60_p4();
    void thread_trunc_ln7_fu_70_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
