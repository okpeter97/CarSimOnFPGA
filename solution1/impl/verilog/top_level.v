// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_level,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=453,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=127,HLS_SYN_FF=27668,HLS_SYN_LUT=42147,HLS_VERSION=2019_1}" *)

module top_level (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        out_r,
        out_r_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 143'd1;
parameter    ap_ST_fsm_state2 = 143'd2;
parameter    ap_ST_fsm_state3 = 143'd4;
parameter    ap_ST_fsm_state4 = 143'd8;
parameter    ap_ST_fsm_state5 = 143'd16;
parameter    ap_ST_fsm_state6 = 143'd32;
parameter    ap_ST_fsm_state7 = 143'd64;
parameter    ap_ST_fsm_state8 = 143'd128;
parameter    ap_ST_fsm_state9 = 143'd256;
parameter    ap_ST_fsm_state10 = 143'd512;
parameter    ap_ST_fsm_state11 = 143'd1024;
parameter    ap_ST_fsm_state12 = 143'd2048;
parameter    ap_ST_fsm_state13 = 143'd4096;
parameter    ap_ST_fsm_state14 = 143'd8192;
parameter    ap_ST_fsm_state15 = 143'd16384;
parameter    ap_ST_fsm_state16 = 143'd32768;
parameter    ap_ST_fsm_state17 = 143'd65536;
parameter    ap_ST_fsm_state18 = 143'd131072;
parameter    ap_ST_fsm_state19 = 143'd262144;
parameter    ap_ST_fsm_state20 = 143'd524288;
parameter    ap_ST_fsm_state21 = 143'd1048576;
parameter    ap_ST_fsm_state22 = 143'd2097152;
parameter    ap_ST_fsm_state23 = 143'd4194304;
parameter    ap_ST_fsm_state24 = 143'd8388608;
parameter    ap_ST_fsm_state25 = 143'd16777216;
parameter    ap_ST_fsm_state26 = 143'd33554432;
parameter    ap_ST_fsm_state27 = 143'd67108864;
parameter    ap_ST_fsm_state28 = 143'd134217728;
parameter    ap_ST_fsm_state29 = 143'd268435456;
parameter    ap_ST_fsm_state30 = 143'd536870912;
parameter    ap_ST_fsm_state31 = 143'd1073741824;
parameter    ap_ST_fsm_state32 = 143'd2147483648;
parameter    ap_ST_fsm_state33 = 143'd4294967296;
parameter    ap_ST_fsm_state34 = 143'd8589934592;
parameter    ap_ST_fsm_state35 = 143'd17179869184;
parameter    ap_ST_fsm_state36 = 143'd34359738368;
parameter    ap_ST_fsm_state37 = 143'd68719476736;
parameter    ap_ST_fsm_state38 = 143'd137438953472;
parameter    ap_ST_fsm_state39 = 143'd274877906944;
parameter    ap_ST_fsm_state40 = 143'd549755813888;
parameter    ap_ST_fsm_state41 = 143'd1099511627776;
parameter    ap_ST_fsm_state42 = 143'd2199023255552;
parameter    ap_ST_fsm_state43 = 143'd4398046511104;
parameter    ap_ST_fsm_state44 = 143'd8796093022208;
parameter    ap_ST_fsm_state45 = 143'd17592186044416;
parameter    ap_ST_fsm_state46 = 143'd35184372088832;
parameter    ap_ST_fsm_state47 = 143'd70368744177664;
parameter    ap_ST_fsm_state48 = 143'd140737488355328;
parameter    ap_ST_fsm_state49 = 143'd281474976710656;
parameter    ap_ST_fsm_state50 = 143'd562949953421312;
parameter    ap_ST_fsm_state51 = 143'd1125899906842624;
parameter    ap_ST_fsm_state52 = 143'd2251799813685248;
parameter    ap_ST_fsm_state53 = 143'd4503599627370496;
parameter    ap_ST_fsm_state54 = 143'd9007199254740992;
parameter    ap_ST_fsm_state55 = 143'd18014398509481984;
parameter    ap_ST_fsm_state56 = 143'd36028797018963968;
parameter    ap_ST_fsm_state57 = 143'd72057594037927936;
parameter    ap_ST_fsm_state58 = 143'd144115188075855872;
parameter    ap_ST_fsm_state59 = 143'd288230376151711744;
parameter    ap_ST_fsm_state60 = 143'd576460752303423488;
parameter    ap_ST_fsm_state61 = 143'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 143'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 143'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 143'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 143'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 143'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 143'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 143'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 143'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 143'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 143'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 143'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 143'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 143'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 143'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 143'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 143'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 143'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 143'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 143'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 143'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 143'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 143'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 143'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 143'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 143'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 143'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 143'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 143'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 143'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 143'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 143'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 143'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 143'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 143'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 143'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 143'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 143'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 143'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 143'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 143'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 143'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 143'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 143'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 143'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 143'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 143'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 143'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 143'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 143'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 143'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 143'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 143'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 143'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 143'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 143'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 143'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 143'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 143'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 143'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 143'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 143'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 143'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 143'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 143'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 143'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 143'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 143'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 143'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 143'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 143'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 143'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 143'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 143'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 143'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 143'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 143'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 143'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 143'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 143'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 143'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 143'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 143'd5575186299632655785383929568162090376495104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_r;
output  [31:0] out_r;
output   out_r_ap_vld;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;

(* fsm_encoding = "none" *) reg   [142:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_sin_or_cos_double_s_fu_139_ap_return;
reg   [63:0] reg_233;
wire    ap_CS_fsm_state2;
wire    grp_sin_or_cos_double_s_fu_139_ap_ready;
wire    grp_sin_or_cos_double_s_fu_139_ap_done;
wire    ap_CS_fsm_state136;
wire   [63:0] grp_fu_211_p2;
reg   [63:0] reg_240;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state134;
wire   [31:0] grp_fu_180_p1;
reg   [31:0] reg_248;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state137;
wire   [63:0] grp_fu_206_p2;
reg   [63:0] reg_258;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state126;
wire   [63:0] grp_fu_188_p1;
reg   [63:0] reg_265;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state102;
wire   [63:0] grp_fu_191_p1;
reg   [63:0] reg_272;
wire   [31:0] grp_fu_173_p2;
reg   [31:0] reg_278;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state112;
wire   [31:0] grp_fu_164_p2;
reg   [31:0] reg_284;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state141;
wire   [63:0] grp_atan_fu_132_ap_return;
reg   [63:0] reg_291;
wire    ap_CS_fsm_state110;
wire    grp_atan_fu_132_ap_ready;
wire    grp_atan_fu_132_ap_done;
wire    ap_CS_fsm_state128;
wire   [63:0] grp_fu_216_p2;
reg   [63:0] tmp_30_i_reg_579;
reg   [31:0] vel_z_temp_reg_584;
wire    ap_CS_fsm_state15;
wire   [31:0] p_Val2_s_fu_297_p1;
reg   [31:0] p_Val2_s_reg_591;
wire   [31:0] p_Val2_5_fu_435_p3;
reg   [31:0] p_Val2_5_reg_600;
wire   [0:0] and_ln26_fu_333_p2;
wire   [31:0] abs_i_fu_474_p3;
reg   [31:0] abs_i_reg_606;
wire    ap_CS_fsm_state16;
wire   [63:0] grp_atan2_cordic_double_s_fu_124_ap_return;
wire    ap_CS_fsm_state19;
wire    grp_atan2_cordic_double_s_fu_124_ap_ready;
wire    grp_atan2_cordic_double_s_fu_124_ap_done;
wire   [31:0] grp_fu_177_p1;
reg   [31:0] tmp_35_i_reg_616;
wire    ap_CS_fsm_state22;
wire   [31:0] bitcast_ln28_fu_487_p1;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln34_fu_509_p2;
reg   [0:0] icmp_ln34_reg_626;
wire    ap_CS_fsm_state39;
wire   [0:0] icmp_ln34_1_fu_515_p2;
reg   [0:0] icmp_ln34_1_reg_631;
wire   [31:0] select_ln34_fu_531_p3;
wire    ap_CS_fsm_state40;
wire   [63:0] grp_fu_223_p2;
reg   [63:0] tmp_41_i_reg_641;
wire    ap_CS_fsm_state73;
wire   [63:0] grp_fu_228_p2;
reg   [63:0] tmp_43_i_reg_646;
wire   [31:0] grp_fu_184_p1;
reg   [31:0] a_reg_651;
wire   [31:0] grp_fu_168_p2;
reg   [31:0] tmp_45_i_reg_657;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] tmp_46_i_reg_662;
wire    ap_CS_fsm_state84;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] s_reg_667;
wire    ap_CS_fsm_state96;
reg   [63:0] tmp_52_i_reg_673;
wire    ap_CS_fsm_state121;
wire   [0:0] icmp_ln11_fu_557_p2;
reg   [0:0] icmp_ln11_reg_678;
wire    ap_CS_fsm_state142;
wire   [0:0] icmp_ln11_1_fu_563_p2;
reg   [0:0] icmp_ln11_1_reg_683;
wire    grp_atan2_cordic_double_s_fu_124_ap_start;
wire    grp_atan2_cordic_double_s_fu_124_ap_idle;
wire    grp_atan_fu_132_ap_start;
wire    grp_atan_fu_132_ap_idle;
reg   [63:0] grp_atan_fu_132_x;
wire    grp_sin_or_cos_double_s_fu_139_ap_start;
wire    grp_sin_or_cos_double_s_fu_139_ap_idle;
reg   [63:0] grp_sin_or_cos_double_s_fu_139_t_in;
reg    grp_sin_or_cos_double_s_fu_139_do_cos;
reg   [31:0] slipRatio_0_i_reg_102;
reg   [31:0] slipAngle_1_i_reg_114;
reg    grp_atan2_cordic_double_s_fu_124_ap_start_reg;
wire    ap_CS_fsm_state18;
reg    grp_atan_fu_132_ap_start_reg;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state127;
reg    grp_sin_or_cos_double_s_fu_139_ap_start_reg;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state143;
wire   [0:0] and_ln11_fu_573_p2;
wire    ap_CS_fsm_state80;
reg   [31:0] grp_fu_164_p0;
reg   [31:0] grp_fu_164_p1;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state138;
reg   [31:0] grp_fu_173_p0;
reg   [31:0] grp_fu_173_p1;
reg   [63:0] grp_fu_180_p0;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state74;
reg   [31:0] grp_fu_188_p0;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state101;
reg   [31:0] grp_fu_191_p0;
reg   [31:0] grp_fu_196_p0;
wire    ap_CS_fsm_state85;
reg   [63:0] grp_fu_206_p0;
reg   [63:0] grp_fu_206_p1;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state122;
reg   [63:0] grp_fu_211_p0;
reg   [63:0] grp_fu_211_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state43;
wire   [7:0] tmp_V_fu_301_p4;
wire   [22:0] tmp_V_1_fu_311_p1;
wire   [0:0] icmp_ln26_1_fu_321_p2;
wire   [0:0] icmp_ln26_fu_315_p2;
wire   [0:0] or_ln26_fu_327_p2;
wire   [0:0] grp_fu_196_p2;
wire   [24:0] mantissa_V_fu_339_p4;
wire   [8:0] zext_ln339_fu_353_p1;
wire   [8:0] add_ln339_fu_357_p2;
wire   [7:0] sub_ln1311_fu_371_p2;
wire   [0:0] isNeg_fu_363_p3;
wire  signed [8:0] sext_ln1311_fu_377_p1;
wire  signed [8:0] ush_fu_381_p3;
wire  signed [31:0] sext_ln1311_1_fu_389_p1;
wire  signed [24:0] sext_ln1311_2_fu_393_p1;
wire   [78:0] zext_ln682_fu_349_p1;
wire   [78:0] zext_ln1287_fu_397_p1;
wire   [24:0] r_V_fu_401_p2;
wire   [0:0] tmp_fu_413_p3;
wire   [78:0] r_V_1_fu_407_p2;
wire   [31:0] zext_ln662_fu_421_p1;
wire   [31:0] tmp_6_fu_425_p4;
wire   [0:0] p_Result_s_fu_443_p3;
wire   [31:0] result_V_1_fu_450_p2;
wire   [31:0] p_Val2_6_fu_455_p3;
wire   [0:0] abscond_i_fu_468_p2;
wire   [31:0] neg_i_fu_462_p2;
wire   [31:0] xor_ln28_fu_482_p2;
wire   [31:0] bitcast_ln34_fu_492_p1;
wire   [7:0] tmp_2_fu_495_p4;
wire   [22:0] trunc_ln34_fu_505_p1;
wire   [0:0] or_ln34_fu_521_p2;
wire   [0:0] and_ln34_fu_525_p2;
wire   [31:0] bitcast_ln11_fu_539_p1;
wire   [7:0] tmp_4_fu_543_p4;
wire   [22:0] trunc_ln11_fu_553_p1;
wire   [0:0] or_ln11_fu_569_p2;
reg    grp_fu_173_ce;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state107;
reg    grp_fu_177_ce;
wire    ap_CS_fsm_state21;
reg    grp_fu_180_ce;
reg   [4:0] grp_fu_196_opcode;
reg   [1:0] grp_fu_206_opcode;
reg   [142:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 143'd1;
#0 grp_atan2_cordic_double_s_fu_124_ap_start_reg = 1'b0;
#0 grp_atan_fu_132_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_double_s_fu_139_ap_start_reg = 1'b0;
end

atan2_cordic_double_s grp_atan2_cordic_double_s_fu_124(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_atan2_cordic_double_s_fu_124_ap_start),
    .ap_done(grp_atan2_cordic_double_s_fu_124_ap_done),
    .ap_idle(grp_atan2_cordic_double_s_fu_124_ap_idle),
    .ap_ready(grp_atan2_cordic_double_s_fu_124_ap_ready),
    .y_in(reg_265),
    .x_in(reg_272),
    .ap_return(grp_atan2_cordic_double_s_fu_124_ap_return)
);

atan grp_atan_fu_132(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_atan_fu_132_ap_start),
    .ap_done(grp_atan_fu_132_ap_done),
    .ap_idle(grp_atan_fu_132_ap_idle),
    .ap_ready(grp_atan_fu_132_ap_ready),
    .x(grp_atan_fu_132_x),
    .ap_return(grp_atan_fu_132_ap_return)
);

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_139(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_139_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_139_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_139_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_139_ap_ready),
    .t_in(grp_sin_or_cos_double_s_fu_139_t_in),
    .do_cos(grp_sin_or_cos_double_s_fu_139_do_cos),
    .ap_return(grp_sin_or_cos_double_s_fu_139_ap_return)
);

top_level_fadd_32vdy #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fadd_32vdy_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_284),
    .din1(tmp_45_i_reg_657),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

top_level_fmul_32wdI #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32wdI_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_164_p0),
    .din1(grp_fu_164_p1),
    .ce(1'b1),
    .dout(grp_fu_164_p2)
);

top_level_fmul_32wdI #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32wdI_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_reg_651),
    .din1(a_reg_651),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

top_level_fdiv_32xdS #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fdiv_32xdS_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_173_p0),
    .din1(grp_fu_173_p1),
    .ce(grp_fu_173_ce),
    .dout(grp_fu_173_p2)
);

top_level_sitofp_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_sitofp_yd2_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(abs_i_reg_606),
    .ce(grp_fu_177_ce),
    .dout(grp_fu_177_p1)
);

top_level_fptrunczec #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
top_level_fptrunczec_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_180_p0),
    .ce(grp_fu_180_ce),
    .dout(grp_fu_180_p1)
);

top_level_fptrunczec #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
top_level_fptrunczec_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_43_i_reg_646),
    .ce(1'b1),
    .dout(grp_fu_184_p1)
);

top_level_fpext_3Aem #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
top_level_fpext_3Aem_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_188_p0),
    .ce(1'b1),
    .dout(grp_fu_188_p1)
);

top_level_fpext_3Aem #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
top_level_fpext_3Aem_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_191_p0),
    .ce(1'b1),
    .dout(grp_fu_191_p1)
);

top_level_fcmp_32Bew #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
top_level_fcmp_32Bew_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_196_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_196_opcode),
    .dout(grp_fu_196_p2)
);

top_level_fsqrt_3CeG #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fsqrt_3CeG_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(tmp_46_i_reg_662),
    .ce(1'b1),
    .dout(grp_fu_201_p2)
);

top_level_dadddsuDeQ #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_dadddsuDeQ_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_206_p0),
    .din1(grp_fu_206_p1),
    .opcode(grp_fu_206_opcode),
    .ce(1'b1),
    .dout(grp_fu_206_p2)
);

top_level_dmul_64Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_dmul_64Ee0_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_211_p0),
    .din1(grp_fu_211_p1),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

top_level_dmul_64Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_dmul_64Ee0_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_233),
    .din1(64'd0),
    .ce(1'b1),
    .dout(grp_fu_216_p2)
);

top_level_ddiv_64rcU #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_ddiv_64rcU_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_265),
    .din1(64'd4611235658464650854),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

top_level_ddiv_64rcU #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_ddiv_64rcU_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_272),
    .din1(64'd4613262278296967578),
    .ce(1'b1),
    .dout(grp_fu_228_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_atan2_cordic_double_s_fu_124_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            grp_atan2_cordic_double_s_fu_124_ap_start_reg <= 1'b1;
        end else if ((grp_atan2_cordic_double_s_fu_124_ap_ready == 1'b1)) begin
            grp_atan2_cordic_double_s_fu_124_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_atan_fu_132_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state109))) begin
            grp_atan_fu_132_ap_start_reg <= 1'b1;
        end else if ((grp_atan_fu_132_ap_ready == 1'b1)) begin
            grp_atan_fu_132_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_139_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state135) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_sin_or_cos_double_s_fu_139_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_139_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_139_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        slipAngle_1_i_reg_114 <= select_ln34_fu_531_p3;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        slipAngle_1_i_reg_114 <= reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        slipRatio_0_i_reg_102 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        slipRatio_0_i_reg_102 <= grp_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        a_reg_651 <= grp_fu_184_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        abs_i_reg_606 <= abs_i_fu_474_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        icmp_ln11_1_reg_683 <= icmp_ln11_1_fu_563_p2;
        icmp_ln11_reg_678 <= icmp_ln11_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        icmp_ln34_1_reg_631 <= icmp_ln34_1_fu_515_p2;
        icmp_ln34_reg_626 <= icmp_ln34_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln26_fu_333_p2) & (1'b1 == ap_CS_fsm_state15))) begin
        p_Val2_5_reg_600 <= p_Val2_5_fu_435_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_Val2_s_reg_591 <= p_Val2_s_fu_297_p1;
        vel_z_temp_reg_584 <= grp_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state136) & (grp_sin_or_cos_double_s_fu_139_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (grp_sin_or_cos_double_s_fu_139_ap_done == 1'b1)))) begin
        reg_233 <= grp_sin_or_cos_double_s_fu_139_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_240 <= grp_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_248 <= grp_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_258 <= grp_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_265 <= grp_fu_188_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_272 <= grp_fu_191_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state38))) begin
        reg_278 <= grp_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state79))) begin
        reg_284 <= grp_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_atan_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state128)) | ((grp_atan_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state110)))) begin
        reg_291 <= grp_atan_fu_132_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        s_reg_667 <= grp_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_30_i_reg_579 <= grp_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_35_i_reg_616 <= grp_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        tmp_41_i_reg_641 <= grp_fu_223_p2;
        tmp_43_i_reg_646 <= grp_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_45_i_reg_657 <= grp_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        tmp_46_i_reg_662 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        tmp_52_i_reg_673 <= grp_fu_211_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        grp_atan_fu_132_x = reg_258;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_atan_fu_132_x = reg_240;
    end else begin
        grp_atan_fu_132_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        grp_fu_164_p0 = reg_278;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_164_p0 = s_reg_667;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_164_p0 = reg_248;
    end else begin
        grp_fu_164_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_164_p1 = 32'd1092616192;
    end else if (((1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state76))) begin
        grp_fu_164_p1 = reg_248;
    end else begin
        grp_fu_164_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state108) | ((grp_atan_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state110)))) begin
        grp_fu_173_ce = 1'b1;
    end else begin
        grp_fu_173_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_173_p0 = reg_248;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_173_p0 = bitcast_ln28_fu_487_p1;
    end else begin
        grp_fu_173_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_173_p1 = s_reg_667;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_173_p1 = tmp_35_i_reg_616;
    end else begin
        grp_fu_173_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state20) | ((grp_atan2_cordic_double_s_fu_124_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        grp_fu_177_ce = 1'b1;
    end else begin
        grp_fu_177_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state10) | ((grp_atan2_cordic_double_s_fu_124_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == ap_CS_fsm_state136) & (grp_sin_or_cos_double_s_fu_139_ap_done == 1'b1)))) begin
        grp_fu_180_ce = 1'b1;
    end else begin
        grp_fu_180_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_fu_180_p0 = grp_sin_or_cos_double_s_fu_139_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_180_p0 = tmp_41_i_reg_641;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_180_p0 = grp_atan2_cordic_double_s_fu_124_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_180_p0 = reg_258;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_180_p0 = reg_240;
    end else begin
        grp_fu_180_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        grp_fu_188_p0 = reg_284;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_188_p0 = slipRatio_0_i_reg_102;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_188_p0 = vel_z_temp_reg_584;
    end else begin
        grp_fu_188_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_191_p0 = slipAngle_1_i_reg_114;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_191_p0 = reg_248;
    end else begin
        grp_fu_191_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_196_opcode = 5'd3;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state142))) begin
        grp_fu_196_opcode = 5'd1;
    end else begin
        grp_fu_196_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        grp_fu_196_p0 = reg_284;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_196_p0 = vel_z_temp_reg_584;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_196_p0 = reg_248;
    end else begin
        grp_fu_196_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state111))) begin
        grp_fu_206_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_206_opcode = 2'd0;
    end else begin
        grp_fu_206_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state111))) begin
        grp_fu_206_p0 = reg_240;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_206_p0 = tmp_30_i_reg_579;
    end else begin
        grp_fu_206_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        grp_fu_206_p1 = tmp_52_i_reg_673;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_fu_206_p1 = reg_291;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_206_p1 = 64'd0;
    end else begin
        grp_fu_206_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        grp_fu_211_p0 = reg_291;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        grp_fu_211_p0 = reg_258;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        grp_fu_211_p0 = reg_265;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_211_p0 = reg_233;
    end else begin
        grp_fu_211_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        grp_fu_211_p1 = 64'd4606912202822375178;
    end else if (((1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state103))) begin
        grp_fu_211_p1 = 64'd4611235658464650854;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_211_p1 = 64'd4617315517961601024;
    end else begin
        grp_fu_211_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_sin_or_cos_double_s_fu_139_do_cos = 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_sin_or_cos_double_s_fu_139_do_cos = 1'd1;
    end else begin
        grp_sin_or_cos_double_s_fu_139_do_cos = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_sin_or_cos_double_s_fu_139_t_in = reg_240;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_sin_or_cos_double_s_fu_139_t_in = 64'd0;
    end else begin
        grp_sin_or_cos_double_s_fu_139_t_in = 'bx;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln11_fu_573_p2) & (1'b1 == ap_CS_fsm_state143))) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_sin_or_cos_double_s_fu_139_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'd1 == and_ln26_fu_333_p2) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_atan2_cordic_double_s_fu_124_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            if (((grp_atan_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state110))) begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            if (((grp_atan_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state128))) begin
                ap_NS_fsm = ap_ST_fsm_state129;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            if (((1'b1 == ap_CS_fsm_state136) & (grp_sin_or_cos_double_s_fu_139_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state136;
            end
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_i_fu_474_p3 = ((abscond_i_fu_468_p2[0:0] === 1'b1) ? p_Val2_6_fu_455_p3 : neg_i_fu_462_p2);

assign abscond_i_fu_468_p2 = (($signed(p_Val2_6_fu_455_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign add_ln339_fu_357_p2 = ($signed(zext_ln339_fu_353_p1) + $signed(9'd385));

assign and_ln11_fu_573_p2 = (or_ln11_fu_569_p2 & grp_fu_196_p2);

assign and_ln26_fu_333_p2 = (or_ln26_fu_327_p2 & grp_fu_196_p2);

assign and_ln34_fu_525_p2 = (or_ln34_fu_521_p2 & grp_fu_196_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_return = 32'd0;

assign bitcast_ln11_fu_539_p1 = reg_284;

assign bitcast_ln28_fu_487_p1 = xor_ln28_fu_482_p2;

assign bitcast_ln34_fu_492_p1 = vel_z_temp_reg_584;

assign grp_atan2_cordic_double_s_fu_124_ap_start = grp_atan2_cordic_double_s_fu_124_ap_start_reg;

assign grp_atan_fu_132_ap_start = grp_atan_fu_132_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_139_ap_start = grp_sin_or_cos_double_s_fu_139_ap_start_reg;

assign icmp_ln11_1_fu_563_p2 = ((trunc_ln11_fu_553_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_557_p2 = ((tmp_4_fu_543_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln26_1_fu_321_p2 = ((tmp_V_1_fu_311_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_315_p2 = ((tmp_V_fu_301_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_515_p2 = ((trunc_ln34_fu_505_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_509_p2 = ((tmp_2_fu_495_p4 != 8'd255) ? 1'b1 : 1'b0);

assign isNeg_fu_363_p3 = add_ln339_fu_357_p2[32'd8];

assign mantissa_V_fu_339_p4 = {{{{1'd1}, {tmp_V_1_fu_311_p1}}}, {1'd0}};

assign neg_i_fu_462_p2 = (32'd0 - p_Val2_6_fu_455_p3);

assign or_ln11_fu_569_p2 = (icmp_ln11_reg_678 | icmp_ln11_1_reg_683);

assign or_ln26_fu_327_p2 = (icmp_ln26_fu_315_p2 | icmp_ln26_1_fu_321_p2);

assign or_ln34_fu_521_p2 = (icmp_ln34_reg_626 | icmp_ln34_1_reg_631);

assign out_r = 32'd1065353216;

assign p_Result_s_fu_443_p3 = p_Val2_s_reg_591[32'd31];

assign p_Val2_5_fu_435_p3 = ((isNeg_fu_363_p3[0:0] === 1'b1) ? zext_ln662_fu_421_p1 : tmp_6_fu_425_p4);

assign p_Val2_6_fu_455_p3 = ((p_Result_s_fu_443_p3[0:0] === 1'b1) ? result_V_1_fu_450_p2 : p_Val2_5_reg_600);

assign p_Val2_s_fu_297_p1 = reg_248;

assign r_V_1_fu_407_p2 = zext_ln682_fu_349_p1 << zext_ln1287_fu_397_p1;

assign r_V_fu_401_p2 = mantissa_V_fu_339_p4 >> sext_ln1311_2_fu_393_p1;

assign result_V_1_fu_450_p2 = (32'd0 - p_Val2_5_reg_600);

assign select_ln34_fu_531_p3 = ((and_ln34_fu_525_p2[0:0] === 1'b1) ? 32'd1119092736 : 32'd3266576384);

assign sext_ln1311_1_fu_389_p1 = ush_fu_381_p3;

assign sext_ln1311_2_fu_393_p1 = ush_fu_381_p3;

assign sext_ln1311_fu_377_p1 = $signed(sub_ln1311_fu_371_p2);

assign sub_ln1311_fu_371_p2 = (8'd127 - tmp_V_fu_301_p4);

assign tmp_2_fu_495_p4 = {{bitcast_ln34_fu_492_p1[30:23]}};

assign tmp_4_fu_543_p4 = {{bitcast_ln11_fu_539_p1[30:23]}};

assign tmp_6_fu_425_p4 = {{r_V_1_fu_407_p2[55:24]}};

assign tmp_V_1_fu_311_p1 = p_Val2_s_fu_297_p1[22:0];

assign tmp_V_fu_301_p4 = {{p_Val2_s_fu_297_p1[30:23]}};

assign tmp_fu_413_p3 = r_V_fu_401_p2[32'd24];

assign trunc_ln11_fu_553_p1 = bitcast_ln11_fu_539_p1[22:0];

assign trunc_ln34_fu_505_p1 = bitcast_ln34_fu_492_p1[22:0];

assign ush_fu_381_p3 = ((isNeg_fu_363_p3[0:0] === 1'b1) ? sext_ln1311_fu_377_p1 : add_ln339_fu_357_p2);

assign xor_ln28_fu_482_p2 = (p_Val2_s_reg_591 ^ 32'd2147483648);

assign zext_ln1287_fu_397_p1 = $unsigned(sext_ln1311_1_fu_389_p1);

assign zext_ln339_fu_353_p1 = tmp_V_fu_301_p4;

assign zext_ln662_fu_421_p1 = tmp_fu_413_p3;

assign zext_ln682_fu_349_p1 = mantissa_V_fu_339_p4;

endmodule //top_level
