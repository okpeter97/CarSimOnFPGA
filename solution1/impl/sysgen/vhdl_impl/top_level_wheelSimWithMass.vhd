-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_level_wheelSimWithMass is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    deltaTime : IN STD_LOGIC_VECTOR (31 downto 0);
    initVel : IN STD_LOGIC_VECTOR (31 downto 0);
    torque : IN STD_LOGIC_VECTOR (31 downto 0);
    steeringAngle : IN STD_LOGIC_VECTOR (31 downto 0);
    slipRatio : OUT STD_LOGIC_VECTOR (31 downto 0);
    slipRatio_ap_vld : OUT STD_LOGIC;
    slipAngle : OUT STD_LOGIC_VECTOR (31 downto 0);
    slipAngle_ap_vld : OUT STD_LOGIC;
    force_x : OUT STD_LOGIC_VECTOR (31 downto 0);
    force_x_ap_vld : OUT STD_LOGIC;
    force_y : OUT STD_LOGIC_VECTOR (31 downto 0);
    force_y_ap_vld : OUT STD_LOGIC;
    vel_x : OUT STD_LOGIC_VECTOR (31 downto 0);
    vel_x_ap_vld : OUT STD_LOGIC;
    angularVel : OUT STD_LOGIC_VECTOR (31 downto 0);
    angularVel_ap_vld : OUT STD_LOGIC );
end;


architecture behav of top_level_wheelSimWithMass is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_level_wheelSimWithMass,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325t-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.006429,HLS_SYN_LAT=533,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=241,HLS_SYN_FF=18477,HLS_SYN_LUT=33833,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_43FA0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011111110100000000000000000";
    constant ap_const_lv32_3E99999A : STD_LOGIC_VECTOR (31 downto 0) := "00111110100110011001100110011010";
    constant ap_const_lv32_40A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000101000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal guard_variable_for_t : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal wheel_mass : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_radius : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_inertia : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_slipRatio : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_slipAngle : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_fx : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_fz : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_pos_x : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_vel_x : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wheel_angularVelocit : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_update_fu_144_ap_start : STD_LOGIC;
    signal grp_update_fu_144_ap_done : STD_LOGIC;
    signal grp_update_fu_144_ap_idle : STD_LOGIC;
    signal grp_update_fu_144_ap_ready : STD_LOGIC;
    signal grp_update_fu_144_wheel_vel_x_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_144_wheel_vel_x_o_ap_vld : STD_LOGIC;
    signal grp_update_fu_144_wheel_angularVelocit_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_144_wheel_angularVelocit_o_ap_vld : STD_LOGIC;
    signal grp_update_fu_144_wheel_slipAngle : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_144_wheel_slipAngle_ap_vld : STD_LOGIC;
    signal grp_update_fu_144_wheel_slipRatio : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_144_wheel_slipRatio_ap_vld : STD_LOGIC;
    signal grp_update_fu_144_wheel_pos_x_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_144_wheel_pos_x_o_ap_vld : STD_LOGIC;
    signal grp_update_fu_144_wheel_fz : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_144_wheel_fz_ap_vld : STD_LOGIC;
    signal grp_update_fu_144_wheel_fx : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_144_wheel_fx_ap_vld : STD_LOGIC;
    signal grp_update_fu_144_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal guard_variable_for_t_1_load_fu_191_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        deltaTime : IN STD_LOGIC_VECTOR (31 downto 0);
        torque : IN STD_LOGIC_VECTOR (31 downto 0);
        steeringAngle : IN STD_LOGIC_VECTOR (31 downto 0);
        wheel_vel_x_i : IN STD_LOGIC_VECTOR (31 downto 0);
        wheel_vel_x_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_vel_x_o_ap_vld : OUT STD_LOGIC;
        wheel_angularVelocit_i : IN STD_LOGIC_VECTOR (31 downto 0);
        wheel_angularVelocit_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_angularVelocit_o_ap_vld : OUT STD_LOGIC;
        wheel_radius : IN STD_LOGIC_VECTOR (31 downto 0);
        wheel_slipAngle : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_slipAngle_ap_vld : OUT STD_LOGIC;
        wheel_slipRatio : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_slipRatio_ap_vld : OUT STD_LOGIC;
        wheel_inertia : IN STD_LOGIC_VECTOR (31 downto 0);
        wheel_mass : IN STD_LOGIC_VECTOR (31 downto 0);
        wheel_pos_x_i : IN STD_LOGIC_VECTOR (31 downto 0);
        wheel_pos_x_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_pos_x_o_ap_vld : OUT STD_LOGIC;
        wheel_fz : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_fz_ap_vld : OUT STD_LOGIC;
        wheel_fx : OUT STD_LOGIC_VECTOR (31 downto 0);
        wheel_fx_ap_vld : OUT STD_LOGIC );
    end component;


    component top_level_wheelSircU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_update_fu_144 : component update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_fu_144_ap_start,
        ap_done => grp_update_fu_144_ap_done,
        ap_idle => grp_update_fu_144_ap_idle,
        ap_ready => grp_update_fu_144_ap_ready,
        deltaTime => deltaTime,
        torque => torque,
        steeringAngle => steeringAngle,
        wheel_vel_x_i => wheel_vel_x,
        wheel_vel_x_o => grp_update_fu_144_wheel_vel_x_o,
        wheel_vel_x_o_ap_vld => grp_update_fu_144_wheel_vel_x_o_ap_vld,
        wheel_angularVelocit_i => wheel_angularVelocit,
        wheel_angularVelocit_o => grp_update_fu_144_wheel_angularVelocit_o,
        wheel_angularVelocit_o_ap_vld => grp_update_fu_144_wheel_angularVelocit_o_ap_vld,
        wheel_radius => wheel_radius,
        wheel_slipAngle => grp_update_fu_144_wheel_slipAngle,
        wheel_slipAngle_ap_vld => grp_update_fu_144_wheel_slipAngle_ap_vld,
        wheel_slipRatio => grp_update_fu_144_wheel_slipRatio,
        wheel_slipRatio_ap_vld => grp_update_fu_144_wheel_slipRatio_ap_vld,
        wheel_inertia => wheel_inertia,
        wheel_mass => wheel_mass,
        wheel_pos_x_i => wheel_pos_x,
        wheel_pos_x_o => grp_update_fu_144_wheel_pos_x_o,
        wheel_pos_x_o_ap_vld => grp_update_fu_144_wheel_pos_x_o_ap_vld,
        wheel_fz => grp_update_fu_144_wheel_fz,
        wheel_fz_ap_vld => grp_update_fu_144_wheel_fz_ap_vld,
        wheel_fx => grp_update_fu_144_wheel_fx,
        wheel_fx_ap_vld => grp_update_fu_144_wheel_fx_ap_vld);

    top_level_wheelSircU_U76 : component top_level_wheelSircU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => initVel,
        din1 => ap_const_lv32_3E99999A,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_update_fu_144_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_fu_144_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_update_fu_144_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_fu_144_ap_ready = ap_const_logic_1)) then 
                    grp_update_fu_144_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    wheel_angularVelocit_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                wheel_angularVelocit <= grp_fu_185_p2;
            elsif (((grp_update_fu_144_wheel_angularVelocit_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wheel_angularVelocit <= grp_update_fu_144_wheel_angularVelocit_o;
            end if; 
        end if;
    end process;

    wheel_fx_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_t_1_load_fu_191_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wheel_fx <= ap_const_lv32_0;
            elsif (((grp_update_fu_144_wheel_fx_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wheel_fx <= grp_update_fu_144_wheel_fx;
            end if; 
        end if;
    end process;

    wheel_fz_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_t_1_load_fu_191_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wheel_fz <= ap_const_lv32_0;
            elsif (((grp_update_fu_144_wheel_fz_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wheel_fz <= grp_update_fu_144_wheel_fz;
            end if; 
        end if;
    end process;

    wheel_pos_x_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_t_1_load_fu_191_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wheel_pos_x <= ap_const_lv32_0;
            elsif (((grp_update_fu_144_wheel_pos_x_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wheel_pos_x <= grp_update_fu_144_wheel_pos_x_o;
            end if; 
        end if;
    end process;

    wheel_slipAngle_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_t_1_load_fu_191_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wheel_slipAngle <= ap_const_lv32_0;
            elsif (((grp_update_fu_144_wheel_slipAngle_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wheel_slipAngle <= grp_update_fu_144_wheel_slipAngle;
            end if; 
        end if;
    end process;

    wheel_slipRatio_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_t_1_load_fu_191_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wheel_slipRatio <= ap_const_lv32_0;
            elsif (((grp_update_fu_144_wheel_slipRatio_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wheel_slipRatio <= grp_update_fu_144_wheel_slipRatio;
            end if; 
        end if;
    end process;

    wheel_vel_x_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_t_1_load_fu_191_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wheel_vel_x <= initVel;
            elsif (((grp_update_fu_144_wheel_vel_x_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wheel_vel_x <= grp_update_fu_144_wheel_vel_x_o;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((guard_variable_for_t_1_load_fu_191_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                guard_variable_for_t <= ap_const_lv1_1;
                wheel_inertia(21) <= '1';
    wheel_inertia(23) <= '1';
    wheel_inertia(30) <= '1';
                wheel_mass(17) <= '1';
    wheel_mass(19) <= '1';
    wheel_mass(20) <= '1';
    wheel_mass(21) <= '1';
    wheel_mass(22) <= '1';
    wheel_mass(23) <= '1';
    wheel_mass(24) <= '1';
    wheel_mass(25) <= '1';
    wheel_mass(30) <= '1';
                wheel_radius(1) <= '1';
    wheel_radius(3) <= '1';
    wheel_radius(4) <= '1';
    wheel_radius(7) <= '1';
    wheel_radius(8) <= '1';
    wheel_radius(11) <= '1';
    wheel_radius(12) <= '1';
    wheel_radius(15) <= '1';
    wheel_radius(16) <= '1';
    wheel_radius(19) <= '1';
    wheel_radius(20) <= '1';
    wheel_radius(23) <= '1';
    wheel_radius(25) <= '1';
    wheel_radius(26) <= '1';
    wheel_radius(27) <= '1';
    wheel_radius(28) <= '1';
    wheel_radius(29) <= '1';
            end if;
        end if;
    end process;
    wheel_mass(16 downto 0) <= "00000000000000000";
    wheel_mass(18 downto 18) <= "0";
    wheel_mass(29 downto 26) <= "0000";
    wheel_mass(31) <= '0';
    wheel_radius(0) <= '0';
    wheel_radius(2 downto 2) <= "0";
    wheel_radius(6 downto 5) <= "00";
    wheel_radius(10 downto 9) <= "00";
    wheel_radius(14 downto 13) <= "00";
    wheel_radius(18 downto 17) <= "00";
    wheel_radius(22 downto 21) <= "00";
    wheel_radius(24 downto 24) <= "0";
    wheel_radius(31 downto 30) <= "00";
    wheel_inertia(20 downto 0) <= "000000000000000000000";
    wheel_inertia(22 downto 22) <= "0";
    wheel_inertia(29 downto 24) <= "000000";
    wheel_inertia(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_update_fu_144_ap_done, ap_CS_fsm_state4, guard_variable_for_t_1_load_fu_191_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (guard_variable_for_t_1_load_fu_191_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((guard_variable_for_t_1_load_fu_191_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_update_fu_144_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    angularVel <= wheel_angularVelocit;

    angularVel_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            angularVel_ap_vld <= ap_const_logic_1;
        else 
            angularVel_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    force_x <= wheel_fx;

    force_x_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            force_x_ap_vld <= ap_const_logic_1;
        else 
            force_x_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    force_y <= wheel_fz;

    force_y_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            force_y_ap_vld <= ap_const_logic_1;
        else 
            force_y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_update_fu_144_ap_start <= grp_update_fu_144_ap_start_reg;
    guard_variable_for_t_1_load_fu_191_p1 <= guard_variable_for_t;
    slipAngle <= wheel_slipAngle;

    slipAngle_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            slipAngle_ap_vld <= ap_const_logic_1;
        else 
            slipAngle_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    slipRatio <= wheel_slipRatio;

    slipRatio_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            slipRatio_ap_vld <= ap_const_logic_1;
        else 
            slipRatio_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    vel_x <= wheel_vel_x;

    vel_x_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vel_x_ap_vld <= ap_const_logic_1;
        else 
            vel_x_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
