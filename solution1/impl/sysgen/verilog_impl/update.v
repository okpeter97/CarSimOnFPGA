// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        deltaTime,
        torque,
        velocity_x,
        velocity_z,
        load,
        steeringAngle,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 179'd1;
parameter    ap_ST_fsm_state2 = 179'd2;
parameter    ap_ST_fsm_state3 = 179'd4;
parameter    ap_ST_fsm_state4 = 179'd8;
parameter    ap_ST_fsm_state5 = 179'd16;
parameter    ap_ST_fsm_state6 = 179'd32;
parameter    ap_ST_fsm_state7 = 179'd64;
parameter    ap_ST_fsm_state8 = 179'd128;
parameter    ap_ST_fsm_state9 = 179'd256;
parameter    ap_ST_fsm_state10 = 179'd512;
parameter    ap_ST_fsm_state11 = 179'd1024;
parameter    ap_ST_fsm_state12 = 179'd2048;
parameter    ap_ST_fsm_state13 = 179'd4096;
parameter    ap_ST_fsm_state14 = 179'd8192;
parameter    ap_ST_fsm_state15 = 179'd16384;
parameter    ap_ST_fsm_state16 = 179'd32768;
parameter    ap_ST_fsm_state17 = 179'd65536;
parameter    ap_ST_fsm_state18 = 179'd131072;
parameter    ap_ST_fsm_state19 = 179'd262144;
parameter    ap_ST_fsm_state20 = 179'd524288;
parameter    ap_ST_fsm_state21 = 179'd1048576;
parameter    ap_ST_fsm_state22 = 179'd2097152;
parameter    ap_ST_fsm_state23 = 179'd4194304;
parameter    ap_ST_fsm_state24 = 179'd8388608;
parameter    ap_ST_fsm_state25 = 179'd16777216;
parameter    ap_ST_fsm_state26 = 179'd33554432;
parameter    ap_ST_fsm_state27 = 179'd67108864;
parameter    ap_ST_fsm_state28 = 179'd134217728;
parameter    ap_ST_fsm_state29 = 179'd268435456;
parameter    ap_ST_fsm_state30 = 179'd536870912;
parameter    ap_ST_fsm_state31 = 179'd1073741824;
parameter    ap_ST_fsm_state32 = 179'd2147483648;
parameter    ap_ST_fsm_state33 = 179'd4294967296;
parameter    ap_ST_fsm_state34 = 179'd8589934592;
parameter    ap_ST_fsm_state35 = 179'd17179869184;
parameter    ap_ST_fsm_state36 = 179'd34359738368;
parameter    ap_ST_fsm_state37 = 179'd68719476736;
parameter    ap_ST_fsm_state38 = 179'd137438953472;
parameter    ap_ST_fsm_state39 = 179'd274877906944;
parameter    ap_ST_fsm_state40 = 179'd549755813888;
parameter    ap_ST_fsm_state41 = 179'd1099511627776;
parameter    ap_ST_fsm_state42 = 179'd2199023255552;
parameter    ap_ST_fsm_state43 = 179'd4398046511104;
parameter    ap_ST_fsm_state44 = 179'd8796093022208;
parameter    ap_ST_fsm_state45 = 179'd17592186044416;
parameter    ap_ST_fsm_state46 = 179'd35184372088832;
parameter    ap_ST_fsm_state47 = 179'd70368744177664;
parameter    ap_ST_fsm_state48 = 179'd140737488355328;
parameter    ap_ST_fsm_state49 = 179'd281474976710656;
parameter    ap_ST_fsm_state50 = 179'd562949953421312;
parameter    ap_ST_fsm_state51 = 179'd1125899906842624;
parameter    ap_ST_fsm_state52 = 179'd2251799813685248;
parameter    ap_ST_fsm_state53 = 179'd4503599627370496;
parameter    ap_ST_fsm_state54 = 179'd9007199254740992;
parameter    ap_ST_fsm_state55 = 179'd18014398509481984;
parameter    ap_ST_fsm_state56 = 179'd36028797018963968;
parameter    ap_ST_fsm_state57 = 179'd72057594037927936;
parameter    ap_ST_fsm_state58 = 179'd144115188075855872;
parameter    ap_ST_fsm_state59 = 179'd288230376151711744;
parameter    ap_ST_fsm_state60 = 179'd576460752303423488;
parameter    ap_ST_fsm_state61 = 179'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 179'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 179'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 179'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 179'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 179'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 179'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 179'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 179'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 179'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 179'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 179'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 179'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 179'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 179'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 179'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 179'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 179'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 179'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 179'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 179'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 179'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 179'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 179'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 179'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 179'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 179'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 179'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 179'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 179'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 179'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 179'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 179'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 179'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 179'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 179'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 179'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 179'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 179'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 179'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 179'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 179'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 179'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 179'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 179'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 179'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 179'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 179'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 179'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 179'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 179'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 179'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 179'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 179'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 179'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 179'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 179'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 179'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 179'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 179'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 179'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 179'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 179'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 179'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 179'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 179'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 179'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 179'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 179'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 179'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 179'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 179'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 179'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 179'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 179'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 179'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 179'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 179'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 179'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 179'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 179'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 179'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 179'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 179'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 179'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 179'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 179'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 179'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 179'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 179'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 179'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 179'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 179'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 179'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 179'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 179'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 179'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 179'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 179'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 179'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 179'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 179'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 179'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 179'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 179'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 179'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 179'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 179'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 179'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 179'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 179'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 179'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 179'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 179'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 179'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 179'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 179'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 179'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 179'd383123885216472214589586756787577295904684780545900544;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] deltaTime;
input  [31:0] torque;
input  [31:0] velocity_x;
input  [31:0] velocity_z;
input  [31:0] load;
input  [31:0] steeringAngle;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [178:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_260_p1;
reg   [63:0] reg_309;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state138;
wire   [63:0] grp_sin_or_cos_double_s_fu_169_ap_return;
wire    ap_CS_fsm_state4;
wire    grp_sin_or_cos_double_s_fu_169_ap_ready;
wire    grp_sin_or_cos_double_s_fu_169_ap_done;
wire    grp_sin_or_cos_double_s_fu_188_ap_ready;
wire    grp_sin_or_cos_double_s_fu_188_ap_done;
reg    ap_block_state4_on_subcall_done;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state140;
wire    grp_atan_fu_162_ap_ready;
wire    grp_atan_fu_162_ap_done;
reg    ap_block_state140_on_subcall_done;
wire   [31:0] grp_fu_251_p1;
reg   [31:0] reg_324;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_217_p2;
reg   [31:0] reg_330;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state145;
wire    ap_CS_fsm_state170;
wire   [31:0] grp_fu_222_p2;
reg   [31:0] reg_339;
wire   [31:0] grp_fu_227_p2;
reg   [31:0] reg_345;
wire   [31:0] grp_fu_232_p2;
reg   [31:0] reg_350;
wire   [31:0] grp_fu_208_p2;
reg   [31:0] reg_355;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state154;
wire    ap_CS_fsm_state175;
wire   [31:0] grp_fu_212_p2;
reg   [31:0] reg_362;
wire   [31:0] grp_fu_239_p2;
reg   [31:0] reg_368;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state38;
wire   [63:0] grp_atan_fu_162_ap_return;
reg   [63:0] reg_375;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state132;
wire    ap_CS_fsm_state153;
reg   [31:0] reg_383;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state136;
wire    ap_CS_fsm_state141;
wire    ap_CS_fsm_state162;
wire   [63:0] grp_fu_284_p2;
reg   [63:0] reg_392;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state146;
wire    ap_CS_fsm_state159;
wire   [63:0] grp_fu_280_p2;
reg   [63:0] reg_400;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state151;
reg   [31:0] reg_406;
wire    ap_CS_fsm_state149;
wire    ap_CS_fsm_state166;
wire    ap_CS_fsm_state174;
wire   [63:0] grp_sin_or_cos_double_s_fu_188_ap_return;
wire   [31:0] grp_fu_255_p1;
reg   [31:0] sin_steer_reg_731;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln32_fu_432_p2;
reg   [0:0] icmp_ln32_reg_750;
wire   [0:0] icmp_ln32_1_fu_438_p2;
reg   [0:0] icmp_ln32_1_reg_755;
wire   [0:0] and_ln32_fu_448_p2;
reg   [0:0] and_ln32_reg_760;
wire    ap_CS_fsm_state7;
wire   [31:0] bitcast_ln22_1_fu_463_p1;
wire    ap_CS_fsm_state10;
wire   [31:0] p_Val2_s_fu_468_p1;
reg   [31:0] p_Val2_s_reg_785;
wire    ap_CS_fsm_state15;
reg   [0:0] p_Result_s_reg_790;
wire   [31:0] p_Val2_5_fu_590_p3;
reg   [31:0] p_Val2_5_reg_795;
wire   [31:0] abs_fu_621_p3;
reg   [31:0] abs_reg_801;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_248_p1;
reg   [31:0] tmp_s_reg_806;
wire    ap_CS_fsm_state22;
wire   [31:0] bitcast_ln34_1_fu_634_p1;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln40_fu_657_p2;
reg   [0:0] icmp_ln40_reg_816;
wire    ap_CS_fsm_state39;
wire   [0:0] icmp_ln40_1_fu_663_p2;
reg   [0:0] icmp_ln40_1_reg_821;
wire   [31:0] select_ln40_fu_679_p3;
wire    ap_CS_fsm_state40;
wire   [63:0] grp_fu_265_p1;
reg   [63:0] tmp_12_reg_831;
wire   [63:0] grp_fu_299_p2;
reg   [63:0] tmp_11_reg_836;
wire    ap_CS_fsm_state73;
wire   [63:0] grp_fu_304_p2;
reg   [63:0] tmp_13_reg_841;
reg   [31:0] a_reg_846;
wire   [31:0] grp_fu_275_p2;
reg   [31:0] s_reg_853;
wire    ap_CS_fsm_state96;
reg   [31:0] long_input_reg_861;
wire    ap_CS_fsm_state110;
wire   [31:0] grp_fu_243_p2;
reg   [31:0] tmp_38_reg_866;
reg   [63:0] tmp_20_reg_871;
wire    ap_CS_fsm_state122;
reg   [63:0] tmp_21_reg_876;
wire    ap_CS_fsm_state128;
wire   [63:0] grp_fu_293_p2;
reg   [63:0] tmp_33_reg_881;
wire   [63:0] bitcast_ln57_1_fu_697_p1;
wire    ap_CS_fsm_state161;
wire    grp_atan_fu_162_ap_start;
wire    grp_atan_fu_162_ap_idle;
reg   [63:0] grp_atan_fu_162_x;
wire    grp_sin_or_cos_double_s_fu_169_ap_start;
wire    grp_sin_or_cos_double_s_fu_169_ap_idle;
reg   [63:0] grp_sin_or_cos_double_s_fu_169_t_in;
reg    grp_sin_or_cos_double_s_fu_169_do_cos;
wire    grp_sin_or_cos_double_s_fu_188_ap_start;
wire    grp_sin_or_cos_double_s_fu_188_ap_idle;
wire    grp_sin_or_cos_double_s_fu_188_do_cos;
reg   [31:0] slipRatio_0_reg_140;
reg   [31:0] slipAngle_1_reg_152;
reg    grp_atan_fu_162_ap_start_reg;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state131;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_state152;
reg    grp_sin_or_cos_double_s_fu_169_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state160;
reg    grp_sin_or_cos_double_s_fu_188_ap_start_reg;
reg   [31:0] grp_fu_208_p0;
reg   [31:0] grp_fu_208_p1;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state150;
wire    ap_CS_fsm_state171;
reg   [31:0] grp_fu_217_p0;
reg   [31:0] grp_fu_217_p1;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state142;
wire    ap_CS_fsm_state163;
wire    ap_CS_fsm_state167;
reg   [31:0] grp_fu_222_p0;
reg   [31:0] grp_fu_222_p1;
reg   [31:0] grp_fu_227_p1;
reg   [31:0] grp_fu_232_p1;
reg   [31:0] grp_fu_239_p0;
reg   [31:0] grp_fu_239_p1;
wire    ap_CS_fsm_state155;
wire    ap_CS_fsm_state17;
reg   [63:0] grp_fu_251_p0;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state135;
reg   [63:0] grp_fu_255_p0;
reg   [31:0] grp_fu_260_p0;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state137;
reg   [31:0] grp_fu_269_p0;
wire    ap_CS_fsm_state85;
reg   [63:0] grp_fu_280_p0;
reg   [63:0] grp_fu_280_p1;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state147;
reg   [63:0] grp_fu_284_p0;
reg   [63:0] grp_fu_284_p1;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state133;
wire    ap_CS_fsm_state43;
wire   [31:0] bitcast_ln32_fu_414_p1;
wire   [7:0] tmp_fu_418_p4;
wire   [22:0] trunc_ln32_fu_428_p1;
wire   [0:0] or_ln32_fu_444_p2;
wire   [0:0] grp_fu_269_p2;
wire   [31:0] bitcast_ln22_fu_454_p1;
wire   [31:0] xor_ln22_fu_457_p2;
wire   [22:0] tmp_V_1_fu_490_p1;
wire   [24:0] mantissa_V_fu_494_p4;
wire   [7:0] tmp_V_fu_480_p4;
wire   [8:0] zext_ln339_fu_508_p1;
wire   [8:0] add_ln339_fu_512_p2;
wire   [7:0] sub_ln1311_fu_526_p2;
wire   [0:0] isNeg_fu_518_p3;
wire  signed [8:0] sext_ln1311_fu_532_p1;
wire  signed [8:0] ush_fu_536_p3;
wire  signed [31:0] sext_ln1311_1_fu_544_p1;
wire  signed [24:0] sext_ln1311_2_fu_548_p1;
wire   [78:0] zext_ln682_fu_504_p1;
wire   [78:0] zext_ln1287_fu_552_p1;
wire   [24:0] r_V_fu_556_p2;
wire   [0:0] tmp_51_fu_568_p3;
wire   [78:0] r_V_1_fu_562_p2;
wire   [31:0] zext_ln662_fu_576_p1;
wire   [31:0] tmp_48_fu_580_p4;
wire   [31:0] result_V_1_fu_598_p2;
wire   [31:0] p_Val2_6_fu_603_p3;
wire   [0:0] abscond_fu_615_p2;
wire   [31:0] neg_fu_609_p2;
wire   [31:0] xor_ln34_fu_629_p2;
wire   [31:0] bitcast_ln40_fu_639_p1;
wire   [7:0] tmp_9_fu_643_p4;
wire   [22:0] trunc_ln40_fu_653_p1;
wire   [0:0] or_ln40_fu_669_p2;
wire   [0:0] and_ln40_fu_673_p2;
wire   [63:0] bitcast_ln57_fu_687_p1;
wire   [63:0] xor_ln57_fu_691_p2;
wire    ap_CS_fsm_state179;
reg   [1:0] grp_fu_208_opcode;
reg    grp_fu_208_ce;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state172;
wire    ap_CS_fsm_state173;
wire    ap_CS_fsm_state176;
wire    ap_CS_fsm_state177;
wire    ap_CS_fsm_state178;
reg    grp_fu_212_ce;
reg    grp_fu_217_ce;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state143;
wire    ap_CS_fsm_state144;
wire    ap_CS_fsm_state148;
wire    ap_CS_fsm_state164;
wire    ap_CS_fsm_state165;
wire    ap_CS_fsm_state168;
wire    ap_CS_fsm_state169;
reg    grp_fu_222_ce;
reg    grp_fu_239_ce;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state156;
wire    ap_CS_fsm_state157;
wire    ap_CS_fsm_state158;
reg    grp_fu_251_ce;
reg    grp_fu_255_ce;
reg   [4:0] grp_fu_269_opcode;
reg   [1:0] grp_fu_280_opcode;
reg    grp_fu_284_ce;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state127;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [178:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 179'd1;
#0 grp_atan_fu_162_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_double_s_fu_169_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_double_s_fu_188_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
end

atan grp_atan_fu_162(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_atan_fu_162_ap_start),
    .ap_done(grp_atan_fu_162_ap_done),
    .ap_idle(grp_atan_fu_162_ap_idle),
    .ap_ready(grp_atan_fu_162_ap_ready),
    .x(grp_atan_fu_162_x),
    .ap_return(grp_atan_fu_162_ap_return)
);

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_169(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_169_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_169_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_169_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_169_ap_ready),
    .t_in(grp_sin_or_cos_double_s_fu_169_t_in),
    .do_cos(grp_sin_or_cos_double_s_fu_169_do_cos),
    .ap_return(grp_sin_or_cos_double_s_fu_169_ap_return)
);

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_188(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_188_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_188_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_188_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_188_ap_ready),
    .t_in(reg_309),
    .do_cos(grp_sin_or_cos_double_s_fu_188_do_cos),
    .ap_return(grp_sin_or_cos_double_s_fu_188_ap_return)
);

top_level_faddfsuudo #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_faddfsuudo_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_208_p0),
    .din1(grp_fu_208_p1),
    .opcode(grp_fu_208_opcode),
    .ce(grp_fu_208_ce),
    .dout(grp_fu_208_p2)
);

top_level_fadd_32vdy #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fadd_32vdy_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_345),
    .din1(reg_350),
    .ce(grp_fu_212_ce),
    .dout(grp_fu_212_p2)
);

top_level_fmul_32wdI #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32wdI_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_217_p0),
    .din1(grp_fu_217_p1),
    .ce(grp_fu_217_ce),
    .dout(grp_fu_217_p2)
);

top_level_fmul_32wdI #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32wdI_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_222_p0),
    .din1(grp_fu_222_p1),
    .ce(grp_fu_222_ce),
    .dout(grp_fu_222_p2)
);

top_level_fmul_32wdI #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32wdI_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sin_steer_reg_731),
    .din1(grp_fu_227_p1),
    .ce(1'b1),
    .dout(grp_fu_227_p2)
);

top_level_fmul_32wdI #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32wdI_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_324),
    .din1(grp_fu_232_p1),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

top_level_fdiv_32xdS #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fdiv_32xdS_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_239_p0),
    .din1(grp_fu_239_p1),
    .ce(grp_fu_239_ce),
    .dout(grp_fu_239_p2)
);

top_level_fdiv_32xdS #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fdiv_32xdS_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_reg_846),
    .din1(s_reg_853),
    .ce(1'b1),
    .dout(grp_fu_243_p2)
);

top_level_sitofp_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_sitofp_yd2_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(abs_reg_801),
    .ce(1'b1),
    .dout(grp_fu_248_p1)
);

top_level_fptrunczec #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
top_level_fptrunczec_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_251_p0),
    .ce(grp_fu_251_ce),
    .dout(grp_fu_251_p1)
);

top_level_fptrunczec #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
top_level_fptrunczec_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_255_p0),
    .ce(grp_fu_255_ce),
    .dout(grp_fu_255_p1)
);

top_level_fpext_3Aem #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
top_level_fpext_3Aem_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_260_p0),
    .ce(1'b1),
    .dout(grp_fu_260_p1)
);

top_level_fpext_3Aem #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
top_level_fpext_3Aem_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(slipAngle_1_reg_152),
    .ce(1'b1),
    .dout(grp_fu_265_p1)
);

top_level_fcmp_32Bew #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
top_level_fcmp_32Bew_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_269_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_269_opcode),
    .dout(grp_fu_269_p2)
);

top_level_fsqrt_3CeG #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fsqrt_3CeG_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_355),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

top_level_dadddsuDeQ #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_dadddsuDeQ_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_280_p0),
    .din1(grp_fu_280_p1),
    .opcode(grp_fu_280_opcode),
    .ce(1'b1),
    .dout(grp_fu_280_p2)
);

top_level_dmul_64Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_dmul_64Ee0_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_284_p0),
    .din1(grp_fu_284_p1),
    .ce(grp_fu_284_ce),
    .dout(grp_fu_284_p2)
);

top_level_dmul_64Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_dmul_64Ee0_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_375),
    .din1(64'd13819745816549104026),
    .ce(1'b1),
    .dout(grp_fu_293_p2)
);

top_level_ddiv_64sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_ddiv_64sc4_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_309),
    .din1(64'd4611235658464650854),
    .ce(1'b1),
    .dout(grp_fu_299_p2)
);

top_level_ddiv_64sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_level_ddiv_64sc4_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_12_reg_831),
    .din1(64'd4613262278296967578),
    .ce(1'b1),
    .dout(grp_fu_304_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state179)) begin
            ap_return_0_preg <= reg_355;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state179)) begin
            ap_return_1_preg <= reg_362;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state179)) begin
            ap_return_2_preg <= grp_fu_208_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_atan_fu_162_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state36))) begin
            grp_atan_fu_162_ap_start_reg <= 1'b1;
        end else if ((grp_atan_fu_162_ap_ready == 1'b1)) begin
            grp_atan_fu_162_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_169_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state139))) begin
            grp_sin_or_cos_double_s_fu_169_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_169_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_169_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_188_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_sin_or_cos_double_s_fu_188_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_188_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_188_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        slipAngle_1_reg_152 <= select_ln40_fu_679_p3;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        slipAngle_1_reg_152 <= grp_fu_251_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        slipRatio_0_reg_140 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        slipRatio_0_reg_140 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        a_reg_846 <= grp_fu_255_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        abs_reg_801 <= abs_fu_621_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        and_ln32_reg_760 <= and_ln32_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln32_1_reg_755 <= icmp_ln32_1_fu_438_p2;
        icmp_ln32_reg_750 <= icmp_ln32_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        icmp_ln40_1_reg_821 <= icmp_ln40_1_fu_663_p2;
        icmp_ln40_reg_816 <= icmp_ln40_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        long_input_reg_861 <= grp_fu_251_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_Result_s_reg_790 <= p_Val2_s_fu_468_p1[32'd31];
        p_Val2_5_reg_795 <= p_Val2_5_fu_590_p3;
        p_Val2_s_reg_785 <= p_Val2_s_fu_468_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_309 <= grp_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_324 <= grp_fu_251_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_330 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_339 <= grp_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_345 <= grp_fu_227_p2;
        reg_350 <= grp_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state175) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_355 <= grp_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state175) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_362 <= grp_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state112))) begin
        reg_368 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state153)) | ((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state132)) | ((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state114)) | ((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_state140_on_subcall_done) & (1'b1 == ap_CS_fsm_state140)))) begin
        reg_375 <= grp_atan_fu_162_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state38))) begin
        reg_383 <= grp_fu_251_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state138))) begin
        reg_392 <= grp_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state119))) begin
        reg_400 <= grp_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state149))) begin
        reg_406 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        s_reg_853 <= grp_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sin_steer_reg_731 <= grp_fu_255_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        tmp_11_reg_836 <= grp_fu_299_p2;
        tmp_13_reg_841 <= grp_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_12_reg_831 <= grp_fu_265_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        tmp_20_reg_871 <= grp_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        tmp_21_reg_876 <= grp_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        tmp_33_reg_881 <= grp_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        tmp_38_reg_866 <= grp_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_s_reg_806 <= grp_fu_248_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state179) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state179)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state179)) begin
        ap_return_0 = reg_355;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state179)) begin
        ap_return_1 = reg_362;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state179)) begin
        ap_return_2 = grp_fu_208_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state153) | (1'b1 == ap_CS_fsm_state132))) begin
        grp_atan_fu_162_x = reg_400;
    end else if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state140))) begin
        grp_atan_fu_162_x = reg_309;
    end else begin
        grp_atan_fu_162_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state175) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state178) | (1'b1 == ap_CS_fsm_state177) | (1'b1 == ap_CS_fsm_state176) | (1'b1 == ap_CS_fsm_state173) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state179) | ((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state153)) | ((grp_sin_or_cos_double_s_fu_169_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13)))) begin
        grp_fu_208_ce = 1'b1;
    end else begin
        grp_fu_208_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_208_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state175))) begin
        grp_fu_208_opcode = 2'd0;
    end else begin
        grp_fu_208_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state175)) begin
        grp_fu_208_p0 = reg_406;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        grp_fu_208_p0 = torque;
    end else if (((1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_208_p0 = reg_330;
    end else begin
        grp_fu_208_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state175)) begin
        grp_fu_208_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        grp_fu_208_p1 = reg_406;
    end else if (((1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_208_p1 = reg_339;
    end else begin
        grp_fu_208_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state175) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state173) | (1'b1 == ap_CS_fsm_state172) | ((grp_sin_or_cos_double_s_fu_169_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13)))) begin
        grp_fu_212_ce = 1'b1;
    end else begin
        grp_fu_212_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state163) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state173) | (1'b1 == ap_CS_fsm_state172) | ((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state114)))) begin
        grp_fu_217_ce = 1'b1;
    end else begin
        grp_fu_217_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        grp_fu_217_p0 = reg_339;
    end else if (((1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state146))) begin
        grp_fu_217_p0 = reg_330;
    end else if (((1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state113))) begin
        grp_fu_217_p0 = reg_368;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_217_p0 = s_reg_853;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_217_p0 = reg_383;
    end else if (((1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_217_p0 = reg_324;
    end else begin
        grp_fu_217_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state171)) begin
        grp_fu_217_p1 = deltaTime;
    end else if ((1'b1 == ap_CS_fsm_state167)) begin
        grp_fu_217_p1 = reg_330;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        grp_fu_217_p1 = 32'd1050253722;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_217_p1 = load;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_217_p1 = 32'd1092616192;
    end else if (((1'b1 == ap_CS_fsm_state163) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state76))) begin
        grp_fu_217_p1 = reg_383;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_217_p1 = velocity_x;
    end else begin
        grp_fu_217_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state8) | ((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state114)))) begin
        grp_fu_222_ce = 1'b1;
    end else begin
        grp_fu_222_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_222_p0 = tmp_38_reg_866;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_222_p0 = a_reg_846;
    end else if (((1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_222_p0 = sin_steer_reg_731;
    end else begin
        grp_fu_222_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        grp_fu_222_p1 = reg_406;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_222_p1 = load;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_222_p1 = a_reg_846;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_222_p1 = velocity_z;
    end else begin
        grp_fu_222_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        grp_fu_227_p1 = reg_330;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_227_p1 = velocity_x;
    end else begin
        grp_fu_227_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        grp_fu_232_p1 = reg_406;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_232_p1 = velocity_z;
    end else begin
        grp_fu_232_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state163) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | ((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((grp_sin_or_cos_double_s_fu_169_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state161)))) begin
        grp_fu_239_ce = 1'b1;
    end else begin
        grp_fu_239_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state155)) begin
        grp_fu_239_p0 = reg_355;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_239_p0 = reg_383;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_239_p0 = bitcast_ln34_1_fu_634_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_239_p0 = reg_362;
    end else begin
        grp_fu_239_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state155)) begin
        grp_fu_239_p1 = 32'd1084227584;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_239_p1 = s_reg_853;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_239_p1 = tmp_s_reg_806;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_239_p1 = reg_355;
    end else begin
        grp_fu_239_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state5) | ((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_state140_on_subcall_done) & (1'b1 == ap_CS_fsm_state140)) | ((grp_sin_or_cos_double_s_fu_169_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state161)) | ((grp_sin_or_cos_double_s_fu_169_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_fu_251_ce = 1'b1;
    end else begin
        grp_fu_251_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        grp_fu_251_p0 = bitcast_ln57_1_fu_697_p1;
    end else if (((1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state109))) begin
        grp_fu_251_p0 = reg_392;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_251_p0 = tmp_11_reg_836;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_251_p0 = grp_atan_fu_162_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_251_p0 = grp_sin_or_cos_double_s_fu_169_ap_return;
    end else begin
        grp_fu_251_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_fu_255_ce = 1'b1;
    end else begin
        grp_fu_255_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_255_p0 = tmp_13_reg_841;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_255_p0 = grp_sin_or_cos_double_s_fu_188_ap_return;
    end else begin
        grp_fu_255_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        grp_fu_260_p0 = reg_383;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        grp_fu_260_p0 = s_reg_853;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_fu_260_p0 = long_input_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        grp_fu_260_p0 = reg_330;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_260_p0 = slipRatio_0_reg_140;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_260_p0 = reg_368;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_260_p0 = bitcast_ln22_1_fu_463_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_260_p0 = steeringAngle;
    end else begin
        grp_fu_260_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_269_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_269_opcode = 5'd1;
    end else begin
        grp_fu_269_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_269_p0 = reg_362;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_269_p0 = velocity_x;
    end else begin
        grp_fu_269_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state115))) begin
        grp_fu_280_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        grp_fu_280_opcode = 2'd0;
    end else begin
        grp_fu_280_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        grp_fu_280_p0 = reg_392;
    end else if (((1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state115))) begin
        grp_fu_280_p0 = reg_309;
    end else begin
        grp_fu_280_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        grp_fu_280_p1 = tmp_33_reg_881;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        grp_fu_280_p1 = reg_392;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        grp_fu_280_p1 = reg_375;
    end else begin
        grp_fu_280_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | ((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state132)))) begin
        grp_fu_284_ce = 1'b1;
    end else begin
        grp_fu_284_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state154))) begin
        grp_fu_284_p0 = reg_375;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        grp_fu_284_p0 = tmp_21_reg_876;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        grp_fu_284_p0 = tmp_20_reg_871;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        grp_fu_284_p0 = reg_400;
    end else if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state141))) begin
        grp_fu_284_p0 = reg_309;
    end else begin
        grp_fu_284_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        grp_fu_284_p1 = 64'd4608983858650965606;
    end else if ((1'b1 == ap_CS_fsm_state141)) begin
        grp_fu_284_p1 = 64'd4608083138725491507;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        grp_fu_284_p1 = 64'd4613262278296967578;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        grp_fu_284_p1 = 64'd4604606359813161484;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        grp_fu_284_p1 = 64'd4606912202822375178;
    end else if (((1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state103))) begin
        grp_fu_284_p1 = 64'd4611235658464650854;
    end else begin
        grp_fu_284_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state140))) begin
        grp_sin_or_cos_double_s_fu_169_do_cos = 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_sin_or_cos_double_s_fu_169_do_cos = 1'd1;
    end else begin
        grp_sin_or_cos_double_s_fu_169_do_cos = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state140))) begin
        grp_sin_or_cos_double_s_fu_169_t_in = reg_392;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_sin_or_cos_double_s_fu_169_t_in = reg_309;
    end else begin
        grp_sin_or_cos_double_s_fu_169_t_in = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_sin_or_cos_double_s_fu_169_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'd1 == and_ln32_reg_760) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            if (((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state114))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            if (((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state132))) begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            if (((1'b0 == ap_block_state140_on_subcall_done) & (1'b1 == ap_CS_fsm_state140))) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            if (((grp_atan_fu_162_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state153))) begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state153;
            end
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            if (((grp_sin_or_cos_double_s_fu_169_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state161))) begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_fu_621_p3 = ((abscond_fu_615_p2[0:0] === 1'b1) ? p_Val2_6_fu_603_p3 : neg_fu_609_p2);

assign abscond_fu_615_p2 = (($signed(p_Val2_6_fu_603_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign add_ln339_fu_512_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_508_p1));

assign and_ln32_fu_448_p2 = (or_ln32_fu_444_p2 & grp_fu_269_p2);

assign and_ln40_fu_673_p2 = (or_ln40_fu_669_p2 & grp_fu_269_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state171 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state172 = ap_CS_fsm[32'd171];

assign ap_CS_fsm_state173 = ap_CS_fsm[32'd172];

assign ap_CS_fsm_state174 = ap_CS_fsm[32'd173];

assign ap_CS_fsm_state175 = ap_CS_fsm[32'd174];

assign ap_CS_fsm_state176 = ap_CS_fsm[32'd175];

assign ap_CS_fsm_state177 = ap_CS_fsm[32'd176];

assign ap_CS_fsm_state178 = ap_CS_fsm[32'd177];

assign ap_CS_fsm_state179 = ap_CS_fsm[32'd178];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

always @ (*) begin
    ap_block_state140_on_subcall_done = ((grp_atan_fu_162_ap_done == 1'b0) | (grp_sin_or_cos_double_s_fu_169_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_sin_or_cos_double_s_fu_188_ap_done == 1'b0) | (grp_sin_or_cos_double_s_fu_169_ap_done == 1'b0));
end

assign bitcast_ln22_1_fu_463_p1 = xor_ln22_fu_457_p2;

assign bitcast_ln22_fu_454_p1 = steeringAngle;

assign bitcast_ln32_fu_414_p1 = velocity_x;

assign bitcast_ln34_1_fu_634_p1 = xor_ln34_fu_629_p2;

assign bitcast_ln40_fu_639_p1 = reg_362;

assign bitcast_ln57_1_fu_697_p1 = xor_ln57_fu_691_p2;

assign bitcast_ln57_fu_687_p1 = grp_sin_or_cos_double_s_fu_169_ap_return;

assign grp_atan_fu_162_ap_start = grp_atan_fu_162_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_169_ap_start = grp_sin_or_cos_double_s_fu_169_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_188_ap_start = grp_sin_or_cos_double_s_fu_188_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_188_do_cos = 1'd0;

assign icmp_ln32_1_fu_438_p2 = ((trunc_ln32_fu_428_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_432_p2 = ((tmp_fu_418_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_663_p2 = ((trunc_ln40_fu_653_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_657_p2 = ((tmp_9_fu_643_p4 != 8'd255) ? 1'b1 : 1'b0);

assign isNeg_fu_518_p3 = add_ln339_fu_512_p2[32'd8];

assign mantissa_V_fu_494_p4 = {{{{1'd1}, {tmp_V_1_fu_490_p1}}}, {1'd0}};

assign neg_fu_609_p2 = (32'd0 - p_Val2_6_fu_603_p3);

assign or_ln32_fu_444_p2 = (icmp_ln32_reg_750 | icmp_ln32_1_reg_755);

assign or_ln40_fu_669_p2 = (icmp_ln40_reg_816 | icmp_ln40_1_reg_821);

assign p_Val2_5_fu_590_p3 = ((isNeg_fu_518_p3[0:0] === 1'b1) ? zext_ln662_fu_576_p1 : tmp_48_fu_580_p4);

assign p_Val2_6_fu_603_p3 = ((p_Result_s_reg_790[0:0] === 1'b1) ? result_V_1_fu_598_p2 : p_Val2_5_reg_795);

assign p_Val2_s_fu_468_p1 = reg_355;

assign r_V_1_fu_562_p2 = zext_ln682_fu_504_p1 << zext_ln1287_fu_552_p1;

assign r_V_fu_556_p2 = mantissa_V_fu_494_p4 >> sext_ln1311_2_fu_548_p1;

assign result_V_1_fu_598_p2 = (32'd0 - p_Val2_5_reg_795);

assign select_ln40_fu_679_p3 = ((and_ln40_fu_673_p2[0:0] === 1'b1) ? 32'd1119092736 : 32'd3266576384);

assign sext_ln1311_1_fu_544_p1 = ush_fu_536_p3;

assign sext_ln1311_2_fu_548_p1 = ush_fu_536_p3;

assign sext_ln1311_fu_532_p1 = $signed(sub_ln1311_fu_526_p2);

assign sub_ln1311_fu_526_p2 = (8'd127 - tmp_V_fu_480_p4);

assign tmp_48_fu_580_p4 = {{r_V_1_fu_562_p2[55:24]}};

assign tmp_51_fu_568_p3 = r_V_fu_556_p2[32'd24];

assign tmp_9_fu_643_p4 = {{bitcast_ln40_fu_639_p1[30:23]}};

assign tmp_V_1_fu_490_p1 = p_Val2_s_fu_468_p1[22:0];

assign tmp_V_fu_480_p4 = {{p_Val2_s_fu_468_p1[30:23]}};

assign tmp_fu_418_p4 = {{bitcast_ln32_fu_414_p1[30:23]}};

assign trunc_ln32_fu_428_p1 = bitcast_ln32_fu_414_p1[22:0];

assign trunc_ln40_fu_653_p1 = bitcast_ln40_fu_639_p1[22:0];

assign ush_fu_536_p3 = ((isNeg_fu_518_p3[0:0] === 1'b1) ? sext_ln1311_fu_532_p1 : add_ln339_fu_512_p2);

assign xor_ln22_fu_457_p2 = (bitcast_ln22_fu_454_p1 ^ 32'd2147483648);

assign xor_ln34_fu_629_p2 = (p_Val2_s_reg_785 ^ 32'd2147483648);

assign xor_ln57_fu_691_p2 = (bitcast_ln57_fu_687_p1 ^ 64'd9223372036854775808);

assign zext_ln1287_fu_552_p1 = $unsigned(sext_ln1311_1_fu_544_p1);

assign zext_ln339_fu_508_p1 = tmp_V_fu_480_p4;

assign zext_ln662_fu_576_p1 = tmp_51_fu_568_p3;

assign zext_ln682_fu_504_p1 = mantissa_V_fu_494_p4;

endmodule //update
