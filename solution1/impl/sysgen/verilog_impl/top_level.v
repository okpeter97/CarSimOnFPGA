// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_level,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.286643,HLS_SYN_LAT=798,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=220,HLS_SYN_FF=28309,HLS_SYN_LUT=40900,HLS_VERSION=2019_1}" *)

module top_level (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        deltaTime,
        torque,
        velocity_x,
        velocity_z,
        load,
        steeringAngle,
        force_x,
        force_x_ap_vld,
        force_z,
        force_z_ap_vld,
        angularVel,
        angularVel_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] deltaTime;
input  [31:0] torque;
input  [31:0] velocity_x;
input  [31:0] velocity_z;
input  [31:0] load;
input  [31:0] steeringAngle;
output  [31:0] force_x;
output   force_x_ap_vld;
output  [31:0] force_z;
output   force_z_ap_vld;
output  [31:0] angularVel;
output   angularVel_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg force_x_ap_vld;
reg force_z_ap_vld;
reg angularVel_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_update_fu_101_ap_start;
wire    grp_update_fu_101_ap_done;
wire    grp_update_fu_101_ap_idle;
wire    grp_update_fu_101_ap_ready;
wire   [31:0] grp_update_fu_101_ap_return_0;
wire   [31:0] grp_update_fu_101_ap_return_1;
wire   [31:0] grp_update_fu_101_ap_return_2;
reg    grp_update_fu_101_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_update_fu_101_ap_start_reg = 1'b0;
end

update grp_update_fu_101(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_fu_101_ap_start),
    .ap_done(grp_update_fu_101_ap_done),
    .ap_idle(grp_update_fu_101_ap_idle),
    .ap_ready(grp_update_fu_101_ap_ready),
    .deltaTime(deltaTime),
    .torque(torque),
    .velocity_x(velocity_x),
    .velocity_z(velocity_z),
    .load(load),
    .steeringAngle(steeringAngle),
    .ap_return_0(grp_update_fu_101_ap_return_0),
    .ap_return_1(grp_update_fu_101_ap_return_1),
    .ap_return_2(grp_update_fu_101_ap_return_2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_fu_101_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_update_fu_101_ap_start_reg <= 1'b1;
        end else if ((grp_update_fu_101_ap_ready == 1'b1)) begin
            grp_update_fu_101_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((grp_update_fu_101_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        angularVel_ap_vld = 1'b1;
    end else begin
        angularVel_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_update_fu_101_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_update_fu_101_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_update_fu_101_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        force_x_ap_vld = 1'b1;
    end else begin
        force_x_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_update_fu_101_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        force_z_ap_vld = 1'b1;
    end else begin
        force_z_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_update_fu_101_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign angularVel = grp_update_fu_101_ap_return_2;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign force_x = grp_update_fu_101_ap_return_0;

assign force_z = grp_update_fu_101_ap_return_1;

assign grp_update_fu_101_ap_start = grp_update_fu_101_ap_start_reg;

endmodule //top_level
