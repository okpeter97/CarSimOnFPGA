-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity atan2_generic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_in : IN STD_LOGIC_VECTOR (63 downto 0);
    x_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of atan2_generic is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv86_0 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_1B : STD_LOGIC_VECTOR (11 downto 0) := "000000011011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_58 : STD_LOGIC_VECTOR (6 downto 0) := "1011000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv42_3FFFFFFFFFF : STD_LOGIC_VECTOR (41 downto 0) := "111111111111111111111111111111111111111111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv86_3FFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (85 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_ctab_table_12_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cordic_ctab_table_12_ce0 : STD_LOGIC;
    signal cordic_ctab_table_12_q0 : STD_LOGIC_VECTOR (125 downto 0);
    signal tmp_V_23_fu_236_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_23_reg_837 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_25_fu_254_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_25_reg_842 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln841_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln841_reg_847 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_20_fu_284_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_20_reg_854 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln833_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln682_fu_307_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_40_fu_363_p3 : STD_LOGIC_VECTOR (88 downto 0);
    signal k_fu_376_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_879 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_V_43_fu_386_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_43_reg_884 : STD_LOGIC_VECTOR (88 downto 0);
    signal icmp_ln167_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_44_fu_392_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_44_reg_890 : STD_LOGIC_VECTOR (88 downto 0);
    signal tmp_V_fu_409_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_V_reg_904 : STD_LOGIC_VECTOR (85 downto 0);
    signal icmp_ln839_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tx_V_fu_433_p3 : STD_LOGIC_VECTOR (88 downto 0);
    signal tx_V_reg_914 : STD_LOGIC_VECTOR (88 downto 0);
    signal ty_V_fu_459_p3 : STD_LOGIC_VECTOR (88 downto 0);
    signal ty_V_reg_919 : STD_LOGIC_VECTOR (88 downto 0);
    signal p_Val2_67_fu_489_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal p_Val2_67_reg_924 : STD_LOGIC_VECTOR (84 downto 0);
    signal tz_V_fu_510_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Result_52_fu_517_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_52_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_V_27_fu_525_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_V_27_reg_939 : STD_LOGIC_VECTOR (85 downto 0);
    signal l_fu_590_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln847_fu_598_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln847_reg_952 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln848_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln848_reg_957 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal or_ln_fu_699_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln858_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln858_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_8_reg_973 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_20_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln683_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_216_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_988 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_V_26_reg_157 : STD_LOGIC_VECTOR (85 downto 0);
    signal p_Val2_40_reg_169 : STD_LOGIC_VECTOR (88 downto 0);
    signal p_Val2_57_reg_179 : STD_LOGIC_VECTOR (88 downto 0);
    signal ush_2_reg_189 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_p_0136_phi_fu_204_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0136_reg_200 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal zext_ln192_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_56_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_24_fu_244_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_258_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_22_fu_226_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_262_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_fu_268_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_V_fu_298_p4 : STD_LOGIC_VECTOR (85 downto 0);
    signal shl_ln_fu_311_p4 : STD_LOGIC_VECTOR (85 downto 0);
    signal sub_ln1321_fu_324_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal d_exp_fu_329_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1321_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln682_1_fu_320_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln1253_fu_339_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln1251_fu_343_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal r_V_39_fu_353_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal r_V_fu_347_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln1287_fu_359_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln1253_1_fu_382_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal sub_ln130_fu_423_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal add_ln130_fu_428_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal tmp_15_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln130_3_fu_454_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal sub_ln130_3_fu_449_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal tmp_16_fu_477_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln667_2_fu_467_p4 : STD_LOGIC_VECTOR (84 downto 0);
    signal zext_ln369_fu_485_p1 : STD_LOGIC_VECTOR (84 downto 0);
    signal zext_ln369_2_fu_495_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal sub_ln130_4_fu_498_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal add_ln130_4_fu_504_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal p_Result_s_fu_532_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_542_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1035_fu_560_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_53_fu_564_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_572_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1028_fu_550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1037_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1029_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NZeros_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_613_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln851_fu_629_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln851_fu_633_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln851_fu_639_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal lshr_ln851_fu_643_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal p_Result_50_fu_649_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal icmp_ln851_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln851_2_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_680_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln853_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln853_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln853_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln858_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln858_fu_718_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal sub_ln858_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln858_2_fu_732_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal lshr_ln858_fu_722_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal shl_ln858_fu_736_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal trunc_ln858_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln858_2_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_749_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln865_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_6_fu_759_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln869_fu_786_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln869_fu_793_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln869_fu_798_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_10_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_804_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_54_fu_811_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component top_level_ddiv_64rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component atan2_generic_corqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;



begin
    cordic_ctab_table_12_U : component atan2_generic_corqcK
    generic map (
        DataWidth => 126,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_ctab_table_12_address0,
        ce0 => cordic_ctab_table_12_ce0,
        q0 => cordic_ctab_table_12_q0);

    top_level_ddiv_64rcU_U34 : component top_level_ddiv_64rcU
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_in,
        din1 => x_in,
        ce => ap_const_logic_1,
        dout => grp_fu_216_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ap_return_preg <= ap_phi_mux_p_0136_phi_fu_204_p8;
                end if; 
            end if;
        end if;
    end process;


    p_0136_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln833_fu_278_p2 = ap_const_lv1_1) and (icmp_ln841_fu_272_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln839_fu_403_p2 = ap_const_lv1_1) and (icmp_ln167_fu_370_p2 = ap_const_lv1_1)))) then 
                p_0136_reg_200 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_0136_reg_200 <= bitcast_ln683_fu_823_p1;
            elsif (((icmp_ln841_reg_847 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                p_0136_reg_200 <= tmp_i_reg_988;
            end if; 
        end if;
    end process;

    p_Val2_40_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_Val2_40_reg_169 <= r_V_40_fu_363_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_40_reg_169 <= ty_V_reg_919;
            end if; 
        end if;
    end process;

    p_Val2_57_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_Val2_57_reg_179 <= zext_ln682_fu_307_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_57_reg_179 <= tx_V_reg_914;
            end if; 
        end if;
    end process;

    tmp_V_26_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                tmp_V_26_reg_157 <= ap_const_lv86_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_V_26_reg_157 <= tz_V_fu_510_p3;
            end if; 
        end if;
    end process;

    ush_2_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                ush_2_reg_189 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ush_2_reg_189 <= k_reg_879;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln841_reg_847 <= icmp_ln841_fu_272_p2;
                tmp_V_23_reg_837 <= tmp_V_23_fu_236_p1;
                tmp_V_25_reg_842 <= tmp_V_25_fu_254_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln858_reg_968 <= icmp_ln858_fu_707_p2;
                    or_ln_reg_963(0) <= or_ln_fu_699_p3(0);
                sub_ln848_reg_957 <= sub_ln848_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln833_fu_278_p2 = ap_const_lv1_0) and (icmp_ln841_fu_272_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                isNeg_reg_860 <= ret_V_20_fu_284_p2(11 downto 11);
                ret_V_20_reg_854 <= ret_V_20_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_879 <= k_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                l_reg_947 <= l_fu_590_p3;
                p_Result_52_reg_934 <= tmp_V_26_reg_157(85 downto 85);
                tmp_V_27_reg_939 <= tmp_V_27_fu_525_p3;
                trunc_ln847_reg_952 <= trunc_ln847_fu_598_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                m_8_reg_973 <= m_6_fu_759_p2(63 downto 1);
                tmp_20_reg_978 <= m_6_fu_759_p2(54 downto 54);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Val2_67_reg_924 <= p_Val2_67_fu_489_p2;
                tmp_reg_909 <= p_Val2_40_reg_169(88 downto 88);
                tx_V_reg_914 <= tx_V_fu_433_p3;
                ty_V_reg_919 <= ty_V_fu_459_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                r_V_43_reg_884 <= r_V_43_fu_386_p2;
                r_V_44_reg_890 <= r_V_44_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln839_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln167_fu_370_p2 = ap_const_lv1_1))) then
                tmp_V_reg_904 <= tmp_V_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                tmp_i_reg_988 <= grp_fu_216_p2;
            end if;
        end if;
    end process;
    or_ln_reg_963(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln841_fu_272_p2, icmp_ln833_fu_278_p2, ap_CS_fsm_state3, icmp_ln167_fu_370_p2, icmp_ln839_fu_403_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln833_fu_278_p2 = ap_const_lv1_1) and (icmp_ln841_fu_272_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((icmp_ln833_fu_278_p2 = ap_const_lv1_0) and (icmp_ln841_fu_272_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln841_fu_272_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln839_fu_403_p2 = ap_const_lv1_1) and (icmp_ln167_fu_370_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((icmp_ln839_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln167_fu_370_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    NZeros_fu_584_p2 <= std_logic_vector(unsigned(trunc_ln1028_fu_550_p1) + unsigned(trunc_ln1037_fu_580_p1));
    a_fu_660_p2 <= (icmp_ln851_fu_623_p2 and icmp_ln851_2_fu_654_p2);
    add_ln130_3_fu_454_p2 <= std_logic_vector(unsigned(p_Val2_40_reg_169) + unsigned(r_V_44_reg_890));
    add_ln130_4_fu_504_p2 <= std_logic_vector(unsigned(tmp_V_26_reg_157) + unsigned(zext_ln369_2_fu_495_p1));
    add_ln130_fu_428_p2 <= std_logic_vector(unsigned(p_Val2_57_reg_179) + unsigned(r_V_43_reg_884));
    add_ln858_fu_713_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln848_reg_957));
    add_ln869_fu_798_p2 <= std_logic_vector(unsigned(select_ln869_fu_786_p3) + unsigned(sub_ln869_fu_793_p2));
    and_ln853_fu_687_p2 <= (xor_ln853_fu_674_p2 and p_Result_9_fu_680_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0136_phi_fu_204_p8_assign_proc : process(icmp_ln841_reg_847, tmp_i_reg_988, p_0136_reg_200, ap_CS_fsm_state40)
    begin
        if (((icmp_ln841_reg_847 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_phi_mux_p_0136_phi_fu_204_p8 <= tmp_i_reg_988;
        else 
            ap_phi_mux_p_0136_phi_fu_204_p8 <= p_0136_reg_200;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_0136_phi_fu_204_p8, ap_CS_fsm_state40, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ap_return <= ap_phi_mux_p_0136_phi_fu_204_p8;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln683_fu_823_p1 <= p_Result_54_fu_811_p5;
    cordic_ctab_table_12_address0 <= zext_ln192_fu_398_p1(7 - 1 downto 0);

    cordic_ctab_table_12_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cordic_ctab_table_12_ce0 <= ap_const_logic_1;
        else 
            cordic_ctab_table_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_exp_fu_329_p3 <= 
        sub_ln1321_fu_324_p2 when (isNeg_reg_860(0) = '1') else 
        ret_V_20_reg_854;
    icmp_ln1029_fu_554_p2 <= "1" when (p_Result_s_fu_532_p4 = ap_const_lv64_0) else "0";
    icmp_ln167_fu_370_p2 <= "1" when (ush_2_reg_189 = ap_const_lv7_58) else "0";
    icmp_ln833_fu_278_p2 <= "1" when (tmp_V_24_fu_244_p4 = ap_const_lv11_0) else "0";
    icmp_ln839_fu_403_p2 <= "1" when (tmp_V_26_reg_157 = ap_const_lv86_0) else "0";
    icmp_ln841_fu_272_p2 <= "1" when (unsigned(ret_V_fu_262_p2) < unsigned(lhs_V_fu_268_p1)) else "0";
    icmp_ln851_2_fu_654_p2 <= "0" when (p_Result_50_fu_649_p2 = ap_const_lv86_0) else "1";
    icmp_ln851_fu_623_p2 <= "1" when (signed(tmp_18_fu_613_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln858_fu_707_p2 <= "1" when (signed(lsb_index_fu_607_p2) > signed(ap_const_lv32_0)) else "0";
    k_fu_376_p2 <= std_logic_vector(unsigned(ush_2_reg_189) + unsigned(ap_const_lv7_1));
    l_fu_590_p3 <= 
        NZeros_fu_584_p2 when (icmp_ln1029_fu_554_p2(0) = '1') else 
        trunc_ln1028_fu_550_p1;
    lhs_V_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_22_fu_226_p4),12));
    lsb_index_fu_607_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln848_fu_602_p2));
    lshr_ln851_fu_643_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv86_3FFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln851_fu_639_p1(31-1 downto 0)))));
    lshr_ln858_fu_722_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_27_reg_939),to_integer(unsigned('0' & zext_ln858_fu_718_p1(31-1 downto 0)))));
    m_10_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_8_reg_973),64));
    m_6_fu_759_p2 <= std_logic_vector(unsigned(m_fu_749_p3) + unsigned(zext_ln865_fu_756_p1));
    m_fu_749_p3 <= 
        trunc_ln858_fu_741_p1 when (icmp_ln858_reg_968(0) = '1') else 
        trunc_ln858_2_fu_745_p1;
    or_ln853_fu_693_p2 <= (and_ln853_fu_687_p2 or a_fu_660_p2);
    or_ln_fu_699_p3 <= (ap_const_lv31_0 & or_ln853_fu_693_p2);
    p_Result_50_fu_649_p2 <= (tmp_V_27_reg_939 and lshr_ln851_fu_643_p2);
    p_Result_52_fu_517_p3 <= tmp_V_26_reg_157(85 downto 85);
    p_Result_53_fu_564_p3 <= (trunc_ln1035_fu_560_p1 & ap_const_lv42_3FFFFFFFFFF);
    p_Result_54_fu_811_p5 <= (tmp_2_fu_804_p3 & m_10_fu_783_p1(51 downto 0));
    p_Result_9_fu_680_p3 <= tmp_V_27_reg_939(to_integer(unsigned(lsb_index_fu_607_p2)) downto to_integer(unsigned(lsb_index_fu_607_p2))) when (to_integer(unsigned(lsb_index_fu_607_p2))>= 0 and to_integer(unsigned(lsb_index_fu_607_p2))<=85) else "-";
    p_Result_s_fu_532_p4 <= tmp_V_27_fu_525_p3(85 downto 22);
    p_Val2_56_fu_240_p1 <= y_in;
    p_Val2_67_fu_489_p2 <= std_logic_vector(unsigned(trunc_ln667_2_fu_467_p4) + unsigned(zext_ln369_fu_485_p1));
    p_Val2_s_fu_222_p1 <= x_in;
    r_V_39_fu_353_p2 <= std_logic_vector(shift_right(unsigned(shl_ln_fu_311_p4),to_integer(unsigned('0' & zext_ln1251_fu_343_p1(31-1 downto 0)))));
    r_V_40_fu_363_p3 <= 
        r_V_fu_347_p2 when (isNeg_reg_860(0) = '1') else 
        zext_ln1287_fu_359_p1;
    r_V_43_fu_386_p2 <= std_logic_vector(shift_right(signed(p_Val2_40_reg_169),to_integer(unsigned('0' & zext_ln1253_1_fu_382_p1(31-1 downto 0)))));
    r_V_44_fu_392_p2 <= std_logic_vector(shift_right(signed(p_Val2_57_reg_179),to_integer(unsigned('0' & zext_ln1253_1_fu_382_p1(31-1 downto 0)))));
    r_V_fu_347_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_1_fu_320_p1),to_integer(unsigned('0' & zext_ln1253_fu_339_p1(31-1 downto 0)))));
    ret_V_20_fu_284_p2 <= std_logic_vector(unsigned(lhs_V_fu_268_p1) - unsigned(rhs_V_fu_258_p1));
    ret_V_fu_262_p2 <= std_logic_vector(unsigned(ap_const_lv12_1B) + unsigned(rhs_V_fu_258_p1));
    rhs_V_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_24_fu_244_p4),12));
    select_ln869_fu_786_p3 <= 
        ap_const_lv11_3FF when (tmp_20_reg_978(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1321_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_exp_fu_329_p3),32));

    shl_ln858_fu_736_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_27_reg_939),to_integer(unsigned('0' & zext_ln858_2_fu_732_p1(31-1 downto 0)))));
    shl_ln_fu_311_p4 <= ((ap_const_lv1_1 & tmp_V_25_reg_842) & ap_const_lv33_0);
    sub_ln130_3_fu_449_p2 <= std_logic_vector(unsigned(p_Val2_40_reg_169) - unsigned(r_V_44_reg_890));
    sub_ln130_4_fu_498_p2 <= std_logic_vector(unsigned(tmp_V_26_reg_157) - unsigned(zext_ln369_2_fu_495_p1));
    sub_ln130_fu_423_p2 <= std_logic_vector(unsigned(p_Val2_57_reg_179) - unsigned(r_V_43_reg_884));
    sub_ln1321_fu_324_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(ret_V_20_reg_854));
    sub_ln848_fu_602_p2 <= std_logic_vector(unsigned(ap_const_lv32_56) - unsigned(l_reg_947));
    sub_ln851_fu_633_p2 <= std_logic_vector(unsigned(ap_const_lv7_C) - unsigned(trunc_ln851_fu_629_p1));
    sub_ln858_fu_727_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln848_reg_957));
    sub_ln869_fu_793_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) - unsigned(trunc_ln847_reg_952));
    tmp_15_fu_441_p3 <= p_Val2_40_reg_169(88 downto 88);
    tmp_16_fu_477_p3 <= cordic_ctab_table_12_q0(40 downto 40);
    tmp_18_fu_613_p4 <= lsb_index_fu_607_p2(31 downto 1);
    tmp_19_fu_666_p3 <= lsb_index_fu_607_p2(31 downto 31);
    tmp_2_fu_804_p3 <= (p_Result_52_reg_934 & add_ln869_fu_798_p2);
    
    tmp_9_fu_572_p3_proc : process(p_Result_53_fu_564_p3)
    begin
        tmp_9_fu_572_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_53_fu_564_p3(i) = '1' then
                tmp_9_fu_572_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_V_22_fu_226_p4 <= p_Val2_s_fu_222_p1(62 downto 52);
    tmp_V_23_fu_236_p1 <= p_Val2_s_fu_222_p1(52 - 1 downto 0);
    tmp_V_24_fu_244_p4 <= p_Val2_56_fu_240_p1(62 downto 52);
    tmp_V_25_fu_254_p1 <= p_Val2_56_fu_240_p1(52 - 1 downto 0);
    tmp_V_27_fu_525_p3 <= 
        tmp_V_reg_904 when (p_Result_52_fu_517_p3(0) = '1') else 
        tmp_V_26_reg_157;
    tmp_V_fu_409_p2 <= std_logic_vector(unsigned(ap_const_lv86_0) - unsigned(tmp_V_26_reg_157));
    tmp_fu_415_p3 <= p_Val2_40_reg_169(88 downto 88);
    
    tmp_s_fu_542_p3_proc : process(p_Result_s_fu_532_p4)
    begin
        tmp_s_fu_542_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_s_fu_532_p4(i) = '1' then
                tmp_s_fu_542_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln1028_fu_550_p1 <= tmp_s_fu_542_p3(32 - 1 downto 0);
    trunc_ln1035_fu_560_p1 <= tmp_V_27_fu_525_p3(22 - 1 downto 0);
    trunc_ln1037_fu_580_p1 <= tmp_9_fu_572_p3(32 - 1 downto 0);
    trunc_ln667_2_fu_467_p4 <= cordic_ctab_table_12_q0(125 downto 41);
    trunc_ln847_fu_598_p1 <= l_fu_590_p3(11 - 1 downto 0);
    trunc_ln851_fu_629_p1 <= sub_ln848_fu_602_p2(7 - 1 downto 0);
    trunc_ln858_2_fu_745_p1 <= shl_ln858_fu_736_p2(64 - 1 downto 0);
    trunc_ln858_fu_741_p1 <= lshr_ln858_fu_722_p2(64 - 1 downto 0);
    tx_V_fu_433_p3 <= 
        sub_ln130_fu_423_p2 when (tmp_fu_415_p3(0) = '1') else 
        add_ln130_fu_428_p2;
    ty_V_fu_459_p3 <= 
        add_ln130_3_fu_454_p2 when (tmp_15_fu_441_p3(0) = '1') else 
        sub_ln130_3_fu_449_p2;
    tz_V_fu_510_p3 <= 
        sub_ln130_4_fu_498_p2 when (tmp_reg_909(0) = '1') else 
        add_ln130_4_fu_504_p2;
    x_V_fu_298_p4 <= ((ap_const_lv1_1 & tmp_V_23_reg_837) & ap_const_lv33_0);
    xor_ln853_fu_674_p2 <= (tmp_19_fu_666_p3 xor ap_const_lv1_1);
    zext_ln1251_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1321_fu_335_p1),86));
    zext_ln1253_1_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ush_2_reg_189),89));
    zext_ln1253_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1321_fu_335_p1),89));
    zext_ln1287_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_39_fu_353_p2),89));
    zext_ln192_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ush_2_reg_189),64));
    zext_ln369_2_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_67_reg_924),86));
    zext_ln369_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_477_p3),85));
    zext_ln682_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_311_p4),89));
    zext_ln682_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_fu_298_p4),89));
    zext_ln851_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln851_fu_633_p2),86));
    zext_ln858_2_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln858_fu_727_p2),86));
    zext_ln858_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln858_fu_713_p2),86));
    zext_ln865_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_963),64));
end behav;
